
recieveusart_it.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009dd4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a0  08009f88  08009f88  00019f88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a528  0800a528  00020514  2**0
                  CONTENTS
  4 .ARM          00000008  0800a528  0800a528  0001a528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a530  0800a530  00020514  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a530  0800a530  0001a530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a534  0800a534  0001a534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000514  20000000  0800a538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020514  2**0
                  CONTENTS
 10 .bss          00000204  20000514  20000514  00020514  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000718  20000718  00020514  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020514  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d2d6  00000000  00000000  00020544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f26  00000000  00000000  0002d81a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000838  00000000  00000000  0002f740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000780  00000000  00000000  0002ff78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023fa4  00000000  00000000  000306f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a525  00000000  00000000  0005469c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3ae9  00000000  00000000  0005ebc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001326aa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003848  00000000  00000000  00132700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000514 	.word	0x20000514
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009f6c 	.word	0x08009f6c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000518 	.word	0x20000518
 80001ec:	08009f6c 	.word	0x08009f6c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <kf>:
#include "mathlib.h"

void kf(float dt, float F[NUM_S][NUM_S], float B[NUM_S][NUM_I], float H[NUM_S][NUM_S], \
        float x_est[NUM_S][1], float P[NUM_S][NUM_S], float Q[NUM_S][NUM_S], float R[NUM_S][NUM_S],\
        float u_p[NUM_I][1], float z_p_kf[NUM_S][1], float x_est_update[NUM_S][1], float P_update[NUM_S][NUM_S])
{
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	f6ad 1d14 	subw	sp, sp, #2324	; 0x914
 8001012:	af04      	add	r7, sp, #16
 8001014:	f107 0414 	add.w	r4, r7, #20
 8001018:	ed84 0a00 	vstr	s0, [r4]
 800101c:	f107 0410 	add.w	r4, r7, #16
 8001020:	6020      	str	r0, [r4, #0]
 8001022:	f107 000c 	add.w	r0, r7, #12
 8001026:	6001      	str	r1, [r0, #0]
 8001028:	f107 0108 	add.w	r1, r7, #8
 800102c:	600a      	str	r2, [r1, #0]
 800102e:	1d3a      	adds	r2, r7, #4
 8001030:	6013      	str	r3, [r2, #0]
    float iden[NUM_S][NUM_S];
    float k_x_H[NUM_S][NUM_S];
    float i_kH[NUM_S][NUM_S];

    // predicted state estimate
    mulMat(NUM_S, NUM_S, F, NUM_S, 1, x_est, F_x_x_est);
 8001032:	f107 0210 	add.w	r2, r7, #16
 8001036:	f607 03e8 	addw	r3, r7, #2280	; 0x8e8
 800103a:	9302      	str	r3, [sp, #8]
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	2301      	movs	r3, #1
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2306      	movs	r3, #6
 8001048:	6812      	ldr	r2, [r2, #0]
 800104a:	2106      	movs	r1, #6
 800104c:	2006      	movs	r0, #6
 800104e:	f000 fbdb 	bl	8001808 <mulMat>
    mulMat(NUM_S, NUM_I, B, NUM_I, 1, u_p, B_x_u);
 8001052:	f107 020c 	add.w	r2, r7, #12
 8001056:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 800105a:	9302      	str	r3, [sp, #8]
 800105c:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8001060:	9301      	str	r3, [sp, #4]
 8001062:	2301      	movs	r3, #1
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2303      	movs	r3, #3
 8001068:	6812      	ldr	r2, [r2, #0]
 800106a:	2103      	movs	r1, #3
 800106c:	2006      	movs	r0, #6
 800106e:	f000 fbcb 	bl	8001808 <mulMat>
    addMat(NUM_S, 1, F_x_x_est, B_x_u, x_est_p);
 8001072:	f507 610d 	add.w	r1, r7, #2256	; 0x8d0
 8001076:	f607 02e8 	addw	r2, r7, #2280	; 0x8e8
 800107a:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	460b      	mov	r3, r1
 8001082:	2101      	movs	r1, #1
 8001084:	2006      	movs	r0, #6
 8001086:	f000 fc61 	bl	800194c <addMat>
    // predicted error covariance
    transposeMat(NUM_S, NUM_S, F, F_t);
 800108a:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800108e:	f107 0210 	add.w	r2, r7, #16
 8001092:	6812      	ldr	r2, [r2, #0]
 8001094:	2106      	movs	r1, #6
 8001096:	2006      	movs	r0, #6
 8001098:	f000 fd40 	bl	8001b1c <transposeMat>
    mulMat(NUM_S, NUM_S, F, NUM_S, NUM_S, P, F_x_P);
 800109c:	f107 0210 	add.w	r2, r7, #16
 80010a0:	f507 63f3 	add.w	r3, r7, #1944	; 0x798
 80010a4:	9302      	str	r3, [sp, #8]
 80010a6:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	2306      	movs	r3, #6
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	2306      	movs	r3, #6
 80010b2:	6812      	ldr	r2, [r2, #0]
 80010b4:	2106      	movs	r1, #6
 80010b6:	2006      	movs	r0, #6
 80010b8:	f000 fba6 	bl	8001808 <mulMat>
    mulMat(NUM_S, NUM_S, F_x_P, NUM_S, NUM_S, F_t, FP_x_Ft);
 80010bc:	f507 62f3 	add.w	r2, r7, #1944	; 0x798
 80010c0:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 80010c4:	9302      	str	r3, [sp, #8]
 80010c6:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80010ca:	9301      	str	r3, [sp, #4]
 80010cc:	2306      	movs	r3, #6
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	2306      	movs	r3, #6
 80010d2:	2106      	movs	r1, #6
 80010d4:	2006      	movs	r0, #6
 80010d6:	f000 fb97 	bl	8001808 <mulMat>
    addMat(NUM_S, NUM_S, FP_x_Ft, Q, P_p);
 80010da:	f507 62e1 	add.w	r2, r7, #1800	; 0x708
 80010de:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 80010e8:	2106      	movs	r1, #6
 80010ea:	2006      	movs	r0, #6
 80010ec:	f000 fc2e 	bl	800194c <addMat>
    // Update

    // measurement residual
    mulMat(NUM_S, NUM_S, H, NUM_S, 1, x_est_p, H_x_x_est);
 80010f0:	f107 0208 	add.w	r2, r7, #8
 80010f4:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 80010f8:	9302      	str	r3, [sp, #8]
 80010fa:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	2301      	movs	r3, #1
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2306      	movs	r3, #6
 8001106:	6812      	ldr	r2, [r2, #0]
 8001108:	2106      	movs	r1, #6
 800110a:	2006      	movs	r0, #6
 800110c:	f000 fb7c 	bl	8001808 <mulMat>
    subMat(NUM_S, 1, z_p_kf, H_x_x_est, y);
 8001110:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 8001114:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	4613      	mov	r3, r2
 800111c:	f8d7 2920 	ldr.w	r2, [r7, #2336]	; 0x920
 8001120:	2101      	movs	r1, #1
 8001122:	2006      	movs	r0, #6
 8001124:	f000 fc86 	bl	8001a34 <subMat>

    // Kalman gain
    transposeMat(NUM_S, NUM_S, H, H_t);
 8001128:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800112c:	f107 0208 	add.w	r2, r7, #8
 8001130:	6812      	ldr	r2, [r2, #0]
 8001132:	2106      	movs	r1, #6
 8001134:	2006      	movs	r0, #6
 8001136:	f000 fcf1 	bl	8001b1c <transposeMat>
    mulMat(NUM_S, NUM_S, H, NUM_S, NUM_S, P_p, H_x_P);
 800113a:	f107 0208 	add.w	r2, r7, #8
 800113e:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8001142:	9302      	str	r3, [sp, #8]
 8001144:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8001148:	9301      	str	r3, [sp, #4]
 800114a:	2306      	movs	r3, #6
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2306      	movs	r3, #6
 8001150:	6812      	ldr	r2, [r2, #0]
 8001152:	2106      	movs	r1, #6
 8001154:	2006      	movs	r0, #6
 8001156:	f000 fb57 	bl	8001808 <mulMat>
    mulMat(NUM_S, NUM_S, H_x_P, NUM_S, NUM_S, H_t, HP_x_Ht);
 800115a:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
 800115e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001162:	9302      	str	r3, [sp, #8]
 8001164:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8001168:	9301      	str	r3, [sp, #4]
 800116a:	2306      	movs	r3, #6
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	2306      	movs	r3, #6
 8001170:	2106      	movs	r1, #6
 8001172:	2006      	movs	r0, #6
 8001174:	f000 fb48 	bl	8001808 <mulMat>
    addMat(NUM_S, NUM_S, HP_x_Ht, R, R_s);
 8001178:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 800117c:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	f8d7 3918 	ldr.w	r3, [r7, #2328]	; 0x918
 8001186:	2106      	movs	r1, #6
 8001188:	2006      	movs	r0, #6
 800118a:	f000 fbdf 	bl	800194c <addMat>
    inverseMat(NUM_S, R_s, Rs_inv);
 800118e:	f507 7240 	add.w	r2, r7, #768	; 0x300
 8001192:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8001196:	4619      	mov	r1, r3
 8001198:	2006      	movs	r0, #6
 800119a:	f000 fd61 	bl	8001c60 <inverseMat>
    mulMat(NUM_S, NUM_S, P_p, NUM_S, NUM_S, H_t, P_x_H);
 800119e:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 80011a2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80011a6:	9302      	str	r3, [sp, #8]
 80011a8:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	2306      	movs	r3, #6
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2306      	movs	r3, #6
 80011b4:	2106      	movs	r1, #6
 80011b6:	2006      	movs	r0, #6
 80011b8:	f000 fb26 	bl	8001808 <mulMat>
    mulMat(NUM_S, NUM_S, P_x_H, NUM_S, NUM_S, Rs_inv, k_gain);
 80011bc:	f507 721c 	add.w	r2, r7, #624	; 0x270
 80011c0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80011c4:	9302      	str	r3, [sp, #8]
 80011c6:	f507 7340 	add.w	r3, r7, #768	; 0x300
 80011ca:	9301      	str	r3, [sp, #4]
 80011cc:	2306      	movs	r3, #6
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	2306      	movs	r3, #6
 80011d2:	2106      	movs	r1, #6
 80011d4:	2006      	movs	r0, #6
 80011d6:	f000 fb17 	bl	8001808 <mulMat>

    // updated state estimate
    mulMat(NUM_S, NUM_S, k_gain, NUM_S, 1, y, k_x_y);
 80011da:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 80011de:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80011e2:	9302      	str	r3, [sp, #8]
 80011e4:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	2301      	movs	r3, #1
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	2306      	movs	r3, #6
 80011f0:	2106      	movs	r1, #6
 80011f2:	2006      	movs	r0, #6
 80011f4:	f000 fb08 	bl	8001808 <mulMat>
    addMat(NUM_S, NUM_S, x_est_p, k_x_y, x_est_update);
 80011f8:	f507 71e4 	add.w	r1, r7, #456	; 0x1c8
 80011fc:	f607 02b8 	addw	r2, r7, #2232	; 0x8b8
 8001200:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	460b      	mov	r3, r1
 8001208:	2106      	movs	r1, #6
 800120a:	2006      	movs	r0, #6
 800120c:	f000 fb9e 	bl	800194c <addMat>

    // updated error covariance
    mulMat(NUM_S, NUM_S, k_gain, NUM_S, NUM_S, H, k_x_H);
 8001210:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8001214:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001218:	9302      	str	r3, [sp, #8]
 800121a:	f107 0308 	add.w	r3, r7, #8
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	9301      	str	r3, [sp, #4]
 8001222:	2306      	movs	r3, #6
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2306      	movs	r3, #6
 8001228:	2106      	movs	r1, #6
 800122a:	2006      	movs	r0, #6
 800122c:	f000 faec 	bl	8001808 <mulMat>
    identityMat(NUM_S, iden);
 8001230:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001234:	4619      	mov	r1, r3
 8001236:	2006      	movs	r0, #6
 8001238:	f000 fcc5 	bl	8001bc6 <identityMat>
    subMat(NUM_S, NUM_S, iden, k_x_H, i_kH);
 800123c:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001240:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8001244:	f107 0318 	add.w	r3, r7, #24
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	460b      	mov	r3, r1
 800124c:	2106      	movs	r1, #6
 800124e:	2006      	movs	r0, #6
 8001250:	f000 fbf0 	bl	8001a34 <subMat>
    mulMat(NUM_S, NUM_S, i_kH, NUM_S, NUM_S, P_p, P_update);
 8001254:	f107 0218 	add.w	r2, r7, #24
 8001258:	f8d7 3928 	ldr.w	r3, [r7, #2344]	; 0x928
 800125c:	9302      	str	r3, [sp, #8]
 800125e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8001262:	9301      	str	r3, [sp, #4]
 8001264:	2306      	movs	r3, #6
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	2306      	movs	r3, #6
 800126a:	2106      	movs	r1, #6
 800126c:	2006      	movs	r0, #6
 800126e:	f000 facb 	bl	8001808 <mulMat>
}
 8001272:	bf00      	nop
 8001274:	f607 1704 	addw	r7, r7, #2308	; 0x904
 8001278:	46bd      	mov	sp, r7
 800127a:	bd90      	pop	{r4, r7, pc}

0800127c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) //restart the interrupt reception mode
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, buff, 36);
 8001284:	2224      	movs	r2, #36	; 0x24
 8001286:	4904      	ldr	r1, [pc, #16]	; (8001298 <HAL_UART_RxCpltCallback+0x1c>)
 8001288:	4804      	ldr	r0, [pc, #16]	; (800129c <HAL_UART_RxCpltCallback+0x20>)
 800128a:	f002 fafe 	bl	800388a <HAL_UART_Receive_IT>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000530 	.word	0x20000530
 800129c:	20000668 	.word	0x20000668

080012a0 <sendData>:

// generate random data between float min and float max
// function to convert and send over UART, param XL_Data, UART Handle Typedef

void sendData(struct XL_Data * data, UART_HandleTypeDef * huart)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
	// uart can only send unsigned int
	// thus we need to convert out struct data
	char buffer[sizeof(data) * 6]; // buffer in size data 24B for four floats
	memcpy(buffer, data, sizeof(data) * 6);
 80012aa:	f107 0308 	add.w	r3, r7, #8
 80012ae:	2218      	movs	r2, #24
 80012b0:	6879      	ldr	r1, [r7, #4]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f003 f9fc 	bl	80046b0 <memcpy>
	HAL_UART_Transmit(huart, (uint8_t *)buffer, sizeof(buffer), 500);
 80012b8:	f107 0108 	add.w	r1, r7, #8
 80012bc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012c0:	2218      	movs	r2, #24
 80012c2:	6838      	ldr	r0, [r7, #0]
 80012c4:	f002 fa4f 	bl	8003766 <HAL_UART_Transmit>
}
 80012c8:	bf00      	nop
 80012ca:	3720      	adds	r7, #32
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <main>:

/* USER CODE END 0 */


int main(void)
{
 80012d0:	b5b0      	push	{r4, r5, r7, lr}
 80012d2:	b08a      	sub	sp, #40	; 0x28
 80012d4:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d6:	f001 f985 	bl	80025e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012da:	f000 f9a7 	bl	800162c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012de:	f000 fa3b 	bl	8001758 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80012e2:	f000 fa0f 	bl	8001704 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int X = 1;
 80012e6:	2301      	movs	r3, #1
 80012e8:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */
    //receive data
    HAL_UART_Receive_IT(&huart1, buff, 36);
 80012ea:	2224      	movs	r2, #36	; 0x24
 80012ec:	4903      	ldr	r1, [pc, #12]	; (80012fc <main+0x2c>)
 80012ee:	4804      	ldr	r0, [pc, #16]	; (8001300 <main+0x30>)
 80012f0:	f002 facb 	bl	800388a <HAL_UART_Receive_IT>

    for( int a = 0 ; a < 5 ; a = a + 1 )
 80012f4:	2300      	movs	r3, #0
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	e058      	b.n	80013ac <main+0xdc>
 80012fa:	bf00      	nop
 80012fc:	20000530 	.word	0x20000530
 8001300:	20000668 	.word	0x20000668
    {
        xl[a] = buff[a];
 8001304:	4a99      	ldr	r2, [pc, #612]	; (800156c <main+0x29c>)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	4413      	add	r3, r2
 800130a:	7819      	ldrb	r1, [r3, #0]
 800130c:	4a98      	ldr	r2, [pc, #608]	; (8001570 <main+0x2a0>)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	4413      	add	r3, r2
 8001312:	460a      	mov	r2, r1
 8001314:	701a      	strb	r2, [r3, #0]
        yl[a] = buff[a + 4];
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	3304      	adds	r3, #4
 800131a:	4a94      	ldr	r2, [pc, #592]	; (800156c <main+0x29c>)
 800131c:	5cd1      	ldrb	r1, [r2, r3]
 800131e:	4a95      	ldr	r2, [pc, #596]	; (8001574 <main+0x2a4>)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	4413      	add	r3, r2
 8001324:	460a      	mov	r2, r1
 8001326:	701a      	strb	r2, [r3, #0]
        zl[a] = buff[a + 8];
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	3308      	adds	r3, #8
 800132c:	4a8f      	ldr	r2, [pc, #572]	; (800156c <main+0x29c>)
 800132e:	5cd1      	ldrb	r1, [r2, r3]
 8001330:	4a91      	ldr	r2, [pc, #580]	; (8001578 <main+0x2a8>)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	4413      	add	r3, r2
 8001336:	460a      	mov	r2, r1
 8001338:	701a      	strb	r2, [r3, #0]
        vxl[a] = buff[a + 12];
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	330c      	adds	r3, #12
 800133e:	4a8b      	ldr	r2, [pc, #556]	; (800156c <main+0x29c>)
 8001340:	5cd1      	ldrb	r1, [r2, r3]
 8001342:	4a8e      	ldr	r2, [pc, #568]	; (800157c <main+0x2ac>)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	4413      	add	r3, r2
 8001348:	460a      	mov	r2, r1
 800134a:	701a      	strb	r2, [r3, #0]
        vyl[a] = buff[a + 16];
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	3310      	adds	r3, #16
 8001350:	4a86      	ldr	r2, [pc, #536]	; (800156c <main+0x29c>)
 8001352:	5cd1      	ldrb	r1, [r2, r3]
 8001354:	4a8a      	ldr	r2, [pc, #552]	; (8001580 <main+0x2b0>)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	4413      	add	r3, r2
 800135a:	460a      	mov	r2, r1
 800135c:	701a      	strb	r2, [r3, #0]
        vzl[a] = buff[a + 20];
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	3314      	adds	r3, #20
 8001362:	4a82      	ldr	r2, [pc, #520]	; (800156c <main+0x29c>)
 8001364:	5cd1      	ldrb	r1, [r2, r3]
 8001366:	4a87      	ldr	r2, [pc, #540]	; (8001584 <main+0x2b4>)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	4413      	add	r3, r2
 800136c:	460a      	mov	r2, r1
 800136e:	701a      	strb	r2, [r3, #0]

        uxl[a] = buff[a + 24];
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	3318      	adds	r3, #24
 8001374:	4a7d      	ldr	r2, [pc, #500]	; (800156c <main+0x29c>)
 8001376:	5cd1      	ldrb	r1, [r2, r3]
 8001378:	4a83      	ldr	r2, [pc, #524]	; (8001588 <main+0x2b8>)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	4413      	add	r3, r2
 800137e:	460a      	mov	r2, r1
 8001380:	701a      	strb	r2, [r3, #0]
        uyl[a] = buff[a + 28];
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	331c      	adds	r3, #28
 8001386:	4a79      	ldr	r2, [pc, #484]	; (800156c <main+0x29c>)
 8001388:	5cd1      	ldrb	r1, [r2, r3]
 800138a:	4a80      	ldr	r2, [pc, #512]	; (800158c <main+0x2bc>)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	4413      	add	r3, r2
 8001390:	460a      	mov	r2, r1
 8001392:	701a      	strb	r2, [r3, #0]
        uzl[a] = buff[a + 32];
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	3320      	adds	r3, #32
 8001398:	4a74      	ldr	r2, [pc, #464]	; (800156c <main+0x29c>)
 800139a:	5cd1      	ldrb	r1, [r2, r3]
 800139c:	4a7c      	ldr	r2, [pc, #496]	; (8001590 <main+0x2c0>)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	4413      	add	r3, r2
 80013a2:	460a      	mov	r2, r1
 80013a4:	701a      	strb	r2, [r3, #0]
    for( int a = 0 ; a < 5 ; a = a + 1 )
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	3301      	adds	r3, #1
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	2b04      	cmp	r3, #4
 80013b0:	dda8      	ble.n	8001304 <main+0x34>
 80013b2:	4b6f      	ldr	r3, [pc, #444]	; (8001570 <main+0x2a0>)
 80013b4:	681b      	ldr	r3, [r3, #0]

    }

    memcpy(&fx, &xl, sizeof(fx));
 80013b6:	4a77      	ldr	r2, [pc, #476]	; (8001594 <main+0x2c4>)
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	4b6e      	ldr	r3, [pc, #440]	; (8001574 <main+0x2a4>)
 80013bc:	681b      	ldr	r3, [r3, #0]
    memcpy(&fy, &yl, sizeof(fy));
 80013be:	4a76      	ldr	r2, [pc, #472]	; (8001598 <main+0x2c8>)
 80013c0:	6013      	str	r3, [r2, #0]
 80013c2:	4b6d      	ldr	r3, [pc, #436]	; (8001578 <main+0x2a8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
    memcpy(&fz, &zl, sizeof(fz));
 80013c6:	4a75      	ldr	r2, [pc, #468]	; (800159c <main+0x2cc>)
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	4b6c      	ldr	r3, [pc, #432]	; (800157c <main+0x2ac>)
 80013cc:	681b      	ldr	r3, [r3, #0]
    memcpy(&fvx, &vxl, sizeof(fvx));
 80013ce:	4a74      	ldr	r2, [pc, #464]	; (80015a0 <main+0x2d0>)
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	4b6b      	ldr	r3, [pc, #428]	; (8001580 <main+0x2b0>)
 80013d4:	681b      	ldr	r3, [r3, #0]
    memcpy(&fvy, &vyl, sizeof(fvy));
 80013d6:	4a73      	ldr	r2, [pc, #460]	; (80015a4 <main+0x2d4>)
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	4b6a      	ldr	r3, [pc, #424]	; (8001584 <main+0x2b4>)
 80013dc:	681b      	ldr	r3, [r3, #0]
    memcpy(&fvz, &vzl, sizeof(fvz));
 80013de:	4a72      	ldr	r2, [pc, #456]	; (80015a8 <main+0x2d8>)
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	4b69      	ldr	r3, [pc, #420]	; (8001588 <main+0x2b8>)
 80013e4:	681b      	ldr	r3, [r3, #0]

    memcpy(&fux, &uxl, sizeof(fux));
 80013e6:	4a71      	ldr	r2, [pc, #452]	; (80015ac <main+0x2dc>)
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	4b68      	ldr	r3, [pc, #416]	; (800158c <main+0x2bc>)
 80013ec:	681b      	ldr	r3, [r3, #0]
    memcpy(&fuy, &uyl, sizeof(fuy));
 80013ee:	4a70      	ldr	r2, [pc, #448]	; (80015b0 <main+0x2e0>)
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	4b67      	ldr	r3, [pc, #412]	; (8001590 <main+0x2c0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
    memcpy(&fuz, &uzl, sizeof(fuz));
 80013f6:	4a6f      	ldr	r2, [pc, #444]	; (80015b4 <main+0x2e4>)
 80013f8:	6013      	str	r3, [r2, #0]


    if(fx != 0.0 && fy != 0.0 && fz != 0.0 && fvx != 0.0 && fvy != 0.0 && fvz != 0.0)
 80013fa:	4b66      	ldr	r3, [pc, #408]	; (8001594 <main+0x2c4>)
 80013fc:	edd3 7a00 	vldr	s15, [r3]
 8001400:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001408:	f43f af6f 	beq.w	80012ea <main+0x1a>
 800140c:	4b62      	ldr	r3, [pc, #392]	; (8001598 <main+0x2c8>)
 800140e:	edd3 7a00 	vldr	s15, [r3]
 8001412:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141a:	f43f af66 	beq.w	80012ea <main+0x1a>
 800141e:	4b5f      	ldr	r3, [pc, #380]	; (800159c <main+0x2cc>)
 8001420:	edd3 7a00 	vldr	s15, [r3]
 8001424:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142c:	f43f af5d 	beq.w	80012ea <main+0x1a>
 8001430:	4b5b      	ldr	r3, [pc, #364]	; (80015a0 <main+0x2d0>)
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	eef5 7a40 	vcmp.f32	s15, #0.0
 800143a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143e:	f43f af54 	beq.w	80012ea <main+0x1a>
 8001442:	4b58      	ldr	r3, [pc, #352]	; (80015a4 <main+0x2d4>)
 8001444:	edd3 7a00 	vldr	s15, [r3]
 8001448:	eef5 7a40 	vcmp.f32	s15, #0.0
 800144c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001450:	f43f af4b 	beq.w	80012ea <main+0x1a>
 8001454:	4b54      	ldr	r3, [pc, #336]	; (80015a8 <main+0x2d8>)
 8001456:	edd3 7a00 	vldr	s15, [r3]
 800145a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800145e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001462:	f43f af42 	beq.w	80012ea <main+0x1a>
    {
    	z_measure[0][0] = fx;
 8001466:	4b4b      	ldr	r3, [pc, #300]	; (8001594 <main+0x2c4>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a53      	ldr	r2, [pc, #332]	; (80015b8 <main+0x2e8>)
 800146c:	6013      	str	r3, [r2, #0]
    	z_measure[1][0] = fy;
 800146e:	4b4a      	ldr	r3, [pc, #296]	; (8001598 <main+0x2c8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a51      	ldr	r2, [pc, #324]	; (80015b8 <main+0x2e8>)
 8001474:	6053      	str	r3, [r2, #4]
    	z_measure[2][0] = fz;
 8001476:	4b49      	ldr	r3, [pc, #292]	; (800159c <main+0x2cc>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a4f      	ldr	r2, [pc, #316]	; (80015b8 <main+0x2e8>)
 800147c:	6093      	str	r3, [r2, #8]
    	z_measure[3][0] = fvx;
 800147e:	4b48      	ldr	r3, [pc, #288]	; (80015a0 <main+0x2d0>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a4d      	ldr	r2, [pc, #308]	; (80015b8 <main+0x2e8>)
 8001484:	60d3      	str	r3, [r2, #12]
    	z_measure[4][0] = fvy;
 8001486:	4b47      	ldr	r3, [pc, #284]	; (80015a4 <main+0x2d4>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a4b      	ldr	r2, [pc, #300]	; (80015b8 <main+0x2e8>)
 800148c:	6113      	str	r3, [r2, #16]
    	z_measure[5][0] = fvz;
 800148e:	4b46      	ldr	r3, [pc, #280]	; (80015a8 <main+0x2d8>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a49      	ldr	r2, [pc, #292]	; (80015b8 <main+0x2e8>)
 8001494:	6153      	str	r3, [r2, #20]

    	if(X == 1)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d117      	bne.n	80014cc <main+0x1fc>
      	{
           x_debug[0] = fx;
 800149c:	4b3d      	ldr	r3, [pc, #244]	; (8001594 <main+0x2c4>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a46      	ldr	r2, [pc, #280]	; (80015bc <main+0x2ec>)
 80014a2:	6013      	str	r3, [r2, #0]
           x_debug[1] = fy;
 80014a4:	4b3c      	ldr	r3, [pc, #240]	; (8001598 <main+0x2c8>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a44      	ldr	r2, [pc, #272]	; (80015bc <main+0x2ec>)
 80014aa:	6053      	str	r3, [r2, #4]
           x_debug[2] = fz;
 80014ac:	4b3b      	ldr	r3, [pc, #236]	; (800159c <main+0x2cc>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a42      	ldr	r2, [pc, #264]	; (80015bc <main+0x2ec>)
 80014b2:	6093      	str	r3, [r2, #8]
           x_debug[3] = fvx;
 80014b4:	4b3a      	ldr	r3, [pc, #232]	; (80015a0 <main+0x2d0>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a40      	ldr	r2, [pc, #256]	; (80015bc <main+0x2ec>)
 80014ba:	60d3      	str	r3, [r2, #12]
           x_debug[4] = fvy;
 80014bc:	4b39      	ldr	r3, [pc, #228]	; (80015a4 <main+0x2d4>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a3e      	ldr	r2, [pc, #248]	; (80015bc <main+0x2ec>)
 80014c2:	6113      	str	r3, [r2, #16]
           x_debug[5] = fvz;
 80014c4:	4b38      	ldr	r3, [pc, #224]	; (80015a8 <main+0x2d8>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a3c      	ldr	r2, [pc, #240]	; (80015bc <main+0x2ec>)
 80014ca:	6153      	str	r3, [r2, #20]

	    }
    	u_p[0][0] = fux;
 80014cc:	4b37      	ldr	r3, [pc, #220]	; (80015ac <main+0x2dc>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a3b      	ldr	r2, [pc, #236]	; (80015c0 <main+0x2f0>)
 80014d2:	6013      	str	r3, [r2, #0]
    	u_p[1][0] = fuy;
 80014d4:	4b36      	ldr	r3, [pc, #216]	; (80015b0 <main+0x2e0>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a39      	ldr	r2, [pc, #228]	; (80015c0 <main+0x2f0>)
 80014da:	6053      	str	r3, [r2, #4]
    	u_p[2][0] = fuz;
 80014dc:	4b35      	ldr	r3, [pc, #212]	; (80015b4 <main+0x2e4>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a37      	ldr	r2, [pc, #220]	; (80015c0 <main+0x2f0>)
 80014e2:	6093      	str	r3, [r2, #8]

        kf(dt, F, B, H, x_est, P, Q, R, u_p, z_measure, x_est_update, P_update);
 80014e4:	4b37      	ldr	r3, [pc, #220]	; (80015c4 <main+0x2f4>)
 80014e6:	9306      	str	r3, [sp, #24]
 80014e8:	4b37      	ldr	r3, [pc, #220]	; (80015c8 <main+0x2f8>)
 80014ea:	9305      	str	r3, [sp, #20]
 80014ec:	4b32      	ldr	r3, [pc, #200]	; (80015b8 <main+0x2e8>)
 80014ee:	9304      	str	r3, [sp, #16]
 80014f0:	4b33      	ldr	r3, [pc, #204]	; (80015c0 <main+0x2f0>)
 80014f2:	9303      	str	r3, [sp, #12]
 80014f4:	4b35      	ldr	r3, [pc, #212]	; (80015cc <main+0x2fc>)
 80014f6:	9302      	str	r3, [sp, #8]
 80014f8:	4b35      	ldr	r3, [pc, #212]	; (80015d0 <main+0x300>)
 80014fa:	9301      	str	r3, [sp, #4]
 80014fc:	4b35      	ldr	r3, [pc, #212]	; (80015d4 <main+0x304>)
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	4b35      	ldr	r3, [pc, #212]	; (80015d8 <main+0x308>)
 8001502:	4a36      	ldr	r2, [pc, #216]	; (80015dc <main+0x30c>)
 8001504:	4936      	ldr	r1, [pc, #216]	; (80015e0 <main+0x310>)
 8001506:	4837      	ldr	r0, [pc, #220]	; (80015e4 <main+0x314>)
 8001508:	ed9f 0a37 	vldr	s0, [pc, #220]	; 80015e8 <main+0x318>
 800150c:	f7ff fd7e 	bl	800100c <kf>

        memcpy(x_est, x_est_update, sizeof(x_est_update));
 8001510:	4a31      	ldr	r2, [pc, #196]	; (80015d8 <main+0x308>)
 8001512:	4b2d      	ldr	r3, [pc, #180]	; (80015c8 <main+0x2f8>)
 8001514:	4614      	mov	r4, r2
 8001516:	461d      	mov	r5, r3
 8001518:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800151a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800151c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001520:	e884 0003 	stmia.w	r4, {r0, r1}
        memcpy(P, P_update, sizeof(P_update));
 8001524:	4a2b      	ldr	r2, [pc, #172]	; (80015d4 <main+0x304>)
 8001526:	4b27      	ldr	r3, [pc, #156]	; (80015c4 <main+0x2f4>)
 8001528:	4610      	mov	r0, r2
 800152a:	4619      	mov	r1, r3
 800152c:	2390      	movs	r3, #144	; 0x90
 800152e:	461a      	mov	r2, r3
 8001530:	f003 f8be 	bl	80046b0 <memcpy>

	    //send data
	    tx_data.x = x_est[0][0];
 8001534:	4b28      	ldr	r3, [pc, #160]	; (80015d8 <main+0x308>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a2c      	ldr	r2, [pc, #176]	; (80015ec <main+0x31c>)
 800153a:	6013      	str	r3, [r2, #0]
	    tx_data.y = x_est[1][0];
 800153c:	4b26      	ldr	r3, [pc, #152]	; (80015d8 <main+0x308>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	4a2a      	ldr	r2, [pc, #168]	; (80015ec <main+0x31c>)
 8001542:	6053      	str	r3, [r2, #4]
	    tx_data.z = x_est[2][0];
 8001544:	4b24      	ldr	r3, [pc, #144]	; (80015d8 <main+0x308>)
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	4a28      	ldr	r2, [pc, #160]	; (80015ec <main+0x31c>)
 800154a:	6093      	str	r3, [r2, #8]
	    tx_data.vx = x_est[3][0];
 800154c:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <main+0x308>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	4a26      	ldr	r2, [pc, #152]	; (80015ec <main+0x31c>)
 8001552:	60d3      	str	r3, [r2, #12]
	    tx_data.vy = x_est[4][0];
 8001554:	4b20      	ldr	r3, [pc, #128]	; (80015d8 <main+0x308>)
 8001556:	691b      	ldr	r3, [r3, #16]
 8001558:	4a24      	ldr	r2, [pc, #144]	; (80015ec <main+0x31c>)
 800155a:	6113      	str	r3, [r2, #16]
	    tx_data.vz = x_est[5][0];
 800155c:	4b1e      	ldr	r3, [pc, #120]	; (80015d8 <main+0x308>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	4a22      	ldr	r2, [pc, #136]	; (80015ec <main+0x31c>)
 8001562:	6153      	str	r3, [r2, #20]

	    // indicate start with S
	    HAL_UART_Transmit(&huart1, (uint8_t *)"S", sizeof("S"), 500);
 8001564:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001568:	2202      	movs	r2, #2
 800156a:	e041      	b.n	80015f0 <main+0x320>
 800156c:	20000530 	.word	0x20000530
 8001570:	20000570 	.word	0x20000570
 8001574:	20000574 	.word	0x20000574
 8001578:	20000578 	.word	0x20000578
 800157c:	2000057c 	.word	0x2000057c
 8001580:	20000580 	.word	0x20000580
 8001584:	20000584 	.word	0x20000584
 8001588:	20000588 	.word	0x20000588
 800158c:	2000058c 	.word	0x2000058c
 8001590:	20000590 	.word	0x20000590
 8001594:	20000594 	.word	0x20000594
 8001598:	20000598 	.word	0x20000598
 800159c:	2000059c 	.word	0x2000059c
 80015a0:	200005a0 	.word	0x200005a0
 80015a4:	200005a4 	.word	0x200005a4
 80015a8:	200005a8 	.word	0x200005a8
 80015ac:	200005d4 	.word	0x200005d4
 80015b0:	200006e8 	.word	0x200006e8
 80015b4:	200005b8 	.word	0x200005b8
 80015b8:	200006c4 	.word	0x200006c4
 80015bc:	200006ac 	.word	0x200006ac
 80015c0:	200006dc 	.word	0x200006dc
 80015c4:	200005d8 	.word	0x200005d8
 80015c8:	200005bc 	.word	0x200005bc
 80015cc:	20000090 	.word	0x20000090
 80015d0:	20000000 	.word	0x20000000
 80015d4:	200002a0 	.word	0x200002a0
 80015d8:	20000288 	.word	0x20000288
 80015dc:	200001f8 	.word	0x200001f8
 80015e0:	200001b0 	.word	0x200001b0
 80015e4:	20000120 	.word	0x20000120
 80015e8:	3dcccccd 	.word	0x3dcccccd
 80015ec:	200006ec 	.word	0x200006ec
 80015f0:	490a      	ldr	r1, [pc, #40]	; (800161c <main+0x34c>)
 80015f2:	480b      	ldr	r0, [pc, #44]	; (8001620 <main+0x350>)
 80015f4:	f002 f8b7 	bl	8003766 <HAL_UART_Transmit>
	    sendData(&tx_data, &huart1);
 80015f8:	4909      	ldr	r1, [pc, #36]	; (8001620 <main+0x350>)
 80015fa:	480a      	ldr	r0, [pc, #40]	; (8001624 <main+0x354>)
 80015fc:	f7ff fe50 	bl	80012a0 <sendData>
      	// indicate end of sequence with "Z"
	    HAL_UART_Transmit(&huart1, (uint8_t *)"Z", sizeof("Z"), 500);
 8001600:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001604:	2202      	movs	r2, #2
 8001606:	4908      	ldr	r1, [pc, #32]	; (8001628 <main+0x358>)
 8001608:	4805      	ldr	r0, [pc, #20]	; (8001620 <main+0x350>)
 800160a:	f002 f8ac 	bl	8003766 <HAL_UART_Transmit>

	    //HAL_GPIO_TogglePin (GPIOG, GPIO_PIN_13);
        HAL_Delay (20);
 800160e:	2014      	movs	r0, #20
 8001610:	f001 f85a 	bl	80026c8 <HAL_Delay>
        /* USER CODE BEGIN 3 */
        X = X + 1;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3301      	adds	r3, #1
 8001618:	607b      	str	r3, [r7, #4]
    HAL_UART_Receive_IT(&huart1, buff, 36);
 800161a:	e666      	b.n	80012ea <main+0x1a>
 800161c:	08009f88 	.word	0x08009f88
 8001620:	20000668 	.word	0x20000668
 8001624:	200006ec 	.word	0x200006ec
 8001628:	08009f8c 	.word	0x08009f8c

0800162c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b094      	sub	sp, #80	; 0x50
 8001630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001632:	f107 0320 	add.w	r3, r7, #32
 8001636:	2230      	movs	r2, #48	; 0x30
 8001638:	2100      	movs	r1, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f003 f846 	bl	80046cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001640:	f107 030c 	add.w	r3, r7, #12
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001650:	2300      	movs	r3, #0
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	4b29      	ldr	r3, [pc, #164]	; (80016fc <SystemClock_Config+0xd0>)
 8001656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001658:	4a28      	ldr	r2, [pc, #160]	; (80016fc <SystemClock_Config+0xd0>)
 800165a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800165e:	6413      	str	r3, [r2, #64]	; 0x40
 8001660:	4b26      	ldr	r3, [pc, #152]	; (80016fc <SystemClock_Config+0xd0>)
 8001662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800166c:	2300      	movs	r3, #0
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	4b23      	ldr	r3, [pc, #140]	; (8001700 <SystemClock_Config+0xd4>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001678:	4a21      	ldr	r2, [pc, #132]	; (8001700 <SystemClock_Config+0xd4>)
 800167a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <SystemClock_Config+0xd4>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001688:	607b      	str	r3, [r7, #4]
 800168a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800168c:	2301      	movs	r3, #1
 800168e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001690:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001696:	2302      	movs	r3, #2
 8001698:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800169a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800169e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016a0:	2304      	movs	r3, #4
 80016a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80016a4:	2348      	movs	r3, #72	; 0x48
 80016a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016a8:	2302      	movs	r3, #2
 80016aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80016ac:	2307      	movs	r3, #7
 80016ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b0:	f107 0320 	add.w	r3, r7, #32
 80016b4:	4618      	mov	r0, r3
 80016b6:	f001 fb95 	bl	8002de4 <HAL_RCC_OscConfig>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80016c0:	f000 f89c 	bl	80017fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016c4:	230f      	movs	r3, #15
 80016c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016c8:	2302      	movs	r3, #2
 80016ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80016d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016dc:	f107 030c 	add.w	r3, r7, #12
 80016e0:	2102      	movs	r1, #2
 80016e2:	4618      	mov	r0, r3
 80016e4:	f001 fdf6 	bl	80032d4 <HAL_RCC_ClockConfig>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80016ee:	f000 f885 	bl	80017fc <Error_Handler>
  }
}
 80016f2:	bf00      	nop
 80016f4:	3750      	adds	r7, #80	; 0x50
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40023800 	.word	0x40023800
 8001700:	40007000 	.word	0x40007000

08001704 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <MX_USART1_UART_Init+0x4c>)
 800170a:	4a12      	ldr	r2, [pc, #72]	; (8001754 <MX_USART1_UART_Init+0x50>)
 800170c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <MX_USART1_UART_Init+0x4c>)
 8001710:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001714:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <MX_USART1_UART_Init+0x4c>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <MX_USART1_UART_Init+0x4c>)
 800171e:	2200      	movs	r2, #0
 8001720:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001722:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <MX_USART1_UART_Init+0x4c>)
 8001724:	2200      	movs	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001728:	4b09      	ldr	r3, [pc, #36]	; (8001750 <MX_USART1_UART_Init+0x4c>)
 800172a:	220c      	movs	r2, #12
 800172c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800172e:	4b08      	ldr	r3, [pc, #32]	; (8001750 <MX_USART1_UART_Init+0x4c>)
 8001730:	2200      	movs	r2, #0
 8001732:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <MX_USART1_UART_Init+0x4c>)
 8001736:	2200      	movs	r2, #0
 8001738:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800173a:	4805      	ldr	r0, [pc, #20]	; (8001750 <MX_USART1_UART_Init+0x4c>)
 800173c:	f001 ffc6 	bl	80036cc <HAL_UART_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001746:	f000 f859 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000668 	.word	0x20000668
 8001754:	40011000 	.word	0x40011000

08001758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b088      	sub	sp, #32
 800175c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175e:	f107 030c 	add.w	r3, r7, #12
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	60da      	str	r2, [r3, #12]
 800176c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	4b20      	ldr	r3, [pc, #128]	; (80017f4 <MX_GPIO_Init+0x9c>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	4a1f      	ldr	r2, [pc, #124]	; (80017f4 <MX_GPIO_Init+0x9c>)
 8001778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
 800177e:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <MX_GPIO_Init+0x9c>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	607b      	str	r3, [r7, #4]
 800178e:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <MX_GPIO_Init+0x9c>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4a18      	ldr	r2, [pc, #96]	; (80017f4 <MX_GPIO_Init+0x9c>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6313      	str	r3, [r2, #48]	; 0x30
 800179a:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <MX_GPIO_Init+0x9c>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	603b      	str	r3, [r7, #0]
 80017aa:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <MX_GPIO_Init+0x9c>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4a11      	ldr	r2, [pc, #68]	; (80017f4 <MX_GPIO_Init+0x9c>)
 80017b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
 80017b6:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <MX_GPIO_Init+0x9c>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017be:	603b      	str	r3, [r7, #0]
 80017c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 80017c2:	2200      	movs	r2, #0
 80017c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017c8:	480b      	ldr	r0, [pc, #44]	; (80017f8 <MX_GPIO_Init+0xa0>)
 80017ca:	f001 faf1 	bl	8002db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80017ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d4:	2301      	movs	r3, #1
 80017d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017dc:	2300      	movs	r3, #0
 80017de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017e0:	f107 030c 	add.w	r3, r7, #12
 80017e4:	4619      	mov	r1, r3
 80017e6:	4804      	ldr	r0, [pc, #16]	; (80017f8 <MX_GPIO_Init+0xa0>)
 80017e8:	f001 f936 	bl	8002a58 <HAL_GPIO_Init>

}
 80017ec:	bf00      	nop
 80017ee:	3720      	adds	r7, #32
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40021800 	.word	0x40021800

080017fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001800:	b672      	cpsid	i
}
 8001802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001804:	e7fe      	b.n	8001804 <Error_Handler+0x8>
	...

08001808 <mulMat>:
        out[0][c] = A[target_row - 1][c];
    }
}

void mulMat(int row1, int col1, float mat1[row1][col1], int row2, int col2, float mat2[row2][col2], float out[row1][col2])
{
 8001808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800180a:	b08b      	sub	sp, #44	; 0x2c
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
 8001814:	603b      	str	r3, [r7, #0]
void mulMat(int row1, int col1, float mat1[row1][col1], int row2, int col2, float mat2[row2][col2], float out[row1][col2])
 8001816:	68bd      	ldr	r5, [r7, #8]
 8001818:	1e6b      	subs	r3, r5, #1
 800181a:	61bb      	str	r3, [r7, #24]
 800181c:	462b      	mov	r3, r5
 800181e:	4618      	mov	r0, r3
 8001820:	f04f 0100 	mov.w	r1, #0
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	f04f 0300 	mov.w	r3, #0
 800182c:	014b      	lsls	r3, r1, #5
 800182e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001832:	0142      	lsls	r2, r0, #5
 8001834:	6c3e      	ldr	r6, [r7, #64]	; 0x40
 8001836:	1e73      	subs	r3, r6, #1
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	4633      	mov	r3, r6
 800183c:	4618      	mov	r0, r3
 800183e:	f04f 0100 	mov.w	r1, #0
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	f04f 0300 	mov.w	r3, #0
 800184a:	014b      	lsls	r3, r1, #5
 800184c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001850:	0142      	lsls	r2, r0, #5
 8001852:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8001854:	1e63      	subs	r3, r4, #1
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	4623      	mov	r3, r4
 800185a:	4618      	mov	r0, r3
 800185c:	f04f 0100 	mov.w	r1, #0
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	f04f 0300 	mov.w	r3, #0
 8001868:	014b      	lsls	r3, r1, #5
 800186a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800186e:	0142      	lsls	r2, r0, #5

    if (col1 != row2)
 8001870:	68ba      	ldr	r2, [r7, #8]
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d002      	beq.n	800187e <mulMat+0x76>
    {
        printf("The number of columns in matrix-1 must be equal to the number of rows in matrix-2");
 8001878:	4833      	ldr	r0, [pc, #204]	; (8001948 <mulMat+0x140>)
 800187a:	f003 fda9 	bl	80053d0 <iprintf>
    }
    for (int i = 0; i < row1; i++)
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
 8001882:	e057      	b.n	8001934 <mulMat+0x12c>
    {
        for (int j = 0; j < col2; j++)
 8001884:	2300      	movs	r3, #0
 8001886:	623b      	str	r3, [r7, #32]
 8001888:	e04d      	b.n	8001926 <mulMat+0x11e>
        {
            out[i][j] = 0;
 800188a:	4622      	mov	r2, r4
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	fb03 f302 	mul.w	r3, r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001896:	441a      	add	r2, r3
 8001898:	6a3b      	ldr	r3, [r7, #32]
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < row2; k++)
 80018a4:	2300      	movs	r3, #0
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
 80018a8:	e036      	b.n	8001918 <mulMat+0x110>
            {
                out[i][j] += mat1[i][k] * mat2[k][j];
 80018aa:	462a      	mov	r2, r5
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	fb03 f302 	mul.w	r3, r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	441a      	add	r2, r3
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	ed93 7a00 	vldr	s14, [r3]
 80018c2:	4632      	mov	r2, r6
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	fb03 f302 	mul.w	r3, r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80018ce:	441a      	add	r2, r3
 80018d0:	6a3b      	ldr	r3, [r7, #32]
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	edd3 7a00 	vldr	s15, [r3]
 80018da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018de:	4622      	mov	r2, r4
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	fb03 f302 	mul.w	r3, r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80018ea:	441a      	add	r2, r3
 80018ec:	6a3b      	ldr	r3, [r7, #32]
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	edd3 7a00 	vldr	s15, [r3]
 80018f6:	4622      	mov	r2, r4
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	fb03 f302 	mul.w	r3, r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001902:	441a      	add	r2, r3
 8001904:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001908:	6a3b      	ldr	r3, [r7, #32]
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < row2; k++)
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	3301      	adds	r3, #1
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
 8001918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	dbc4      	blt.n	80018aa <mulMat+0xa2>
        for (int j = 0; j < col2; j++)
 8001920:	6a3b      	ldr	r3, [r7, #32]
 8001922:	3301      	adds	r3, #1
 8001924:	623b      	str	r3, [r7, #32]
 8001926:	6a3a      	ldr	r2, [r7, #32]
 8001928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800192a:	429a      	cmp	r2, r3
 800192c:	dbad      	blt.n	800188a <mulMat+0x82>
    for (int i = 0; i < row1; i++)
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3301      	adds	r3, #1
 8001932:	61fb      	str	r3, [r7, #28]
 8001934:	69fa      	ldr	r2, [r7, #28]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	429a      	cmp	r2, r3
 800193a:	dba3      	blt.n	8001884 <mulMat+0x7c>
            }
        }
    }
}
 800193c:	bf00      	nop
 800193e:	bf00      	nop
 8001940:	372c      	adds	r7, #44	; 0x2c
 8001942:	46bd      	mov	sp, r7
 8001944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001946:	bf00      	nop
 8001948:	08009f94 	.word	0x08009f94

0800194c <addMat>:

void addMat(int row, int col, float mat1[row][col], float mat2[row][col], float out[row][col])
{
 800194c:	b4f0      	push	{r4, r5, r6, r7}
 800194e:	b08a      	sub	sp, #40	; 0x28
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
 8001958:	603b      	str	r3, [r7, #0]
void addMat(int row, int col, float mat1[row][col], float mat2[row][col], float out[row][col])
 800195a:	68bc      	ldr	r4, [r7, #8]
 800195c:	1e63      	subs	r3, r4, #1
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
 8001960:	4623      	mov	r3, r4
 8001962:	4618      	mov	r0, r3
 8001964:	f04f 0100 	mov.w	r1, #0
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	f04f 0300 	mov.w	r3, #0
 8001970:	014b      	lsls	r3, r1, #5
 8001972:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001976:	0142      	lsls	r2, r0, #5
 8001978:	68bd      	ldr	r5, [r7, #8]
 800197a:	1e6b      	subs	r3, r5, #1
 800197c:	61bb      	str	r3, [r7, #24]
 800197e:	462b      	mov	r3, r5
 8001980:	4618      	mov	r0, r3
 8001982:	f04f 0100 	mov.w	r1, #0
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	f04f 0300 	mov.w	r3, #0
 800198e:	014b      	lsls	r3, r1, #5
 8001990:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001994:	0142      	lsls	r2, r0, #5
 8001996:	68be      	ldr	r6, [r7, #8]
 8001998:	1e73      	subs	r3, r6, #1
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	4633      	mov	r3, r6
 800199e:	4618      	mov	r0, r3
 80019a0:	f04f 0100 	mov.w	r1, #0
 80019a4:	f04f 0200 	mov.w	r2, #0
 80019a8:	f04f 0300 	mov.w	r3, #0
 80019ac:	014b      	lsls	r3, r1, #5
 80019ae:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019b2:	0142      	lsls	r2, r0, #5
    for (int i = 0; i < row; i++)
 80019b4:	2300      	movs	r3, #0
 80019b6:	61fb      	str	r3, [r7, #28]
 80019b8:	e032      	b.n	8001a20 <addMat+0xd4>
    {
        for (int j = 0; j < col; j++)
 80019ba:	2300      	movs	r3, #0
 80019bc:	623b      	str	r3, [r7, #32]
 80019be:	e028      	b.n	8001a12 <addMat+0xc6>
        {
            out[i][j] = mat1[i][j] + mat2[i][j];
 80019c0:	4622      	mov	r2, r4
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	fb03 f302 	mul.w	r3, r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	441a      	add	r2, r3
 80019ce:	6a3b      	ldr	r3, [r7, #32]
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4413      	add	r3, r2
 80019d4:	ed93 7a00 	vldr	s14, [r3]
 80019d8:	462a      	mov	r2, r5
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	fb03 f302 	mul.w	r3, r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	441a      	add	r2, r3
 80019e6:	6a3b      	ldr	r3, [r7, #32]
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	edd3 7a00 	vldr	s15, [r3]
 80019f0:	4632      	mov	r2, r6
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	fb03 f302 	mul.w	r3, r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80019fc:	441a      	add	r2, r3
 80019fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a02:	6a3b      	ldr	r3, [r7, #32]
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4413      	add	r3, r2
 8001a08:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < col; j++)
 8001a0c:	6a3b      	ldr	r3, [r7, #32]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	623b      	str	r3, [r7, #32]
 8001a12:	6a3a      	ldr	r2, [r7, #32]
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	dbd2      	blt.n	80019c0 <addMat+0x74>
    for (int i = 0; i < row; i++)
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	61fb      	str	r3, [r7, #28]
 8001a20:	69fa      	ldr	r2, [r7, #28]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	dbc8      	blt.n	80019ba <addMat+0x6e>
        }
    }
}
 8001a28:	bf00      	nop
 8001a2a:	bf00      	nop
 8001a2c:	3728      	adds	r7, #40	; 0x28
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bcf0      	pop	{r4, r5, r6, r7}
 8001a32:	4770      	bx	lr

08001a34 <subMat>:

void subMat(int row, int col, float mat1[row][col], float mat2[row][col], float out[row][col])
{
 8001a34:	b4f0      	push	{r4, r5, r6, r7}
 8001a36:	b08a      	sub	sp, #40	; 0x28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
 8001a40:	603b      	str	r3, [r7, #0]
void subMat(int row, int col, float mat1[row][col], float mat2[row][col], float out[row][col])
 8001a42:	68bc      	ldr	r4, [r7, #8]
 8001a44:	1e63      	subs	r3, r4, #1
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
 8001a48:	4623      	mov	r3, r4
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f04f 0100 	mov.w	r1, #0
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	f04f 0300 	mov.w	r3, #0
 8001a58:	014b      	lsls	r3, r1, #5
 8001a5a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a5e:	0142      	lsls	r2, r0, #5
 8001a60:	68bd      	ldr	r5, [r7, #8]
 8001a62:	1e6b      	subs	r3, r5, #1
 8001a64:	61bb      	str	r3, [r7, #24]
 8001a66:	462b      	mov	r3, r5
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f04f 0100 	mov.w	r1, #0
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	014b      	lsls	r3, r1, #5
 8001a78:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a7c:	0142      	lsls	r2, r0, #5
 8001a7e:	68be      	ldr	r6, [r7, #8]
 8001a80:	1e73      	subs	r3, r6, #1
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	4633      	mov	r3, r6
 8001a86:	4618      	mov	r0, r3
 8001a88:	f04f 0100 	mov.w	r1, #0
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	f04f 0300 	mov.w	r3, #0
 8001a94:	014b      	lsls	r3, r1, #5
 8001a96:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a9a:	0142      	lsls	r2, r0, #5
    for (int i = 0; i < row; i++)
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	61fb      	str	r3, [r7, #28]
 8001aa0:	e032      	b.n	8001b08 <subMat+0xd4>
    {
        for (int j = 0; j < col; j++)
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	623b      	str	r3, [r7, #32]
 8001aa6:	e028      	b.n	8001afa <subMat+0xc6>
        {
            out[i][j] = mat1[i][j] - mat2[i][j];
 8001aa8:	4622      	mov	r2, r4
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	fb03 f302 	mul.w	r3, r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	441a      	add	r2, r3
 8001ab6:	6a3b      	ldr	r3, [r7, #32]
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	ed93 7a00 	vldr	s14, [r3]
 8001ac0:	462a      	mov	r2, r5
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	fb03 f302 	mul.w	r3, r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	441a      	add	r2, r3
 8001ace:	6a3b      	ldr	r3, [r7, #32]
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	edd3 7a00 	vldr	s15, [r3]
 8001ad8:	4632      	mov	r2, r6
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	fb03 f302 	mul.w	r3, r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ae4:	441a      	add	r2, r3
 8001ae6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aea:	6a3b      	ldr	r3, [r7, #32]
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < col; j++)
 8001af4:	6a3b      	ldr	r3, [r7, #32]
 8001af6:	3301      	adds	r3, #1
 8001af8:	623b      	str	r3, [r7, #32]
 8001afa:	6a3a      	ldr	r2, [r7, #32]
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	dbd2      	blt.n	8001aa8 <subMat+0x74>
    for (int i = 0; i < row; i++)
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	3301      	adds	r3, #1
 8001b06:	61fb      	str	r3, [r7, #28]
 8001b08:	69fa      	ldr	r2, [r7, #28]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	dbc8      	blt.n	8001aa2 <subMat+0x6e>
        }
    }
}
 8001b10:	bf00      	nop
 8001b12:	bf00      	nop
 8001b14:	3728      	adds	r7, #40	; 0x28
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bcf0      	pop	{r4, r5, r6, r7}
 8001b1a:	4770      	bx	lr

08001b1c <transposeMat>:

void transposeMat(int row, int col, float mat[row][col], float out[row][col])
{
 8001b1c:	b4b0      	push	{r4, r5, r7}
 8001b1e:	b089      	sub	sp, #36	; 0x24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
 8001b28:	603b      	str	r3, [r7, #0]
void transposeMat(int row, int col, float mat[row][col], float out[row][col])
 8001b2a:	68bc      	ldr	r4, [r7, #8]
 8001b2c:	1e63      	subs	r3, r4, #1
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	4623      	mov	r3, r4
 8001b32:	4618      	mov	r0, r3
 8001b34:	f04f 0100 	mov.w	r1, #0
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	f04f 0300 	mov.w	r3, #0
 8001b40:	014b      	lsls	r3, r1, #5
 8001b42:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b46:	0142      	lsls	r2, r0, #5
 8001b48:	68bd      	ldr	r5, [r7, #8]
 8001b4a:	1e6b      	subs	r3, r5, #1
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	462b      	mov	r3, r5
 8001b50:	4618      	mov	r0, r3
 8001b52:	f04f 0100 	mov.w	r1, #0
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	f04f 0300 	mov.w	r3, #0
 8001b5e:	014b      	lsls	r3, r1, #5
 8001b60:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b64:	0142      	lsls	r2, r0, #5
    for (int i = 0; i < row; ++i)
 8001b66:	2300      	movs	r3, #0
 8001b68:	61bb      	str	r3, [r7, #24]
 8001b6a:	e022      	b.n	8001bb2 <transposeMat+0x96>
    {
        for (int j = 0; j < col; ++j)
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61fb      	str	r3, [r7, #28]
 8001b70:	e018      	b.n	8001ba4 <transposeMat+0x88>
        {
            out[j][i] = mat[i][j];
 8001b72:	4622      	mov	r2, r4
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	fb03 f302 	mul.w	r3, r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	441a      	add	r2, r3
 8001b80:	4629      	mov	r1, r5
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	fb03 f301 	mul.w	r3, r3, r1
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	6839      	ldr	r1, [r7, #0]
 8001b8c:	4419      	add	r1, r3
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	440b      	add	r3, r1
 8001b9c:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < col; ++j)
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	61fb      	str	r3, [r7, #28]
 8001ba4:	69fa      	ldr	r2, [r7, #28]
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	dbe2      	blt.n	8001b72 <transposeMat+0x56>
    for (int i = 0; i < row; ++i)
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	61bb      	str	r3, [r7, #24]
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	dbd8      	blt.n	8001b6c <transposeMat+0x50>
        }
    }
}
 8001bba:	bf00      	nop
 8001bbc:	bf00      	nop
 8001bbe:	3724      	adds	r7, #36	; 0x24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bcb0      	pop	{r4, r5, r7}
 8001bc4:	4770      	bx	lr

08001bc6 <identityMat>:

void identityMat(int num, float out[num][num])
{
 8001bc6:	b490      	push	{r4, r7}
 8001bc8:	b086      	sub	sp, #24
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	6039      	str	r1, [r7, #0]
void identityMat(int num, float out[num][num])
 8001bd0:	687c      	ldr	r4, [r7, #4]
 8001bd2:	1e63      	subs	r3, r4, #1
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	4623      	mov	r3, r4
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f04f 0100 	mov.w	r1, #0
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	f04f 0300 	mov.w	r3, #0
 8001be6:	014b      	lsls	r3, r1, #5
 8001be8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001bec:	0142      	lsls	r2, r0, #5
    for (int i = 0; i < num; i++)
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
 8001bf2:	e02b      	b.n	8001c4c <identityMat+0x86>
    {
        for (int j = 0; j < num; j++)
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	e021      	b.n	8001c3e <identityMat+0x78>
        {
            if (i == j)
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d10d      	bne.n	8001c1e <identityMat+0x58>
                out[i][j] = 1.0;
 8001c02:	4622      	mov	r2, r4
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	fb03 f302 	mul.w	r3, r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	441a      	add	r2, r3
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	e00c      	b.n	8001c38 <identityMat+0x72>
            else
                out[i][j] = 0.0;
 8001c1e:	4622      	mov	r2, r4
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	fb03 f302 	mul.w	r3, r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	441a      	add	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < num; j++)
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	dbd9      	blt.n	8001bfa <identityMat+0x34>
    for (int i = 0; i < num; i++)
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	613b      	str	r3, [r7, #16]
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	dbcf      	blt.n	8001bf4 <identityMat+0x2e>
        }
    }
}
 8001c54:	bf00      	nop
 8001c56:	bf00      	nop
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc90      	pop	{r4, r7}
 8001c5e:	4770      	bx	lr

08001c60 <inverseMat>:
/********************************************************/
/***************** inverse matrix ***********************/
/********************************************************/

void inverseMat(int k, float mat[k][k], float out[k][k])
{
 8001c60:	b590      	push	{r4, r7, lr}
 8001c62:	b0af      	sub	sp, #188	; 0xbc
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
void inverseMat(int k, float mat[k][k], float out[k][k])
 8001c6c:	68fc      	ldr	r4, [r7, #12]
 8001c6e:	1e63      	subs	r3, r4, #1
 8001c70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001c74:	4623      	mov	r3, r4
 8001c76:	4618      	mov	r0, r3
 8001c78:	f04f 0100 	mov.w	r1, #0
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	f04f 0300 	mov.w	r3, #0
 8001c84:	014b      	lsls	r3, r1, #5
 8001c86:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c8a:	0142      	lsls	r2, r0, #5
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	1e5a      	subs	r2, r3, #1
 8001c90:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001c94:	4618      	mov	r0, r3
 8001c96:	f04f 0100 	mov.w	r1, #0
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	f04f 0300 	mov.w	r3, #0
 8001ca2:	014b      	lsls	r3, r1, #5
 8001ca4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ca8:	0142      	lsls	r2, r0, #5

    float a[INV_MAX_DIM][INV_MAX_DIM], d;
    int i, j;

    for (i = 0; i < k; i++)
 8001caa:	2300      	movs	r3, #0
 8001cac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001cb0:	e02e      	b.n	8001d10 <inverseMat+0xb0>
    {
        for (j = 0; j < k; j++)
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001cb8:	e020      	b.n	8001cfc <inverseMat+0x9c>
        {
            a[i][j] = mat[i][j];
 8001cba:	4622      	mov	r2, r4
 8001cbc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001cc0:	fb03 f302 	mul.w	r3, r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	441a      	add	r2, r3
 8001cca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	6819      	ldr	r1, [r3, #0]
 8001cd4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001cd8:	4613      	mov	r3, r2
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	4413      	add	r3, r2
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8001cec:	4413      	add	r3, r2
 8001cee:	3ba4      	subs	r3, #164	; 0xa4
 8001cf0:	6019      	str	r1, [r3, #0]
        for (j = 0; j < k; j++)
 8001cf2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001cfc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	dbd9      	blt.n	8001cba <inverseMat+0x5a>
    for (i = 0; i < k; i++)
 8001d06:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001d10:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	dbcb      	blt.n	8001cb2 <inverseMat+0x52>
        }
    }

    d = determinant(a, k);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	ee07 3a90 	vmov	s15, r3
 8001d20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	eeb0 0a67 	vmov.f32	s0, s15
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f000 f81b 	bl	8001d68 <determinant>
 8001d32:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4

    if (d == 0)
 8001d36:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001d3a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d42:	d103      	bne.n	8001d4c <inverseMat+0xec>
        printf("\nInverse of Entered Matrix is not possible\n");
 8001d44:	4807      	ldr	r0, [pc, #28]	; (8001d64 <inverseMat+0x104>)
 8001d46:	f003 fbc9 	bl	80054dc <puts>
    else

    cofactor(a, k, out);

}
 8001d4a:	e006      	b.n	8001d5a <inverseMat+0xfa>
    cofactor(a, k, out);
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	68f9      	ldr	r1, [r7, #12]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f000 f99b 	bl	8002090 <cofactor>
}
 8001d5a:	bf00      	nop
 8001d5c:	37bc      	adds	r7, #188	; 0xbc
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd90      	pop	{r4, r7, pc}
 8001d62:	bf00      	nop
 8001d64:	08009fe8 	.word	0x08009fe8

08001d68 <determinant>:

float determinant(float a[INV_MAX_DIM][INV_MAX_DIM], float k)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	ed2d 8b02 	vpush	{d8}
 8001d6e:	b0ae      	sub	sp, #184	; 0xb8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	ed87 0a00 	vstr	s0, [r7]
    float s = 1, det = 0, b[INV_MAX_DIM][INV_MAX_DIM];
 8001d78:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001d7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001d80:	f04f 0300 	mov.w	r3, #0
 8001d84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    int i, j, m, n, c;
    if (k == 1)
 8001d88:	edd7 7a00 	vldr	s15, [r7]
 8001d8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d90:	eef4 7a47 	vcmp.f32	s15, s14
 8001d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d98:	d102      	bne.n	8001da0 <determinant+0x38>
    {
        return (a[0][0]);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	e0cd      	b.n	8001f3c <determinant+0x1d4>
    }

    else
    {
        det = 0;
 8001da0:	f04f 0300 	mov.w	r3, #0
 8001da4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        for (c = 0; c < k; c++)
 8001da8:	2300      	movs	r3, #0
 8001daa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001dae:	e0b5      	b.n	8001f1c <determinant+0x1b4>
        {
            m = 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            n = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            for (i = 0; i < k; i++)
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001dc2:	e071      	b.n	8001ea8 <determinant+0x140>
            {
                for (j = 0; j < k; j++)
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001dca:	e05b      	b.n	8001e84 <determinant+0x11c>
                {
                    b[i][j] = 0;
 8001dcc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	4413      	add	r3, r2
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001ddc:	4413      	add	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8001de4:	4413      	add	r3, r2
 8001de6:	3bac      	subs	r3, #172	; 0xac
 8001de8:	f04f 0200 	mov.w	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]

                    if (i != 0 && j != c)
 8001dee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d041      	beq.n	8001e7a <determinant+0x112>
 8001df6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001dfa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d03b      	beq.n	8001e7a <determinant+0x112>
                    {
                        b[m][n] = a[i][j];
 8001e02:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001e06:	4613      	mov	r3, r2
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	4413      	add	r3, r2
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	461a      	mov	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	441a      	add	r2, r3
 8001e14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	6819      	ldr	r1, [r3, #0]
 8001e1e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001e22:	4613      	mov	r3, r2
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	4413      	add	r3, r2
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001e2e:	4413      	add	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8001e36:	4413      	add	r3, r2
 8001e38:	3bac      	subs	r3, #172	; 0xac
 8001e3a:	6019      	str	r1, [r3, #0]

                        if (n < (k - 2))
 8001e3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e40:	ee07 3a90 	vmov	s15, r3
 8001e44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e48:	edd7 7a00 	vldr	s15, [r7]
 8001e4c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001e50:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001e54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5c:	d505      	bpl.n	8001e6a <determinant+0x102>
                            n++;
 8001e5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e62:	3301      	adds	r3, #1
 8001e64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001e68:	e007      	b.n	8001e7a <determinant+0x112>
                        else
                        {
                            n = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                            m++;
 8001e70:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e74:	3301      	adds	r3, #1
 8001e76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                for (j = 0; j < k; j++)
 8001e7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e7e:	3301      	adds	r3, #1
 8001e80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001e84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e88:	ee07 3a90 	vmov	s15, r3
 8001e8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e90:	ed97 7a00 	vldr	s14, [r7]
 8001e94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e9c:	dc96      	bgt.n	8001dcc <determinant+0x64>
            for (i = 0; i < k; i++)
 8001e9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001ea8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001eac:	ee07 3a90 	vmov	s15, r3
 8001eb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eb4:	ed97 7a00 	vldr	s14, [r7]
 8001eb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec0:	dc80      	bgt.n	8001dc4 <determinant+0x5c>
                    }
                }

            }

            det = det + s * (a[0][c] * determinant(b, k - 1));
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	ed93 8a00 	vldr	s16, [r3]
 8001ed0:	edd7 7a00 	vldr	s15, [r7]
 8001ed4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ed8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001edc:	f107 030c 	add.w	r3, r7, #12
 8001ee0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff ff3f 	bl	8001d68 <determinant>
 8001eea:	eef0 7a40 	vmov.f32	s15, s0
 8001eee:	ee28 7a27 	vmul.f32	s14, s16, s15
 8001ef2:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001efa:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001efe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f02:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s = -1 * s;
 8001f06:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001f0a:	eef1 7a67 	vneg.f32	s15, s15
 8001f0e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
        for (c = 0; c < k; c++)
 8001f12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f16:	3301      	adds	r3, #1
 8001f18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001f1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f20:	ee07 3a90 	vmov	s15, r3
 8001f24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f28:	ed97 7a00 	vldr	s14, [r7]
 8001f2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f34:	f73f af3c 	bgt.w	8001db0 <determinant+0x48>

        }

    }
    return (det);
 8001f38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f3c:	ee07 3a90 	vmov	s15, r3
}
 8001f40:	eeb0 0a67 	vmov.f32	s0, s15
 8001f44:	37b8      	adds	r7, #184	; 0xb8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	ecbd 8b02 	vpop	{d8}
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <transpose_inv>:


void transpose_inv(float num[INV_MAX_DIM][INV_MAX_DIM], float fac[INV_MAX_DIM][INV_MAX_DIM], int r, float inverse[r][r])
{
 8001f4e:	b590      	push	{r4, r7, lr}
 8001f50:	b0ad      	sub	sp, #180	; 0xb4
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	60f8      	str	r0, [r7, #12]
 8001f56:	60b9      	str	r1, [r7, #8]
 8001f58:	607a      	str	r2, [r7, #4]
 8001f5a:	603b      	str	r3, [r7, #0]
void transpose_inv(float num[INV_MAX_DIM][INV_MAX_DIM], float fac[INV_MAX_DIM][INV_MAX_DIM], int r, float inverse[r][r])
 8001f5c:	687c      	ldr	r4, [r7, #4]
 8001f5e:	1e63      	subs	r3, r4, #1
 8001f60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001f64:	4623      	mov	r3, r4
 8001f66:	4618      	mov	r0, r3
 8001f68:	f04f 0100 	mov.w	r1, #0
 8001f6c:	f04f 0200 	mov.w	r2, #0
 8001f70:	f04f 0300 	mov.w	r3, #0
 8001f74:	014b      	lsls	r3, r1, #5
 8001f76:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f7a:	0142      	lsls	r2, r0, #5
    int i, j;

    float b[INV_MAX_DIM][INV_MAX_DIM], d;

    for (i = 0; i < r; i++)
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001f82:	e02f      	b.n	8001fe4 <transpose_inv+0x96>
    {
        for (j = 0; j < r; j++)
 8001f84:	2300      	movs	r3, #0
 8001f86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001f8a:	e021      	b.n	8001fd0 <transpose_inv+0x82>
        {
            b[i][j] = fac[j][i];
 8001f8c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001f90:	4613      	mov	r3, r2
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	4413      	add	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	461a      	mov	r2, r3
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	441a      	add	r2, r3
 8001f9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	6819      	ldr	r1, [r3, #0]
 8001fa8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001fac:	4613      	mov	r3, r2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	4413      	add	r3, r2
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001fb8:	4413      	add	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8001fc0:	4413      	add	r3, r2
 8001fc2:	3ba0      	subs	r3, #160	; 0xa0
 8001fc4:	6019      	str	r1, [r3, #0]
        for (j = 0; j < r; j++)
 8001fc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fca:	3301      	adds	r3, #1
 8001fcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001fd0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	dbd8      	blt.n	8001f8c <transpose_inv+0x3e>
    for (i = 0; i < r; i++)
 8001fda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fde:	3301      	adds	r3, #1
 8001fe0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001fe4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	dbca      	blt.n	8001f84 <transpose_inv+0x36>
        }
    }

    d = determinant(num, r);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	ee07 3a90 	vmov	s15, r3
 8001ff4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ff8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f7ff feb3 	bl	8001d68 <determinant>
 8002002:	ed87 0a28 	vstr	s0, [r7, #160]	; 0xa0

    for (i = 0; i < r; i++)
 8002006:	2300      	movs	r3, #0
 8002008:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800200c:	e034      	b.n	8002078 <transpose_inv+0x12a>
    {
       for (j = 0; j < r; j++)
 800200e:	2300      	movs	r3, #0
 8002010:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002014:	e026      	b.n	8002064 <transpose_inv+0x116>
       {
           inverse[i][j] = b[i][j] / d;
 8002016:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800201a:	4613      	mov	r3, r2
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	4413      	add	r3, r2
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002026:	4413      	add	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800202e:	4413      	add	r3, r2
 8002030:	3ba0      	subs	r3, #160	; 0xa0
 8002032:	edd3 6a00 	vldr	s13, [r3]
 8002036:	4622      	mov	r2, r4
 8002038:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800203c:	fb03 f302 	mul.w	r3, r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	441a      	add	r2, r3
 8002046:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 800204a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800204e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	edc3 7a00 	vstr	s15, [r3]
       for (j = 0; j < r; j++)
 800205a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800205e:	3301      	adds	r3, #1
 8002060:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002064:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	429a      	cmp	r2, r3
 800206c:	dbd3      	blt.n	8002016 <transpose_inv+0xc8>
    for (i = 0; i < r; i++)
 800206e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002072:	3301      	adds	r3, #1
 8002074:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002078:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	429a      	cmp	r2, r3
 8002080:	dbc5      	blt.n	800200e <transpose_inv+0xc0>
       }
    }
}
 8002082:	bf00      	nop
 8002084:	bf00      	nop
 8002086:	37b4      	adds	r7, #180	; 0xb4
 8002088:	46bd      	mov	sp, r7
 800208a:	bd90      	pop	{r4, r7, pc}
 800208c:	0000      	movs	r0, r0
	...

08002090 <cofactor>:

void cofactor(float num[INV_MAX_DIM][INV_MAX_DIM], int f, float inverse_out[f][f])
{
 8002090:	b5b0      	push	{r4, r5, r7, lr}
 8002092:	b0d4      	sub	sp, #336	; 0x150
 8002094:	af00      	add	r7, sp, #0
 8002096:	f107 030c 	add.w	r3, r7, #12
 800209a:	6018      	str	r0, [r3, #0]
 800209c:	f107 0308 	add.w	r3, r7, #8
 80020a0:	6019      	str	r1, [r3, #0]
 80020a2:	1d3b      	adds	r3, r7, #4
 80020a4:	601a      	str	r2, [r3, #0]
void cofactor(float num[INV_MAX_DIM][INV_MAX_DIM], int f, float inverse_out[f][f])
 80020a6:	f107 0308 	add.w	r3, r7, #8
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	1e5a      	subs	r2, r3, #1
 80020ae:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 80020b2:	4618      	mov	r0, r3
 80020b4:	f04f 0100 	mov.w	r1, #0
 80020b8:	f04f 0200 	mov.w	r2, #0
 80020bc:	f04f 0300 	mov.w	r3, #0
 80020c0:	014b      	lsls	r3, r1, #5
 80020c2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80020c6:	0142      	lsls	r2, r0, #5
    float b[INV_MAX_DIM][INV_MAX_DIM], fac[INV_MAX_DIM][INV_MAX_DIM];
    int p, q, m, n, i, j;

    for (q = 0; q < f; q++)
 80020c8:	2300      	movs	r3, #0
 80020ca:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80020ce:	e0bc      	b.n	800224a <cofactor+0x1ba>
    {
        for (p = 0; p < f; p++)
 80020d0:	2300      	movs	r3, #0
 80020d2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80020d6:	e0ab      	b.n	8002230 <cofactor+0x1a0>
        {
            m = 0;
 80020d8:	2300      	movs	r3, #0
 80020da:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
            n = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
            for (i = 0; i < f; i++)
 80020e4:	2300      	movs	r3, #0
 80020e6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80020ea:	e055      	b.n	8002198 <cofactor+0x108>
            {
                for (j = 0; j < f; j++)
 80020ec:	2300      	movs	r3, #0
 80020ee:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80020f2:	e045      	b.n	8002180 <cofactor+0xf0>
                {
                    if (i != q && j != p)
 80020f4:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80020f8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d03a      	beq.n	8002176 <cofactor+0xe6>
 8002100:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8002104:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002108:	429a      	cmp	r2, r3
 800210a:	d034      	beq.n	8002176 <cofactor+0xe6>
                    {
                        b[m][n] = num[i][j];
 800210c:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8002110:	4613      	mov	r3, r2
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	4413      	add	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	461a      	mov	r2, r3
 800211a:	f107 030c 	add.w	r3, r7, #12
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	441a      	add	r2, r3
 8002122:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	6819      	ldr	r1, [r3, #0]
 800212c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002130:	4613      	mov	r3, r2
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	4413      	add	r3, r2
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800213c:	4413      	add	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8002144:	4413      	add	r3, r2
 8002146:	3bac      	subs	r3, #172	; 0xac
 8002148:	6019      	str	r1, [r3, #0]

                        if (n < (f - 2))
 800214a:	f107 0308 	add.w	r3, r7, #8
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	3b02      	subs	r3, #2
 8002152:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8002156:	429a      	cmp	r2, r3
 8002158:	da05      	bge.n	8002166 <cofactor+0xd6>
                            n++;
 800215a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800215e:	3301      	adds	r3, #1
 8002160:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8002164:	e007      	b.n	8002176 <cofactor+0xe6>

                        else
                        {
                            n = 0;
 8002166:	2300      	movs	r3, #0
 8002168:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
                            m++;
 800216c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002170:	3301      	adds	r3, #1
 8002172:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
                for (j = 0; j < f; j++)
 8002176:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800217a:	3301      	adds	r3, #1
 800217c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002180:	f107 0308 	add.w	r3, r7, #8
 8002184:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	dbb2      	blt.n	80020f4 <cofactor+0x64>
            for (i = 0; i < f; i++)
 800218e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002192:	3301      	adds	r3, #1
 8002194:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002198:	f107 0308 	add.w	r3, r7, #8
 800219c:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	dba2      	blt.n	80020ec <cofactor+0x5c>

                }

            }

            fac[q][p] = pow(-1, q + p) * determinant(b, f - 1);
 80021a6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80021aa:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80021ae:	4413      	add	r3, r2
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7fe f9c7 	bl	8000544 <__aeabi_i2d>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	ec43 2b11 	vmov	d1, r2, r3
 80021be:	ed9f 0b30 	vldr	d0, [pc, #192]	; 8002280 <cofactor+0x1f0>
 80021c2:	f006 ff2b 	bl	800901c <pow>
 80021c6:	ec55 4b10 	vmov	r4, r5, d0
 80021ca:	f107 0308 	add.w	r3, r7, #8
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	3b01      	subs	r3, #1
 80021d2:	ee07 3a90 	vmov	s15, r3
 80021d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021da:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80021de:	eeb0 0a67 	vmov.f32	s0, s15
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fdc0 	bl	8001d68 <determinant>
 80021e8:	ee10 3a10 	vmov	r3, s0
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7fe f9bb 	bl	8000568 <__aeabi_f2d>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	4620      	mov	r0, r4
 80021f8:	4629      	mov	r1, r5
 80021fa:	f7fe fa0d 	bl	8000618 <__aeabi_dmul>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	4610      	mov	r0, r2
 8002204:	4619      	mov	r1, r3
 8002206:	f7fe fcff 	bl	8000c08 <__aeabi_d2f>
 800220a:	f107 0114 	add.w	r1, r7, #20
 800220e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002212:	4613      	mov	r3, r2
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	4413      	add	r3, r2
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800221e:	4413      	add	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	440b      	add	r3, r1
 8002224:	6018      	str	r0, [r3, #0]
        for (p = 0; p < f; p++)
 8002226:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800222a:	3301      	adds	r3, #1
 800222c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002230:	f107 0308 	add.w	r3, r7, #8
 8002234:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	f6ff af4c 	blt.w	80020d8 <cofactor+0x48>
    for (q = 0; q < f; q++)
 8002240:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002244:	3301      	adds	r3, #1
 8002246:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800224a:	f107 0308 	add.w	r3, r7, #8
 800224e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	f6ff af3b 	blt.w	80020d0 <cofactor+0x40>
        }
    }
    transpose_inv(num, fac, f, inverse_out);
 800225a:	1d3b      	adds	r3, r7, #4
 800225c:	f107 0208 	add.w	r2, r7, #8
 8002260:	f107 0114 	add.w	r1, r7, #20
 8002264:	f107 000c 	add.w	r0, r7, #12
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6812      	ldr	r2, [r2, #0]
 800226c:	6800      	ldr	r0, [r0, #0]
 800226e:	f7ff fe6e 	bl	8001f4e <transpose_inv>
}
 8002272:	bf00      	nop
 8002274:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 8002278:	46bd      	mov	sp, r7
 800227a:	bdb0      	pop	{r4, r5, r7, pc}
 800227c:	f3af 8000 	nop.w
 8002280:	00000000 	.word	0x00000000
 8002284:	bff00000 	.word	0xbff00000

08002288 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	607b      	str	r3, [r7, #4]
 8002292:	4b10      	ldr	r3, [pc, #64]	; (80022d4 <HAL_MspInit+0x4c>)
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	4a0f      	ldr	r2, [pc, #60]	; (80022d4 <HAL_MspInit+0x4c>)
 8002298:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800229c:	6453      	str	r3, [r2, #68]	; 0x44
 800229e:	4b0d      	ldr	r3, [pc, #52]	; (80022d4 <HAL_MspInit+0x4c>)
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a6:	607b      	str	r3, [r7, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	603b      	str	r3, [r7, #0]
 80022ae:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <HAL_MspInit+0x4c>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	4a08      	ldr	r2, [pc, #32]	; (80022d4 <HAL_MspInit+0x4c>)
 80022b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ba:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <HAL_MspInit+0x4c>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c2:	603b      	str	r3, [r7, #0]
 80022c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80022c6:	2007      	movs	r0, #7
 80022c8:	f000 faf2 	bl	80028b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022cc:	bf00      	nop
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40023800 	.word	0x40023800

080022d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08a      	sub	sp, #40	; 0x28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e0:	f107 0314 	add.w	r3, r7, #20
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	609a      	str	r2, [r3, #8]
 80022ec:	60da      	str	r2, [r3, #12]
 80022ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a1d      	ldr	r2, [pc, #116]	; (800236c <HAL_UART_MspInit+0x94>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d134      	bne.n	8002364 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	613b      	str	r3, [r7, #16]
 80022fe:	4b1c      	ldr	r3, [pc, #112]	; (8002370 <HAL_UART_MspInit+0x98>)
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	4a1b      	ldr	r2, [pc, #108]	; (8002370 <HAL_UART_MspInit+0x98>)
 8002304:	f043 0310 	orr.w	r3, r3, #16
 8002308:	6453      	str	r3, [r2, #68]	; 0x44
 800230a:	4b19      	ldr	r3, [pc, #100]	; (8002370 <HAL_UART_MspInit+0x98>)
 800230c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230e:	f003 0310 	and.w	r3, r3, #16
 8002312:	613b      	str	r3, [r7, #16]
 8002314:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	4b15      	ldr	r3, [pc, #84]	; (8002370 <HAL_UART_MspInit+0x98>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	4a14      	ldr	r2, [pc, #80]	; (8002370 <HAL_UART_MspInit+0x98>)
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	6313      	str	r3, [r2, #48]	; 0x30
 8002326:	4b12      	ldr	r3, [pc, #72]	; (8002370 <HAL_UART_MspInit+0x98>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002332:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002338:	2302      	movs	r3, #2
 800233a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002340:	2303      	movs	r3, #3
 8002342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002344:	2307      	movs	r3, #7
 8002346:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002348:	f107 0314 	add.w	r3, r7, #20
 800234c:	4619      	mov	r1, r3
 800234e:	4809      	ldr	r0, [pc, #36]	; (8002374 <HAL_UART_MspInit+0x9c>)
 8002350:	f000 fb82 	bl	8002a58 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002354:	2200      	movs	r2, #0
 8002356:	2100      	movs	r1, #0
 8002358:	2025      	movs	r0, #37	; 0x25
 800235a:	f000 fab4 	bl	80028c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800235e:	2025      	movs	r0, #37	; 0x25
 8002360:	f000 facd 	bl	80028fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002364:	bf00      	nop
 8002366:	3728      	adds	r7, #40	; 0x28
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40011000 	.word	0x40011000
 8002370:	40023800 	.word	0x40023800
 8002374:	40020000 	.word	0x40020000

08002378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800237c:	e7fe      	b.n	800237c <NMI_Handler+0x4>

0800237e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002382:	e7fe      	b.n	8002382 <HardFault_Handler+0x4>

08002384 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002388:	e7fe      	b.n	8002388 <MemManage_Handler+0x4>

0800238a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800238a:	b480      	push	{r7}
 800238c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800238e:	e7fe      	b.n	800238e <BusFault_Handler+0x4>

08002390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002394:	e7fe      	b.n	8002394 <UsageFault_Handler+0x4>

08002396 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002396:	b480      	push	{r7}
 8002398:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023b2:	b480      	push	{r7}
 80023b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023c4:	f000 f960 	bl	8002688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023c8:	bf00      	nop
 80023ca:	bd80      	pop	{r7, pc}

080023cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  //Uart_isr(&huart1);
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023d0:	4802      	ldr	r0, [pc, #8]	; (80023dc <USART1_IRQHandler+0x10>)
 80023d2:	f001 fa8b 	bl	80038ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000668 	.word	0x20000668

080023e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
	return 1;
 80023e4:	2301      	movs	r3, #1
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <_kill>:

int _kill(int pid, int sig)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80023fa:	f002 f92f 	bl	800465c <__errno>
 80023fe:	4603      	mov	r3, r0
 8002400:	2216      	movs	r2, #22
 8002402:	601a      	str	r2, [r3, #0]
	return -1;
 8002404:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002408:	4618      	mov	r0, r3
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <_exit>:

void _exit (int status)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002418:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff ffe7 	bl	80023f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002422:	e7fe      	b.n	8002422 <_exit+0x12>

08002424 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	e00a      	b.n	800244c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002436:	f3af 8000 	nop.w
 800243a:	4601      	mov	r1, r0
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	1c5a      	adds	r2, r3, #1
 8002440:	60ba      	str	r2, [r7, #8]
 8002442:	b2ca      	uxtb	r2, r1
 8002444:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	3301      	adds	r3, #1
 800244a:	617b      	str	r3, [r7, #20]
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	429a      	cmp	r2, r3
 8002452:	dbf0      	blt.n	8002436 <_read+0x12>
	}

return len;
 8002454:	687b      	ldr	r3, [r7, #4]
}
 8002456:	4618      	mov	r0, r3
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b086      	sub	sp, #24
 8002462:	af00      	add	r7, sp, #0
 8002464:	60f8      	str	r0, [r7, #12]
 8002466:	60b9      	str	r1, [r7, #8]
 8002468:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	e009      	b.n	8002484 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	60ba      	str	r2, [r7, #8]
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	4618      	mov	r0, r3
 800247a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	3301      	adds	r3, #1
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	429a      	cmp	r2, r3
 800248a:	dbf1      	blt.n	8002470 <_write+0x12>
	}
	return len;
 800248c:	687b      	ldr	r3, [r7, #4]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <_close>:

int _close(int file)
{
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
	return -1;
 800249e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
 80024b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024be:	605a      	str	r2, [r3, #4]
	return 0;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <_isatty>:

int _isatty(int file)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
	return 1;
 80024d6:	2301      	movs	r3, #1
}
 80024d8:	4618      	mov	r0, r3
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
	return 0;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
	...

08002500 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002508:	4a14      	ldr	r2, [pc, #80]	; (800255c <_sbrk+0x5c>)
 800250a:	4b15      	ldr	r3, [pc, #84]	; (8002560 <_sbrk+0x60>)
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002514:	4b13      	ldr	r3, [pc, #76]	; (8002564 <_sbrk+0x64>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d102      	bne.n	8002522 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800251c:	4b11      	ldr	r3, [pc, #68]	; (8002564 <_sbrk+0x64>)
 800251e:	4a12      	ldr	r2, [pc, #72]	; (8002568 <_sbrk+0x68>)
 8002520:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002522:	4b10      	ldr	r3, [pc, #64]	; (8002564 <_sbrk+0x64>)
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4413      	add	r3, r2
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	429a      	cmp	r2, r3
 800252e:	d207      	bcs.n	8002540 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002530:	f002 f894 	bl	800465c <__errno>
 8002534:	4603      	mov	r3, r0
 8002536:	220c      	movs	r2, #12
 8002538:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800253a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800253e:	e009      	b.n	8002554 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002540:	4b08      	ldr	r3, [pc, #32]	; (8002564 <_sbrk+0x64>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002546:	4b07      	ldr	r3, [pc, #28]	; (8002564 <_sbrk+0x64>)
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4413      	add	r3, r2
 800254e:	4a05      	ldr	r2, [pc, #20]	; (8002564 <_sbrk+0x64>)
 8002550:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002552:	68fb      	ldr	r3, [r7, #12]
}
 8002554:	4618      	mov	r0, r3
 8002556:	3718      	adds	r7, #24
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	20030000 	.word	0x20030000
 8002560:	00000400 	.word	0x00000400
 8002564:	200005ac 	.word	0x200005ac
 8002568:	20000718 	.word	0x20000718

0800256c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002570:	4b06      	ldr	r3, [pc, #24]	; (800258c <SystemInit+0x20>)
 8002572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002576:	4a05      	ldr	r2, [pc, #20]	; (800258c <SystemInit+0x20>)
 8002578:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800257c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002580:	bf00      	nop
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002590:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025c8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002594:	480d      	ldr	r0, [pc, #52]	; (80025cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002596:	490e      	ldr	r1, [pc, #56]	; (80025d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002598:	4a0e      	ldr	r2, [pc, #56]	; (80025d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800259a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800259c:	e002      	b.n	80025a4 <LoopCopyDataInit>

0800259e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800259e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025a2:	3304      	adds	r3, #4

080025a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025a8:	d3f9      	bcc.n	800259e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025aa:	4a0b      	ldr	r2, [pc, #44]	; (80025d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025ac:	4c0b      	ldr	r4, [pc, #44]	; (80025dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80025ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025b0:	e001      	b.n	80025b6 <LoopFillZerobss>

080025b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025b4:	3204      	adds	r2, #4

080025b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025b8:	d3fb      	bcc.n	80025b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80025ba:	f7ff ffd7 	bl	800256c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025be:	f002 f853 	bl	8004668 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025c2:	f7fe fe85 	bl	80012d0 <main>
  bx  lr    
 80025c6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80025c8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80025cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025d0:	20000514 	.word	0x20000514
  ldr r2, =_sidata
 80025d4:	0800a538 	.word	0x0800a538
  ldr r2, =_sbss
 80025d8:	20000514 	.word	0x20000514
  ldr r4, =_ebss
 80025dc:	20000718 	.word	0x20000718

080025e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025e0:	e7fe      	b.n	80025e0 <ADC_IRQHandler>
	...

080025e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025e8:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <HAL_Init+0x40>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a0d      	ldr	r2, [pc, #52]	; (8002624 <HAL_Init+0x40>)
 80025ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025f4:	4b0b      	ldr	r3, [pc, #44]	; (8002624 <HAL_Init+0x40>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a0a      	ldr	r2, [pc, #40]	; (8002624 <HAL_Init+0x40>)
 80025fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002600:	4b08      	ldr	r3, [pc, #32]	; (8002624 <HAL_Init+0x40>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a07      	ldr	r2, [pc, #28]	; (8002624 <HAL_Init+0x40>)
 8002606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800260a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800260c:	2003      	movs	r0, #3
 800260e:	f000 f94f 	bl	80028b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002612:	2000      	movs	r0, #0
 8002614:	f000 f808 	bl	8002628 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002618:	f7ff fe36 	bl	8002288 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40023c00 	.word	0x40023c00

08002628 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002630:	4b12      	ldr	r3, [pc, #72]	; (800267c <HAL_InitTick+0x54>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	4b12      	ldr	r3, [pc, #72]	; (8002680 <HAL_InitTick+0x58>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	4619      	mov	r1, r3
 800263a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800263e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002642:	fbb2 f3f3 	udiv	r3, r2, r3
 8002646:	4618      	mov	r0, r3
 8002648:	f000 f967 	bl	800291a <HAL_SYSTICK_Config>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e00e      	b.n	8002674 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b0f      	cmp	r3, #15
 800265a:	d80a      	bhi.n	8002672 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800265c:	2200      	movs	r2, #0
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002664:	f000 f92f 	bl	80028c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002668:	4a06      	ldr	r2, [pc, #24]	; (8002684 <HAL_InitTick+0x5c>)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800266e:	2300      	movs	r3, #0
 8002670:	e000      	b.n	8002674 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
}
 8002674:	4618      	mov	r0, r3
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	20000330 	.word	0x20000330
 8002680:	20000338 	.word	0x20000338
 8002684:	20000334 	.word	0x20000334

08002688 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800268c:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <HAL_IncTick+0x20>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	461a      	mov	r2, r3
 8002692:	4b06      	ldr	r3, [pc, #24]	; (80026ac <HAL_IncTick+0x24>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4413      	add	r3, r2
 8002698:	4a04      	ldr	r2, [pc, #16]	; (80026ac <HAL_IncTick+0x24>)
 800269a:	6013      	str	r3, [r2, #0]
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	20000338 	.word	0x20000338
 80026ac:	20000704 	.word	0x20000704

080026b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  return uwTick;
 80026b4:	4b03      	ldr	r3, [pc, #12]	; (80026c4 <HAL_GetTick+0x14>)
 80026b6:	681b      	ldr	r3, [r3, #0]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	20000704 	.word	0x20000704

080026c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026d0:	f7ff ffee 	bl	80026b0 <HAL_GetTick>
 80026d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026e0:	d005      	beq.n	80026ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026e2:	4b0a      	ldr	r3, [pc, #40]	; (800270c <HAL_Delay+0x44>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	461a      	mov	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4413      	add	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026ee:	bf00      	nop
 80026f0:	f7ff ffde 	bl	80026b0 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d8f7      	bhi.n	80026f0 <HAL_Delay+0x28>
  {
  }
}
 8002700:	bf00      	nop
 8002702:	bf00      	nop
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	20000338 	.word	0x20000338

08002710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002720:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <__NVIC_SetPriorityGrouping+0x44>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800272c:	4013      	ands	r3, r2
 800272e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002738:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800273c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002742:	4a04      	ldr	r2, [pc, #16]	; (8002754 <__NVIC_SetPriorityGrouping+0x44>)
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	60d3      	str	r3, [r2, #12]
}
 8002748:	bf00      	nop
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800275c:	4b04      	ldr	r3, [pc, #16]	; (8002770 <__NVIC_GetPriorityGrouping+0x18>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	0a1b      	lsrs	r3, r3, #8
 8002762:	f003 0307 	and.w	r3, r3, #7
}
 8002766:	4618      	mov	r0, r3
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800277e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002782:	2b00      	cmp	r3, #0
 8002784:	db0b      	blt.n	800279e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	f003 021f 	and.w	r2, r3, #31
 800278c:	4907      	ldr	r1, [pc, #28]	; (80027ac <__NVIC_EnableIRQ+0x38>)
 800278e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002792:	095b      	lsrs	r3, r3, #5
 8002794:	2001      	movs	r0, #1
 8002796:	fa00 f202 	lsl.w	r2, r0, r2
 800279a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	e000e100 	.word	0xe000e100

080027b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	6039      	str	r1, [r7, #0]
 80027ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	db0a      	blt.n	80027da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	490c      	ldr	r1, [pc, #48]	; (80027fc <__NVIC_SetPriority+0x4c>)
 80027ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ce:	0112      	lsls	r2, r2, #4
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	440b      	add	r3, r1
 80027d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027d8:	e00a      	b.n	80027f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	4908      	ldr	r1, [pc, #32]	; (8002800 <__NVIC_SetPriority+0x50>)
 80027e0:	79fb      	ldrb	r3, [r7, #7]
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	3b04      	subs	r3, #4
 80027e8:	0112      	lsls	r2, r2, #4
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	440b      	add	r3, r1
 80027ee:	761a      	strb	r2, [r3, #24]
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	e000e100 	.word	0xe000e100
 8002800:	e000ed00 	.word	0xe000ed00

08002804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002804:	b480      	push	{r7}
 8002806:	b089      	sub	sp, #36	; 0x24
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	f1c3 0307 	rsb	r3, r3, #7
 800281e:	2b04      	cmp	r3, #4
 8002820:	bf28      	it	cs
 8002822:	2304      	movcs	r3, #4
 8002824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	3304      	adds	r3, #4
 800282a:	2b06      	cmp	r3, #6
 800282c:	d902      	bls.n	8002834 <NVIC_EncodePriority+0x30>
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3b03      	subs	r3, #3
 8002832:	e000      	b.n	8002836 <NVIC_EncodePriority+0x32>
 8002834:	2300      	movs	r3, #0
 8002836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002838:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	43da      	mvns	r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	401a      	ands	r2, r3
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800284c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	fa01 f303 	lsl.w	r3, r1, r3
 8002856:	43d9      	mvns	r1, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800285c:	4313      	orrs	r3, r2
         );
}
 800285e:	4618      	mov	r0, r3
 8002860:	3724      	adds	r7, #36	; 0x24
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
	...

0800286c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3b01      	subs	r3, #1
 8002878:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800287c:	d301      	bcc.n	8002882 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800287e:	2301      	movs	r3, #1
 8002880:	e00f      	b.n	80028a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002882:	4a0a      	ldr	r2, [pc, #40]	; (80028ac <SysTick_Config+0x40>)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3b01      	subs	r3, #1
 8002888:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800288a:	210f      	movs	r1, #15
 800288c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002890:	f7ff ff8e 	bl	80027b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002894:	4b05      	ldr	r3, [pc, #20]	; (80028ac <SysTick_Config+0x40>)
 8002896:	2200      	movs	r2, #0
 8002898:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800289a:	4b04      	ldr	r3, [pc, #16]	; (80028ac <SysTick_Config+0x40>)
 800289c:	2207      	movs	r2, #7
 800289e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	e000e010 	.word	0xe000e010

080028b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff ff29 	bl	8002710 <__NVIC_SetPriorityGrouping>
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b086      	sub	sp, #24
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	4603      	mov	r3, r0
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	607a      	str	r2, [r7, #4]
 80028d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028d8:	f7ff ff3e 	bl	8002758 <__NVIC_GetPriorityGrouping>
 80028dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	6978      	ldr	r0, [r7, #20]
 80028e4:	f7ff ff8e 	bl	8002804 <NVIC_EncodePriority>
 80028e8:	4602      	mov	r2, r0
 80028ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ee:	4611      	mov	r1, r2
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff ff5d 	bl	80027b0 <__NVIC_SetPriority>
}
 80028f6:	bf00      	nop
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b082      	sub	sp, #8
 8002902:	af00      	add	r7, sp, #0
 8002904:	4603      	mov	r3, r0
 8002906:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff ff31 	bl	8002774 <__NVIC_EnableIRQ>
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7ff ffa2 	bl	800286c <SysTick_Config>
 8002928:	4603      	mov	r3, r0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b084      	sub	sp, #16
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002940:	f7ff feb6 	bl	80026b0 <HAL_GetTick>
 8002944:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d008      	beq.n	8002964 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2280      	movs	r2, #128	; 0x80
 8002956:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e052      	b.n	8002a0a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0216 	bic.w	r2, r2, #22
 8002972:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695a      	ldr	r2, [r3, #20]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002982:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	2b00      	cmp	r3, #0
 800298a:	d103      	bne.n	8002994 <HAL_DMA_Abort+0x62>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002990:	2b00      	cmp	r3, #0
 8002992:	d007      	beq.n	80029a4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0208 	bic.w	r2, r2, #8
 80029a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0201 	bic.w	r2, r2, #1
 80029b2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029b4:	e013      	b.n	80029de <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029b6:	f7ff fe7b 	bl	80026b0 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b05      	cmp	r3, #5
 80029c2:	d90c      	bls.n	80029de <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2220      	movs	r2, #32
 80029c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2203      	movs	r2, #3
 80029ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e015      	b.n	8002a0a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1e4      	bne.n	80029b6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f0:	223f      	movs	r2, #63	; 0x3f
 80029f2:	409a      	lsls	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d004      	beq.n	8002a30 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2280      	movs	r2, #128	; 0x80
 8002a2a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e00c      	b.n	8002a4a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2205      	movs	r2, #5
 8002a34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0201 	bic.w	r2, r2, #1
 8002a46:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
	...

08002a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b089      	sub	sp, #36	; 0x24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61fb      	str	r3, [r7, #28]
 8002a72:	e177      	b.n	8002d64 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a74:	2201      	movs	r2, #1
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	4013      	ands	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	f040 8166 	bne.w	8002d5e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d005      	beq.n	8002aaa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d130      	bne.n	8002b0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	2203      	movs	r2, #3
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43db      	mvns	r3, r3
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	68da      	ldr	r2, [r3, #12]
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	091b      	lsrs	r3, r3, #4
 8002af6:	f003 0201 	and.w	r2, r3, #1
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 0303 	and.w	r3, r3, #3
 8002b14:	2b03      	cmp	r3, #3
 8002b16:	d017      	beq.n	8002b48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	2203      	movs	r2, #3
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f003 0303 	and.w	r3, r3, #3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d123      	bne.n	8002b9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	08da      	lsrs	r2, r3, #3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3208      	adds	r2, #8
 8002b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	220f      	movs	r2, #15
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	43db      	mvns	r3, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4013      	ands	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	691a      	ldr	r2, [r3, #16]
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	08da      	lsrs	r2, r3, #3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	3208      	adds	r2, #8
 8002b96:	69b9      	ldr	r1, [r7, #24]
 8002b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 0203 	and.w	r2, r3, #3
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 80c0 	beq.w	8002d5e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	4b66      	ldr	r3, [pc, #408]	; (8002d7c <HAL_GPIO_Init+0x324>)
 8002be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be6:	4a65      	ldr	r2, [pc, #404]	; (8002d7c <HAL_GPIO_Init+0x324>)
 8002be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bec:	6453      	str	r3, [r2, #68]	; 0x44
 8002bee:	4b63      	ldr	r3, [pc, #396]	; (8002d7c <HAL_GPIO_Init+0x324>)
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bfa:	4a61      	ldr	r2, [pc, #388]	; (8002d80 <HAL_GPIO_Init+0x328>)
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	089b      	lsrs	r3, r3, #2
 8002c00:	3302      	adds	r3, #2
 8002c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	220f      	movs	r2, #15
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	43db      	mvns	r3, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a58      	ldr	r2, [pc, #352]	; (8002d84 <HAL_GPIO_Init+0x32c>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d037      	beq.n	8002c96 <HAL_GPIO_Init+0x23e>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a57      	ldr	r2, [pc, #348]	; (8002d88 <HAL_GPIO_Init+0x330>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d031      	beq.n	8002c92 <HAL_GPIO_Init+0x23a>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a56      	ldr	r2, [pc, #344]	; (8002d8c <HAL_GPIO_Init+0x334>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d02b      	beq.n	8002c8e <HAL_GPIO_Init+0x236>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a55      	ldr	r2, [pc, #340]	; (8002d90 <HAL_GPIO_Init+0x338>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d025      	beq.n	8002c8a <HAL_GPIO_Init+0x232>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a54      	ldr	r2, [pc, #336]	; (8002d94 <HAL_GPIO_Init+0x33c>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d01f      	beq.n	8002c86 <HAL_GPIO_Init+0x22e>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a53      	ldr	r2, [pc, #332]	; (8002d98 <HAL_GPIO_Init+0x340>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d019      	beq.n	8002c82 <HAL_GPIO_Init+0x22a>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a52      	ldr	r2, [pc, #328]	; (8002d9c <HAL_GPIO_Init+0x344>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d013      	beq.n	8002c7e <HAL_GPIO_Init+0x226>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a51      	ldr	r2, [pc, #324]	; (8002da0 <HAL_GPIO_Init+0x348>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d00d      	beq.n	8002c7a <HAL_GPIO_Init+0x222>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a50      	ldr	r2, [pc, #320]	; (8002da4 <HAL_GPIO_Init+0x34c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d007      	beq.n	8002c76 <HAL_GPIO_Init+0x21e>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a4f      	ldr	r2, [pc, #316]	; (8002da8 <HAL_GPIO_Init+0x350>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d101      	bne.n	8002c72 <HAL_GPIO_Init+0x21a>
 8002c6e:	2309      	movs	r3, #9
 8002c70:	e012      	b.n	8002c98 <HAL_GPIO_Init+0x240>
 8002c72:	230a      	movs	r3, #10
 8002c74:	e010      	b.n	8002c98 <HAL_GPIO_Init+0x240>
 8002c76:	2308      	movs	r3, #8
 8002c78:	e00e      	b.n	8002c98 <HAL_GPIO_Init+0x240>
 8002c7a:	2307      	movs	r3, #7
 8002c7c:	e00c      	b.n	8002c98 <HAL_GPIO_Init+0x240>
 8002c7e:	2306      	movs	r3, #6
 8002c80:	e00a      	b.n	8002c98 <HAL_GPIO_Init+0x240>
 8002c82:	2305      	movs	r3, #5
 8002c84:	e008      	b.n	8002c98 <HAL_GPIO_Init+0x240>
 8002c86:	2304      	movs	r3, #4
 8002c88:	e006      	b.n	8002c98 <HAL_GPIO_Init+0x240>
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e004      	b.n	8002c98 <HAL_GPIO_Init+0x240>
 8002c8e:	2302      	movs	r3, #2
 8002c90:	e002      	b.n	8002c98 <HAL_GPIO_Init+0x240>
 8002c92:	2301      	movs	r3, #1
 8002c94:	e000      	b.n	8002c98 <HAL_GPIO_Init+0x240>
 8002c96:	2300      	movs	r3, #0
 8002c98:	69fa      	ldr	r2, [r7, #28]
 8002c9a:	f002 0203 	and.w	r2, r2, #3
 8002c9e:	0092      	lsls	r2, r2, #2
 8002ca0:	4093      	lsls	r3, r2
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ca8:	4935      	ldr	r1, [pc, #212]	; (8002d80 <HAL_GPIO_Init+0x328>)
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	089b      	lsrs	r3, r3, #2
 8002cae:	3302      	adds	r3, #2
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cb6:	4b3d      	ldr	r3, [pc, #244]	; (8002dac <HAL_GPIO_Init+0x354>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cda:	4a34      	ldr	r2, [pc, #208]	; (8002dac <HAL_GPIO_Init+0x354>)
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ce0:	4b32      	ldr	r3, [pc, #200]	; (8002dac <HAL_GPIO_Init+0x354>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	4013      	ands	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d04:	4a29      	ldr	r2, [pc, #164]	; (8002dac <HAL_GPIO_Init+0x354>)
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d0a:	4b28      	ldr	r3, [pc, #160]	; (8002dac <HAL_GPIO_Init+0x354>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	43db      	mvns	r3, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4013      	ands	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d2e:	4a1f      	ldr	r2, [pc, #124]	; (8002dac <HAL_GPIO_Init+0x354>)
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d34:	4b1d      	ldr	r3, [pc, #116]	; (8002dac <HAL_GPIO_Init+0x354>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4013      	ands	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d58:	4a14      	ldr	r2, [pc, #80]	; (8002dac <HAL_GPIO_Init+0x354>)
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	3301      	adds	r3, #1
 8002d62:	61fb      	str	r3, [r7, #28]
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	2b0f      	cmp	r3, #15
 8002d68:	f67f ae84 	bls.w	8002a74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d6c:	bf00      	nop
 8002d6e:	bf00      	nop
 8002d70:	3724      	adds	r7, #36	; 0x24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	40013800 	.word	0x40013800
 8002d84:	40020000 	.word	0x40020000
 8002d88:	40020400 	.word	0x40020400
 8002d8c:	40020800 	.word	0x40020800
 8002d90:	40020c00 	.word	0x40020c00
 8002d94:	40021000 	.word	0x40021000
 8002d98:	40021400 	.word	0x40021400
 8002d9c:	40021800 	.word	0x40021800
 8002da0:	40021c00 	.word	0x40021c00
 8002da4:	40022000 	.word	0x40022000
 8002da8:	40022400 	.word	0x40022400
 8002dac:	40013c00 	.word	0x40013c00

08002db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	460b      	mov	r3, r1
 8002dba:	807b      	strh	r3, [r7, #2]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dc0:	787b      	ldrb	r3, [r7, #1]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dc6:	887a      	ldrh	r2, [r7, #2]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002dcc:	e003      	b.n	8002dd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dce:	887b      	ldrh	r3, [r7, #2]
 8002dd0:	041a      	lsls	r2, r3, #16
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	619a      	str	r2, [r3, #24]
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
	...

08002de4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e264      	b.n	80032c0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d075      	beq.n	8002eee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e02:	4ba3      	ldr	r3, [pc, #652]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 030c 	and.w	r3, r3, #12
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d00c      	beq.n	8002e28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e0e:	4ba0      	ldr	r3, [pc, #640]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e16:	2b08      	cmp	r3, #8
 8002e18:	d112      	bne.n	8002e40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e1a:	4b9d      	ldr	r3, [pc, #628]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e26:	d10b      	bne.n	8002e40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e28:	4b99      	ldr	r3, [pc, #612]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d05b      	beq.n	8002eec <HAL_RCC_OscConfig+0x108>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d157      	bne.n	8002eec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e23f      	b.n	80032c0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e48:	d106      	bne.n	8002e58 <HAL_RCC_OscConfig+0x74>
 8002e4a:	4b91      	ldr	r3, [pc, #580]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a90      	ldr	r2, [pc, #576]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e54:	6013      	str	r3, [r2, #0]
 8002e56:	e01d      	b.n	8002e94 <HAL_RCC_OscConfig+0xb0>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e60:	d10c      	bne.n	8002e7c <HAL_RCC_OscConfig+0x98>
 8002e62:	4b8b      	ldr	r3, [pc, #556]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a8a      	ldr	r2, [pc, #552]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e6c:	6013      	str	r3, [r2, #0]
 8002e6e:	4b88      	ldr	r3, [pc, #544]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a87      	ldr	r2, [pc, #540]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e78:	6013      	str	r3, [r2, #0]
 8002e7a:	e00b      	b.n	8002e94 <HAL_RCC_OscConfig+0xb0>
 8002e7c:	4b84      	ldr	r3, [pc, #528]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a83      	ldr	r2, [pc, #524]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e86:	6013      	str	r3, [r2, #0]
 8002e88:	4b81      	ldr	r3, [pc, #516]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a80      	ldr	r2, [pc, #512]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d013      	beq.n	8002ec4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9c:	f7ff fc08 	bl	80026b0 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ea4:	f7ff fc04 	bl	80026b0 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b64      	cmp	r3, #100	; 0x64
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e204      	b.n	80032c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb6:	4b76      	ldr	r3, [pc, #472]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0f0      	beq.n	8002ea4 <HAL_RCC_OscConfig+0xc0>
 8002ec2:	e014      	b.n	8002eee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec4:	f7ff fbf4 	bl	80026b0 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ecc:	f7ff fbf0 	bl	80026b0 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b64      	cmp	r3, #100	; 0x64
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e1f0      	b.n	80032c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ede:	4b6c      	ldr	r3, [pc, #432]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f0      	bne.n	8002ecc <HAL_RCC_OscConfig+0xe8>
 8002eea:	e000      	b.n	8002eee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d063      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002efa:	4b65      	ldr	r3, [pc, #404]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 030c 	and.w	r3, r3, #12
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00b      	beq.n	8002f1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f06:	4b62      	ldr	r3, [pc, #392]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d11c      	bne.n	8002f4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f12:	4b5f      	ldr	r3, [pc, #380]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d116      	bne.n	8002f4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f1e:	4b5c      	ldr	r3, [pc, #368]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d005      	beq.n	8002f36 <HAL_RCC_OscConfig+0x152>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d001      	beq.n	8002f36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e1c4      	b.n	80032c0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f36:	4b56      	ldr	r3, [pc, #344]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	4952      	ldr	r1, [pc, #328]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f4a:	e03a      	b.n	8002fc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d020      	beq.n	8002f96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f54:	4b4f      	ldr	r3, [pc, #316]	; (8003094 <HAL_RCC_OscConfig+0x2b0>)
 8002f56:	2201      	movs	r2, #1
 8002f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5a:	f7ff fba9 	bl	80026b0 <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f62:	f7ff fba5 	bl	80026b0 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e1a5      	b.n	80032c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f74:	4b46      	ldr	r3, [pc, #280]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0f0      	beq.n	8002f62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f80:	4b43      	ldr	r3, [pc, #268]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	4940      	ldr	r1, [pc, #256]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	600b      	str	r3, [r1, #0]
 8002f94:	e015      	b.n	8002fc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f96:	4b3f      	ldr	r3, [pc, #252]	; (8003094 <HAL_RCC_OscConfig+0x2b0>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9c:	f7ff fb88 	bl	80026b0 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fa4:	f7ff fb84 	bl	80026b0 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e184      	b.n	80032c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb6:	4b36      	ldr	r3, [pc, #216]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1f0      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d030      	beq.n	8003030 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d016      	beq.n	8003004 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fd6:	4b30      	ldr	r3, [pc, #192]	; (8003098 <HAL_RCC_OscConfig+0x2b4>)
 8002fd8:	2201      	movs	r2, #1
 8002fda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fdc:	f7ff fb68 	bl	80026b0 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fe4:	f7ff fb64 	bl	80026b0 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e164      	b.n	80032c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ff6:	4b26      	ldr	r3, [pc, #152]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x200>
 8003002:	e015      	b.n	8003030 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003004:	4b24      	ldr	r3, [pc, #144]	; (8003098 <HAL_RCC_OscConfig+0x2b4>)
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800300a:	f7ff fb51 	bl	80026b0 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003012:	f7ff fb4d 	bl	80026b0 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e14d      	b.n	80032c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003024:	4b1a      	ldr	r3, [pc, #104]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8003026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1f0      	bne.n	8003012 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 80a0 	beq.w	800317e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800303e:	2300      	movs	r3, #0
 8003040:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003042:	4b13      	ldr	r3, [pc, #76]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10f      	bne.n	800306e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800304e:	2300      	movs	r3, #0
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	4b0f      	ldr	r3, [pc, #60]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	4a0e      	ldr	r2, [pc, #56]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8003058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800305c:	6413      	str	r3, [r2, #64]	; 0x40
 800305e:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003066:	60bb      	str	r3, [r7, #8]
 8003068:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800306a:	2301      	movs	r3, #1
 800306c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800306e:	4b0b      	ldr	r3, [pc, #44]	; (800309c <HAL_RCC_OscConfig+0x2b8>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003076:	2b00      	cmp	r3, #0
 8003078:	d121      	bne.n	80030be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800307a:	4b08      	ldr	r3, [pc, #32]	; (800309c <HAL_RCC_OscConfig+0x2b8>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a07      	ldr	r2, [pc, #28]	; (800309c <HAL_RCC_OscConfig+0x2b8>)
 8003080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003084:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003086:	f7ff fb13 	bl	80026b0 <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800308c:	e011      	b.n	80030b2 <HAL_RCC_OscConfig+0x2ce>
 800308e:	bf00      	nop
 8003090:	40023800 	.word	0x40023800
 8003094:	42470000 	.word	0x42470000
 8003098:	42470e80 	.word	0x42470e80
 800309c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a0:	f7ff fb06 	bl	80026b0 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e106      	b.n	80032c0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b2:	4b85      	ldr	r3, [pc, #532]	; (80032c8 <HAL_RCC_OscConfig+0x4e4>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0f0      	beq.n	80030a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d106      	bne.n	80030d4 <HAL_RCC_OscConfig+0x2f0>
 80030c6:	4b81      	ldr	r3, [pc, #516]	; (80032cc <HAL_RCC_OscConfig+0x4e8>)
 80030c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ca:	4a80      	ldr	r2, [pc, #512]	; (80032cc <HAL_RCC_OscConfig+0x4e8>)
 80030cc:	f043 0301 	orr.w	r3, r3, #1
 80030d0:	6713      	str	r3, [r2, #112]	; 0x70
 80030d2:	e01c      	b.n	800310e <HAL_RCC_OscConfig+0x32a>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	2b05      	cmp	r3, #5
 80030da:	d10c      	bne.n	80030f6 <HAL_RCC_OscConfig+0x312>
 80030dc:	4b7b      	ldr	r3, [pc, #492]	; (80032cc <HAL_RCC_OscConfig+0x4e8>)
 80030de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e0:	4a7a      	ldr	r2, [pc, #488]	; (80032cc <HAL_RCC_OscConfig+0x4e8>)
 80030e2:	f043 0304 	orr.w	r3, r3, #4
 80030e6:	6713      	str	r3, [r2, #112]	; 0x70
 80030e8:	4b78      	ldr	r3, [pc, #480]	; (80032cc <HAL_RCC_OscConfig+0x4e8>)
 80030ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ec:	4a77      	ldr	r2, [pc, #476]	; (80032cc <HAL_RCC_OscConfig+0x4e8>)
 80030ee:	f043 0301 	orr.w	r3, r3, #1
 80030f2:	6713      	str	r3, [r2, #112]	; 0x70
 80030f4:	e00b      	b.n	800310e <HAL_RCC_OscConfig+0x32a>
 80030f6:	4b75      	ldr	r3, [pc, #468]	; (80032cc <HAL_RCC_OscConfig+0x4e8>)
 80030f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fa:	4a74      	ldr	r2, [pc, #464]	; (80032cc <HAL_RCC_OscConfig+0x4e8>)
 80030fc:	f023 0301 	bic.w	r3, r3, #1
 8003100:	6713      	str	r3, [r2, #112]	; 0x70
 8003102:	4b72      	ldr	r3, [pc, #456]	; (80032cc <HAL_RCC_OscConfig+0x4e8>)
 8003104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003106:	4a71      	ldr	r2, [pc, #452]	; (80032cc <HAL_RCC_OscConfig+0x4e8>)
 8003108:	f023 0304 	bic.w	r3, r3, #4
 800310c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d015      	beq.n	8003142 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003116:	f7ff facb 	bl	80026b0 <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800311c:	e00a      	b.n	8003134 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800311e:	f7ff fac7 	bl	80026b0 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	f241 3288 	movw	r2, #5000	; 0x1388
 800312c:	4293      	cmp	r3, r2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e0c5      	b.n	80032c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003134:	4b65      	ldr	r3, [pc, #404]	; (80032cc <HAL_RCC_OscConfig+0x4e8>)
 8003136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d0ee      	beq.n	800311e <HAL_RCC_OscConfig+0x33a>
 8003140:	e014      	b.n	800316c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003142:	f7ff fab5 	bl	80026b0 <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003148:	e00a      	b.n	8003160 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800314a:	f7ff fab1 	bl	80026b0 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	f241 3288 	movw	r2, #5000	; 0x1388
 8003158:	4293      	cmp	r3, r2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e0af      	b.n	80032c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003160:	4b5a      	ldr	r3, [pc, #360]	; (80032cc <HAL_RCC_OscConfig+0x4e8>)
 8003162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1ee      	bne.n	800314a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800316c:	7dfb      	ldrb	r3, [r7, #23]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d105      	bne.n	800317e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003172:	4b56      	ldr	r3, [pc, #344]	; (80032cc <HAL_RCC_OscConfig+0x4e8>)
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	4a55      	ldr	r2, [pc, #340]	; (80032cc <HAL_RCC_OscConfig+0x4e8>)
 8003178:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800317c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 809b 	beq.w	80032be <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003188:	4b50      	ldr	r3, [pc, #320]	; (80032cc <HAL_RCC_OscConfig+0x4e8>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f003 030c 	and.w	r3, r3, #12
 8003190:	2b08      	cmp	r3, #8
 8003192:	d05c      	beq.n	800324e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	2b02      	cmp	r3, #2
 800319a:	d141      	bne.n	8003220 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800319c:	4b4c      	ldr	r3, [pc, #304]	; (80032d0 <HAL_RCC_OscConfig+0x4ec>)
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a2:	f7ff fa85 	bl	80026b0 <HAL_GetTick>
 80031a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a8:	e008      	b.n	80031bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031aa:	f7ff fa81 	bl	80026b0 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e081      	b.n	80032c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031bc:	4b43      	ldr	r3, [pc, #268]	; (80032cc <HAL_RCC_OscConfig+0x4e8>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1f0      	bne.n	80031aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	69da      	ldr	r2, [r3, #28]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	431a      	orrs	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	019b      	lsls	r3, r3, #6
 80031d8:	431a      	orrs	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031de:	085b      	lsrs	r3, r3, #1
 80031e0:	3b01      	subs	r3, #1
 80031e2:	041b      	lsls	r3, r3, #16
 80031e4:	431a      	orrs	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ea:	061b      	lsls	r3, r3, #24
 80031ec:	4937      	ldr	r1, [pc, #220]	; (80032cc <HAL_RCC_OscConfig+0x4e8>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031f2:	4b37      	ldr	r3, [pc, #220]	; (80032d0 <HAL_RCC_OscConfig+0x4ec>)
 80031f4:	2201      	movs	r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f8:	f7ff fa5a 	bl	80026b0 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003200:	f7ff fa56 	bl	80026b0 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e056      	b.n	80032c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003212:	4b2e      	ldr	r3, [pc, #184]	; (80032cc <HAL_RCC_OscConfig+0x4e8>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0f0      	beq.n	8003200 <HAL_RCC_OscConfig+0x41c>
 800321e:	e04e      	b.n	80032be <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003220:	4b2b      	ldr	r3, [pc, #172]	; (80032d0 <HAL_RCC_OscConfig+0x4ec>)
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003226:	f7ff fa43 	bl	80026b0 <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800322c:	e008      	b.n	8003240 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800322e:	f7ff fa3f 	bl	80026b0 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e03f      	b.n	80032c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003240:	4b22      	ldr	r3, [pc, #136]	; (80032cc <HAL_RCC_OscConfig+0x4e8>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1f0      	bne.n	800322e <HAL_RCC_OscConfig+0x44a>
 800324c:	e037      	b.n	80032be <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d101      	bne.n	800325a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e032      	b.n	80032c0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800325a:	4b1c      	ldr	r3, [pc, #112]	; (80032cc <HAL_RCC_OscConfig+0x4e8>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d028      	beq.n	80032ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003272:	429a      	cmp	r2, r3
 8003274:	d121      	bne.n	80032ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003280:	429a      	cmp	r2, r3
 8003282:	d11a      	bne.n	80032ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800328a:	4013      	ands	r3, r2
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003290:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003292:	4293      	cmp	r3, r2
 8003294:	d111      	bne.n	80032ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a0:	085b      	lsrs	r3, r3, #1
 80032a2:	3b01      	subs	r3, #1
 80032a4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d107      	bne.n	80032ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d001      	beq.n	80032be <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e000      	b.n	80032c0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40007000 	.word	0x40007000
 80032cc:	40023800 	.word	0x40023800
 80032d0:	42470060 	.word	0x42470060

080032d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e0cc      	b.n	8003482 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032e8:	4b68      	ldr	r3, [pc, #416]	; (800348c <HAL_RCC_ClockConfig+0x1b8>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 030f 	and.w	r3, r3, #15
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d90c      	bls.n	8003310 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f6:	4b65      	ldr	r3, [pc, #404]	; (800348c <HAL_RCC_ClockConfig+0x1b8>)
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fe:	4b63      	ldr	r3, [pc, #396]	; (800348c <HAL_RCC_ClockConfig+0x1b8>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	429a      	cmp	r2, r3
 800330a:	d001      	beq.n	8003310 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e0b8      	b.n	8003482 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d020      	beq.n	800335e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b00      	cmp	r3, #0
 8003326:	d005      	beq.n	8003334 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003328:	4b59      	ldr	r3, [pc, #356]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	4a58      	ldr	r2, [pc, #352]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 800332e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003332:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0308 	and.w	r3, r3, #8
 800333c:	2b00      	cmp	r3, #0
 800333e:	d005      	beq.n	800334c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003340:	4b53      	ldr	r3, [pc, #332]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	4a52      	ldr	r2, [pc, #328]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 8003346:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800334a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800334c:	4b50      	ldr	r3, [pc, #320]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	494d      	ldr	r1, [pc, #308]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 800335a:	4313      	orrs	r3, r2
 800335c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d044      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d107      	bne.n	8003382 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003372:	4b47      	ldr	r3, [pc, #284]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d119      	bne.n	80033b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e07f      	b.n	8003482 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b02      	cmp	r3, #2
 8003388:	d003      	beq.n	8003392 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800338e:	2b03      	cmp	r3, #3
 8003390:	d107      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003392:	4b3f      	ldr	r3, [pc, #252]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d109      	bne.n	80033b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e06f      	b.n	8003482 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a2:	4b3b      	ldr	r3, [pc, #236]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e067      	b.n	8003482 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033b2:	4b37      	ldr	r3, [pc, #220]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f023 0203 	bic.w	r2, r3, #3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	4934      	ldr	r1, [pc, #208]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033c4:	f7ff f974 	bl	80026b0 <HAL_GetTick>
 80033c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ca:	e00a      	b.n	80033e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033cc:	f7ff f970 	bl	80026b0 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033da:	4293      	cmp	r3, r2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e04f      	b.n	8003482 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e2:	4b2b      	ldr	r3, [pc, #172]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 020c 	and.w	r2, r3, #12
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d1eb      	bne.n	80033cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033f4:	4b25      	ldr	r3, [pc, #148]	; (800348c <HAL_RCC_ClockConfig+0x1b8>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 030f 	and.w	r3, r3, #15
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d20c      	bcs.n	800341c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003402:	4b22      	ldr	r3, [pc, #136]	; (800348c <HAL_RCC_ClockConfig+0x1b8>)
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800340a:	4b20      	ldr	r3, [pc, #128]	; (800348c <HAL_RCC_ClockConfig+0x1b8>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	429a      	cmp	r2, r3
 8003416:	d001      	beq.n	800341c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e032      	b.n	8003482 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	2b00      	cmp	r3, #0
 8003426:	d008      	beq.n	800343a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003428:	4b19      	ldr	r3, [pc, #100]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	4916      	ldr	r1, [pc, #88]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 8003436:	4313      	orrs	r3, r2
 8003438:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0308 	and.w	r3, r3, #8
 8003442:	2b00      	cmp	r3, #0
 8003444:	d009      	beq.n	800345a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003446:	4b12      	ldr	r3, [pc, #72]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	490e      	ldr	r1, [pc, #56]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 8003456:	4313      	orrs	r3, r2
 8003458:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800345a:	f000 f821 	bl	80034a0 <HAL_RCC_GetSysClockFreq>
 800345e:	4602      	mov	r2, r0
 8003460:	4b0b      	ldr	r3, [pc, #44]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	091b      	lsrs	r3, r3, #4
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	490a      	ldr	r1, [pc, #40]	; (8003494 <HAL_RCC_ClockConfig+0x1c0>)
 800346c:	5ccb      	ldrb	r3, [r1, r3]
 800346e:	fa22 f303 	lsr.w	r3, r2, r3
 8003472:	4a09      	ldr	r2, [pc, #36]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 8003474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003476:	4b09      	ldr	r3, [pc, #36]	; (800349c <HAL_RCC_ClockConfig+0x1c8>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff f8d4 	bl	8002628 <HAL_InitTick>

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40023c00 	.word	0x40023c00
 8003490:	40023800 	.word	0x40023800
 8003494:	0800a014 	.word	0x0800a014
 8003498:	20000330 	.word	0x20000330
 800349c:	20000334 	.word	0x20000334

080034a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80034a4:	b084      	sub	sp, #16
 80034a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	607b      	str	r3, [r7, #4]
 80034ac:	2300      	movs	r3, #0
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	2300      	movs	r3, #0
 80034b2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80034b4:	2300      	movs	r3, #0
 80034b6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034b8:	4b67      	ldr	r3, [pc, #412]	; (8003658 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f003 030c 	and.w	r3, r3, #12
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d00d      	beq.n	80034e0 <HAL_RCC_GetSysClockFreq+0x40>
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	f200 80bd 	bhi.w	8003644 <HAL_RCC_GetSysClockFreq+0x1a4>
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d002      	beq.n	80034d4 <HAL_RCC_GetSysClockFreq+0x34>
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d003      	beq.n	80034da <HAL_RCC_GetSysClockFreq+0x3a>
 80034d2:	e0b7      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034d4:	4b61      	ldr	r3, [pc, #388]	; (800365c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80034d6:	60bb      	str	r3, [r7, #8]
       break;
 80034d8:	e0b7      	b.n	800364a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034da:	4b61      	ldr	r3, [pc, #388]	; (8003660 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80034dc:	60bb      	str	r3, [r7, #8]
      break;
 80034de:	e0b4      	b.n	800364a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034e0:	4b5d      	ldr	r3, [pc, #372]	; (8003658 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034ea:	4b5b      	ldr	r3, [pc, #364]	; (8003658 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d04d      	beq.n	8003592 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034f6:	4b58      	ldr	r3, [pc, #352]	; (8003658 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	099b      	lsrs	r3, r3, #6
 80034fc:	461a      	mov	r2, r3
 80034fe:	f04f 0300 	mov.w	r3, #0
 8003502:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003506:	f04f 0100 	mov.w	r1, #0
 800350a:	ea02 0800 	and.w	r8, r2, r0
 800350e:	ea03 0901 	and.w	r9, r3, r1
 8003512:	4640      	mov	r0, r8
 8003514:	4649      	mov	r1, r9
 8003516:	f04f 0200 	mov.w	r2, #0
 800351a:	f04f 0300 	mov.w	r3, #0
 800351e:	014b      	lsls	r3, r1, #5
 8003520:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003524:	0142      	lsls	r2, r0, #5
 8003526:	4610      	mov	r0, r2
 8003528:	4619      	mov	r1, r3
 800352a:	ebb0 0008 	subs.w	r0, r0, r8
 800352e:	eb61 0109 	sbc.w	r1, r1, r9
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	f04f 0300 	mov.w	r3, #0
 800353a:	018b      	lsls	r3, r1, #6
 800353c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003540:	0182      	lsls	r2, r0, #6
 8003542:	1a12      	subs	r2, r2, r0
 8003544:	eb63 0301 	sbc.w	r3, r3, r1
 8003548:	f04f 0000 	mov.w	r0, #0
 800354c:	f04f 0100 	mov.w	r1, #0
 8003550:	00d9      	lsls	r1, r3, #3
 8003552:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003556:	00d0      	lsls	r0, r2, #3
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	eb12 0208 	adds.w	r2, r2, r8
 8003560:	eb43 0309 	adc.w	r3, r3, r9
 8003564:	f04f 0000 	mov.w	r0, #0
 8003568:	f04f 0100 	mov.w	r1, #0
 800356c:	0259      	lsls	r1, r3, #9
 800356e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003572:	0250      	lsls	r0, r2, #9
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	4610      	mov	r0, r2
 800357a:	4619      	mov	r1, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	461a      	mov	r2, r3
 8003580:	f04f 0300 	mov.w	r3, #0
 8003584:	f7fd fb90 	bl	8000ca8 <__aeabi_uldivmod>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	4613      	mov	r3, r2
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	e04a      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003592:	4b31      	ldr	r3, [pc, #196]	; (8003658 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	099b      	lsrs	r3, r3, #6
 8003598:	461a      	mov	r2, r3
 800359a:	f04f 0300 	mov.w	r3, #0
 800359e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80035a2:	f04f 0100 	mov.w	r1, #0
 80035a6:	ea02 0400 	and.w	r4, r2, r0
 80035aa:	ea03 0501 	and.w	r5, r3, r1
 80035ae:	4620      	mov	r0, r4
 80035b0:	4629      	mov	r1, r5
 80035b2:	f04f 0200 	mov.w	r2, #0
 80035b6:	f04f 0300 	mov.w	r3, #0
 80035ba:	014b      	lsls	r3, r1, #5
 80035bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80035c0:	0142      	lsls	r2, r0, #5
 80035c2:	4610      	mov	r0, r2
 80035c4:	4619      	mov	r1, r3
 80035c6:	1b00      	subs	r0, r0, r4
 80035c8:	eb61 0105 	sbc.w	r1, r1, r5
 80035cc:	f04f 0200 	mov.w	r2, #0
 80035d0:	f04f 0300 	mov.w	r3, #0
 80035d4:	018b      	lsls	r3, r1, #6
 80035d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80035da:	0182      	lsls	r2, r0, #6
 80035dc:	1a12      	subs	r2, r2, r0
 80035de:	eb63 0301 	sbc.w	r3, r3, r1
 80035e2:	f04f 0000 	mov.w	r0, #0
 80035e6:	f04f 0100 	mov.w	r1, #0
 80035ea:	00d9      	lsls	r1, r3, #3
 80035ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035f0:	00d0      	lsls	r0, r2, #3
 80035f2:	4602      	mov	r2, r0
 80035f4:	460b      	mov	r3, r1
 80035f6:	1912      	adds	r2, r2, r4
 80035f8:	eb45 0303 	adc.w	r3, r5, r3
 80035fc:	f04f 0000 	mov.w	r0, #0
 8003600:	f04f 0100 	mov.w	r1, #0
 8003604:	0299      	lsls	r1, r3, #10
 8003606:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800360a:	0290      	lsls	r0, r2, #10
 800360c:	4602      	mov	r2, r0
 800360e:	460b      	mov	r3, r1
 8003610:	4610      	mov	r0, r2
 8003612:	4619      	mov	r1, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	461a      	mov	r2, r3
 8003618:	f04f 0300 	mov.w	r3, #0
 800361c:	f7fd fb44 	bl	8000ca8 <__aeabi_uldivmod>
 8003620:	4602      	mov	r2, r0
 8003622:	460b      	mov	r3, r1
 8003624:	4613      	mov	r3, r2
 8003626:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003628:	4b0b      	ldr	r3, [pc, #44]	; (8003658 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	0c1b      	lsrs	r3, r3, #16
 800362e:	f003 0303 	and.w	r3, r3, #3
 8003632:	3301      	adds	r3, #1
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003640:	60bb      	str	r3, [r7, #8]
      break;
 8003642:	e002      	b.n	800364a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003644:	4b05      	ldr	r3, [pc, #20]	; (800365c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003646:	60bb      	str	r3, [r7, #8]
      break;
 8003648:	bf00      	nop
    }
  }
  return sysclockfreq;
 800364a:	68bb      	ldr	r3, [r7, #8]
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003656:	bf00      	nop
 8003658:	40023800 	.word	0x40023800
 800365c:	00f42400 	.word	0x00f42400
 8003660:	007a1200 	.word	0x007a1200

08003664 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003668:	4b03      	ldr	r3, [pc, #12]	; (8003678 <HAL_RCC_GetHCLKFreq+0x14>)
 800366a:	681b      	ldr	r3, [r3, #0]
}
 800366c:	4618      	mov	r0, r3
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	20000330 	.word	0x20000330

0800367c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003680:	f7ff fff0 	bl	8003664 <HAL_RCC_GetHCLKFreq>
 8003684:	4602      	mov	r2, r0
 8003686:	4b05      	ldr	r3, [pc, #20]	; (800369c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	0a9b      	lsrs	r3, r3, #10
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	4903      	ldr	r1, [pc, #12]	; (80036a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003692:	5ccb      	ldrb	r3, [r1, r3]
 8003694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003698:	4618      	mov	r0, r3
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40023800 	.word	0x40023800
 80036a0:	0800a024 	.word	0x0800a024

080036a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036a8:	f7ff ffdc 	bl	8003664 <HAL_RCC_GetHCLKFreq>
 80036ac:	4602      	mov	r2, r0
 80036ae:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	0b5b      	lsrs	r3, r3, #13
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	4903      	ldr	r1, [pc, #12]	; (80036c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036ba:	5ccb      	ldrb	r3, [r1, r3]
 80036bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40023800 	.word	0x40023800
 80036c8:	0800a024 	.word	0x0800a024

080036cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e03f      	b.n	800375e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d106      	bne.n	80036f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7fe fdf0 	bl	80022d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2224      	movs	r2, #36	; 0x24
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800370e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 fddb 	bl	80042cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	691a      	ldr	r2, [r3, #16]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003724:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	695a      	ldr	r2, [r3, #20]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003734:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68da      	ldr	r2, [r3, #12]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003744:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2220      	movs	r2, #32
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2220      	movs	r2, #32
 8003758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b08a      	sub	sp, #40	; 0x28
 800376a:	af02      	add	r7, sp, #8
 800376c:	60f8      	str	r0, [r7, #12]
 800376e:	60b9      	str	r1, [r7, #8]
 8003770:	603b      	str	r3, [r7, #0]
 8003772:	4613      	mov	r3, r2
 8003774:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003776:	2300      	movs	r3, #0
 8003778:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b20      	cmp	r3, #32
 8003784:	d17c      	bne.n	8003880 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d002      	beq.n	8003792 <HAL_UART_Transmit+0x2c>
 800378c:	88fb      	ldrh	r3, [r7, #6]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e075      	b.n	8003882 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <HAL_UART_Transmit+0x3e>
 80037a0:	2302      	movs	r3, #2
 80037a2:	e06e      	b.n	8003882 <HAL_UART_Transmit+0x11c>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2221      	movs	r2, #33	; 0x21
 80037b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037ba:	f7fe ff79 	bl	80026b0 <HAL_GetTick>
 80037be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	88fa      	ldrh	r2, [r7, #6]
 80037c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	88fa      	ldrh	r2, [r7, #6]
 80037ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d4:	d108      	bne.n	80037e8 <HAL_UART_Transmit+0x82>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d104      	bne.n	80037e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80037de:	2300      	movs	r3, #0
 80037e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	61bb      	str	r3, [r7, #24]
 80037e6:	e003      	b.n	80037f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037ec:	2300      	movs	r3, #0
 80037ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80037f8:	e02a      	b.n	8003850 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	2200      	movs	r2, #0
 8003802:	2180      	movs	r1, #128	; 0x80
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 fb1f 	bl	8003e48 <UART_WaitOnFlagUntilTimeout>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e036      	b.n	8003882 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10b      	bne.n	8003832 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	881b      	ldrh	r3, [r3, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003828:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	3302      	adds	r3, #2
 800382e:	61bb      	str	r3, [r7, #24]
 8003830:	e007      	b.n	8003842 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	781a      	ldrb	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	3301      	adds	r3, #1
 8003840:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003846:	b29b      	uxth	r3, r3
 8003848:	3b01      	subs	r3, #1
 800384a:	b29a      	uxth	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003854:	b29b      	uxth	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1cf      	bne.n	80037fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	2200      	movs	r2, #0
 8003862:	2140      	movs	r1, #64	; 0x40
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 faef 	bl	8003e48 <UART_WaitOnFlagUntilTimeout>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e006      	b.n	8003882 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800387c:	2300      	movs	r3, #0
 800387e:	e000      	b.n	8003882 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003880:	2302      	movs	r3, #2
  }
}
 8003882:	4618      	mov	r0, r3
 8003884:	3720      	adds	r7, #32
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b084      	sub	sp, #16
 800388e:	af00      	add	r7, sp, #0
 8003890:	60f8      	str	r0, [r7, #12]
 8003892:	60b9      	str	r1, [r7, #8]
 8003894:	4613      	mov	r3, r2
 8003896:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b20      	cmp	r3, #32
 80038a2:	d11d      	bne.n	80038e0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d002      	beq.n	80038b0 <HAL_UART_Receive_IT+0x26>
 80038aa:	88fb      	ldrh	r3, [r7, #6]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e016      	b.n	80038e2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d101      	bne.n	80038c2 <HAL_UART_Receive_IT+0x38>
 80038be:	2302      	movs	r3, #2
 80038c0:	e00f      	b.n	80038e2 <HAL_UART_Receive_IT+0x58>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80038d0:	88fb      	ldrh	r3, [r7, #6]
 80038d2:	461a      	mov	r2, r3
 80038d4:	68b9      	ldr	r1, [r7, #8]
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 fb24 	bl	8003f24 <UART_Start_Receive_IT>
 80038dc:	4603      	mov	r3, r0
 80038de:	e000      	b.n	80038e2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80038e0:	2302      	movs	r3, #2
  }
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
	...

080038ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b0ba      	sub	sp, #232	; 0xe8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003912:	2300      	movs	r3, #0
 8003914:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003918:	2300      	movs	r3, #0
 800391a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800391e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800392a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10f      	bne.n	8003952 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003936:	f003 0320 	and.w	r3, r3, #32
 800393a:	2b00      	cmp	r3, #0
 800393c:	d009      	beq.n	8003952 <HAL_UART_IRQHandler+0x66>
 800393e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003942:	f003 0320 	and.w	r3, r3, #32
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 fc03 	bl	8004156 <UART_Receive_IT>
      return;
 8003950:	e256      	b.n	8003e00 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003952:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 80de 	beq.w	8003b18 <HAL_UART_IRQHandler+0x22c>
 800395c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	2b00      	cmp	r3, #0
 8003966:	d106      	bne.n	8003976 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800396c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 80d1 	beq.w	8003b18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00b      	beq.n	800399a <HAL_UART_IRQHandler+0xae>
 8003982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398a:	2b00      	cmp	r3, #0
 800398c:	d005      	beq.n	800399a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	f043 0201 	orr.w	r2, r3, #1
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800399a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800399e:	f003 0304 	and.w	r3, r3, #4
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00b      	beq.n	80039be <HAL_UART_IRQHandler+0xd2>
 80039a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d005      	beq.n	80039be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	f043 0202 	orr.w	r2, r3, #2
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00b      	beq.n	80039e2 <HAL_UART_IRQHandler+0xf6>
 80039ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d005      	beq.n	80039e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	f043 0204 	orr.w	r2, r3, #4
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80039e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d011      	beq.n	8003a12 <HAL_UART_IRQHandler+0x126>
 80039ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039f2:	f003 0320 	and.w	r3, r3, #32
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d105      	bne.n	8003a06 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80039fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d005      	beq.n	8003a12 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	f043 0208 	orr.w	r2, r3, #8
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 81ed 	beq.w	8003df6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a20:	f003 0320 	and.w	r3, r3, #32
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d008      	beq.n	8003a3a <HAL_UART_IRQHandler+0x14e>
 8003a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a2c:	f003 0320 	and.w	r3, r3, #32
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d002      	beq.n	8003a3a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 fb8e 	bl	8004156 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a44:	2b40      	cmp	r3, #64	; 0x40
 8003a46:	bf0c      	ite	eq
 8003a48:	2301      	moveq	r3, #1
 8003a4a:	2300      	movne	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d103      	bne.n	8003a66 <HAL_UART_IRQHandler+0x17a>
 8003a5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d04f      	beq.n	8003b06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 fa96 	bl	8003f98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a76:	2b40      	cmp	r3, #64	; 0x40
 8003a78:	d141      	bne.n	8003afe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	3314      	adds	r3, #20
 8003a80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a88:	e853 3f00 	ldrex	r3, [r3]
 8003a8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	3314      	adds	r3, #20
 8003aa2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003aa6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003aaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003ab2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003ab6:	e841 2300 	strex	r3, r2, [r1]
 8003aba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003abe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1d9      	bne.n	8003a7a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d013      	beq.n	8003af6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad2:	4a7d      	ldr	r2, [pc, #500]	; (8003cc8 <HAL_UART_IRQHandler+0x3dc>)
 8003ad4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7fe ff99 	bl	8002a12 <HAL_DMA_Abort_IT>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d016      	beq.n	8003b14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003af0:	4610      	mov	r0, r2
 8003af2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af4:	e00e      	b.n	8003b14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f990 	bl	8003e1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003afc:	e00a      	b.n	8003b14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f98c 	bl	8003e1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b04:	e006      	b.n	8003b14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f988 	bl	8003e1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003b12:	e170      	b.n	8003df6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b14:	bf00      	nop
    return;
 8003b16:	e16e      	b.n	8003df6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	f040 814a 	bne.w	8003db6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b26:	f003 0310 	and.w	r3, r3, #16
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f000 8143 	beq.w	8003db6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b34:	f003 0310 	and.w	r3, r3, #16
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 813c 	beq.w	8003db6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60bb      	str	r3, [r7, #8]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	60bb      	str	r3, [r7, #8]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	60bb      	str	r3, [r7, #8]
 8003b52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5e:	2b40      	cmp	r3, #64	; 0x40
 8003b60:	f040 80b4 	bne.w	8003ccc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 8140 	beq.w	8003dfa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b82:	429a      	cmp	r2, r3
 8003b84:	f080 8139 	bcs.w	8003dfa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b8e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b9a:	f000 8088 	beq.w	8003cae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	330c      	adds	r3, #12
 8003ba4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bac:	e853 3f00 	ldrex	r3, [r3]
 8003bb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003bb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	330c      	adds	r3, #12
 8003bc6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003bca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003bd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003bda:	e841 2300 	strex	r3, r2, [r1]
 8003bde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003be2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1d9      	bne.n	8003b9e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	3314      	adds	r3, #20
 8003bf0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bf4:	e853 3f00 	ldrex	r3, [r3]
 8003bf8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003bfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bfc:	f023 0301 	bic.w	r3, r3, #1
 8003c00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	3314      	adds	r3, #20
 8003c0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c0e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c12:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c1a:	e841 2300 	strex	r3, r2, [r1]
 8003c1e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1e1      	bne.n	8003bea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	3314      	adds	r3, #20
 8003c2c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c30:	e853 3f00 	ldrex	r3, [r3]
 8003c34:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	3314      	adds	r3, #20
 8003c46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c4c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c52:	e841 2300 	strex	r3, r2, [r1]
 8003c56:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1e3      	bne.n	8003c26 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2220      	movs	r2, #32
 8003c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	330c      	adds	r3, #12
 8003c72:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c76:	e853 3f00 	ldrex	r3, [r3]
 8003c7a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c7e:	f023 0310 	bic.w	r3, r3, #16
 8003c82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	330c      	adds	r3, #12
 8003c8c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003c90:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c92:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c98:	e841 2300 	strex	r3, r2, [r1]
 8003c9c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1e3      	bne.n	8003c6c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7fe fe42 	bl	8002932 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f8b6 	bl	8003e30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cc4:	e099      	b.n	8003dfa <HAL_UART_IRQHandler+0x50e>
 8003cc6:	bf00      	nop
 8003cc8:	0800405f 	.word	0x0800405f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 808b 	beq.w	8003dfe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003ce8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 8086 	beq.w	8003dfe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	330c      	adds	r3, #12
 8003cf8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cfc:	e853 3f00 	ldrex	r3, [r3]
 8003d00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	330c      	adds	r3, #12
 8003d12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003d16:	647a      	str	r2, [r7, #68]	; 0x44
 8003d18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d1e:	e841 2300 	strex	r3, r2, [r1]
 8003d22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1e3      	bne.n	8003cf2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	3314      	adds	r3, #20
 8003d30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d34:	e853 3f00 	ldrex	r3, [r3]
 8003d38:	623b      	str	r3, [r7, #32]
   return(result);
 8003d3a:	6a3b      	ldr	r3, [r7, #32]
 8003d3c:	f023 0301 	bic.w	r3, r3, #1
 8003d40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3314      	adds	r3, #20
 8003d4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d4e:	633a      	str	r2, [r7, #48]	; 0x30
 8003d50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d56:	e841 2300 	strex	r3, r2, [r1]
 8003d5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1e3      	bne.n	8003d2a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2220      	movs	r2, #32
 8003d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	330c      	adds	r3, #12
 8003d76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	e853 3f00 	ldrex	r3, [r3]
 8003d7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f023 0310 	bic.w	r3, r3, #16
 8003d86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	330c      	adds	r3, #12
 8003d90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003d94:	61fa      	str	r2, [r7, #28]
 8003d96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d98:	69b9      	ldr	r1, [r7, #24]
 8003d9a:	69fa      	ldr	r2, [r7, #28]
 8003d9c:	e841 2300 	strex	r3, r2, [r1]
 8003da0:	617b      	str	r3, [r7, #20]
   return(result);
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1e3      	bne.n	8003d70 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003da8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003dac:	4619      	mov	r1, r3
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f83e 	bl	8003e30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003db4:	e023      	b.n	8003dfe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d009      	beq.n	8003dd6 <HAL_UART_IRQHandler+0x4ea>
 8003dc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f959 	bl	8004086 <UART_Transmit_IT>
    return;
 8003dd4:	e014      	b.n	8003e00 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00e      	beq.n	8003e00 <HAL_UART_IRQHandler+0x514>
 8003de2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d008      	beq.n	8003e00 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f999 	bl	8004126 <UART_EndTransmit_IT>
    return;
 8003df4:	e004      	b.n	8003e00 <HAL_UART_IRQHandler+0x514>
    return;
 8003df6:	bf00      	nop
 8003df8:	e002      	b.n	8003e00 <HAL_UART_IRQHandler+0x514>
      return;
 8003dfa:	bf00      	nop
 8003dfc:	e000      	b.n	8003e00 <HAL_UART_IRQHandler+0x514>
      return;
 8003dfe:	bf00      	nop
  }
}
 8003e00:	37e8      	adds	r7, #232	; 0xe8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop

08003e08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b090      	sub	sp, #64	; 0x40
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	603b      	str	r3, [r7, #0]
 8003e54:	4613      	mov	r3, r2
 8003e56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e58:	e050      	b.n	8003efc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e60:	d04c      	beq.n	8003efc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d007      	beq.n	8003e78 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e68:	f7fe fc22 	bl	80026b0 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d241      	bcs.n	8003efc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	330c      	adds	r3, #12
 8003e7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e82:	e853 3f00 	ldrex	r3, [r3]
 8003e86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	330c      	adds	r3, #12
 8003e96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e98:	637a      	str	r2, [r7, #52]	; 0x34
 8003e9a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ea0:	e841 2300 	strex	r3, r2, [r1]
 8003ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1e5      	bne.n	8003e78 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	3314      	adds	r3, #20
 8003eb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	e853 3f00 	ldrex	r3, [r3]
 8003eba:	613b      	str	r3, [r7, #16]
   return(result);
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	f023 0301 	bic.w	r3, r3, #1
 8003ec2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	3314      	adds	r3, #20
 8003eca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ecc:	623a      	str	r2, [r7, #32]
 8003ece:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed0:	69f9      	ldr	r1, [r7, #28]
 8003ed2:	6a3a      	ldr	r2, [r7, #32]
 8003ed4:	e841 2300 	strex	r3, r2, [r1]
 8003ed8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1e5      	bne.n	8003eac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2220      	movs	r2, #32
 8003eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e00f      	b.n	8003f1c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	4013      	ands	r3, r2
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	bf0c      	ite	eq
 8003f0c:	2301      	moveq	r3, #1
 8003f0e:	2300      	movne	r3, #0
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	461a      	mov	r2, r3
 8003f14:	79fb      	ldrb	r3, [r7, #7]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d09f      	beq.n	8003e5a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3740      	adds	r7, #64	; 0x40
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	88fa      	ldrh	r2, [r7, #6]
 8003f3c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	88fa      	ldrh	r2, [r7, #6]
 8003f42:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2222      	movs	r2, #34	; 0x22
 8003f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68da      	ldr	r2, [r3, #12]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f68:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695a      	ldr	r2, [r3, #20]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f042 0201 	orr.w	r2, r2, #1
 8003f78:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68da      	ldr	r2, [r3, #12]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f042 0220 	orr.w	r2, r2, #32
 8003f88:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b095      	sub	sp, #84	; 0x54
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	330c      	adds	r3, #12
 8003fa6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003faa:	e853 3f00 	ldrex	r3, [r3]
 8003fae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	330c      	adds	r3, #12
 8003fbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fc0:	643a      	str	r2, [r7, #64]	; 0x40
 8003fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003fc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fc8:	e841 2300 	strex	r3, r2, [r1]
 8003fcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1e5      	bne.n	8003fa0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	3314      	adds	r3, #20
 8003fda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fdc:	6a3b      	ldr	r3, [r7, #32]
 8003fde:	e853 3f00 	ldrex	r3, [r3]
 8003fe2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	f023 0301 	bic.w	r3, r3, #1
 8003fea:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	3314      	adds	r3, #20
 8003ff2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ff4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ff6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ffa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ffc:	e841 2300 	strex	r3, r2, [r1]
 8004000:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1e5      	bne.n	8003fd4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400c:	2b01      	cmp	r3, #1
 800400e:	d119      	bne.n	8004044 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	330c      	adds	r3, #12
 8004016:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	e853 3f00 	ldrex	r3, [r3]
 800401e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	f023 0310 	bic.w	r3, r3, #16
 8004026:	647b      	str	r3, [r7, #68]	; 0x44
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	330c      	adds	r3, #12
 800402e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004030:	61ba      	str	r2, [r7, #24]
 8004032:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004034:	6979      	ldr	r1, [r7, #20]
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	e841 2300 	strex	r3, r2, [r1]
 800403c:	613b      	str	r3, [r7, #16]
   return(result);
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1e5      	bne.n	8004010 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2220      	movs	r2, #32
 8004048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004052:	bf00      	nop
 8004054:	3754      	adds	r7, #84	; 0x54
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b084      	sub	sp, #16
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f7ff fecf 	bl	8003e1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800407e:	bf00      	nop
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004086:	b480      	push	{r7}
 8004088:	b085      	sub	sp, #20
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b21      	cmp	r3, #33	; 0x21
 8004098:	d13e      	bne.n	8004118 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a2:	d114      	bne.n	80040ce <UART_Transmit_IT+0x48>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d110      	bne.n	80040ce <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	461a      	mov	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	1c9a      	adds	r2, r3, #2
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	621a      	str	r2, [r3, #32]
 80040cc:	e008      	b.n	80040e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	1c59      	adds	r1, r3, #1
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6211      	str	r1, [r2, #32]
 80040d8:	781a      	ldrb	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	3b01      	subs	r3, #1
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	4619      	mov	r1, r3
 80040ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10f      	bne.n	8004114 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68da      	ldr	r2, [r3, #12]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004102:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004112:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004114:	2300      	movs	r3, #0
 8004116:	e000      	b.n	800411a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004118:	2302      	movs	r3, #2
  }
}
 800411a:	4618      	mov	r0, r3
 800411c:	3714      	adds	r7, #20
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b082      	sub	sp, #8
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68da      	ldr	r2, [r3, #12]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800413c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2220      	movs	r2, #32
 8004142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7ff fe5e 	bl	8003e08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b08c      	sub	sp, #48	; 0x30
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b22      	cmp	r3, #34	; 0x22
 8004168:	f040 80ab 	bne.w	80042c2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004174:	d117      	bne.n	80041a6 <UART_Receive_IT+0x50>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d113      	bne.n	80041a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800417e:	2300      	movs	r3, #0
 8004180:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004186:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	b29b      	uxth	r3, r3
 8004190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004194:	b29a      	uxth	r2, r3
 8004196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004198:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419e:	1c9a      	adds	r2, r3, #2
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	629a      	str	r2, [r3, #40]	; 0x28
 80041a4:	e026      	b.n	80041f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80041ac:	2300      	movs	r3, #0
 80041ae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b8:	d007      	beq.n	80041ca <UART_Receive_IT+0x74>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10a      	bne.n	80041d8 <UART_Receive_IT+0x82>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d106      	bne.n	80041d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	b2da      	uxtb	r2, r3
 80041d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d4:	701a      	strb	r2, [r3, #0]
 80041d6:	e008      	b.n	80041ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ee:	1c5a      	adds	r2, r3, #1
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	3b01      	subs	r3, #1
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	4619      	mov	r1, r3
 8004202:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004204:	2b00      	cmp	r3, #0
 8004206:	d15a      	bne.n	80042be <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0220 	bic.w	r2, r2, #32
 8004216:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004226:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	695a      	ldr	r2, [r3, #20]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 0201 	bic.w	r2, r2, #1
 8004236:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2220      	movs	r2, #32
 800423c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004244:	2b01      	cmp	r3, #1
 8004246:	d135      	bne.n	80042b4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	330c      	adds	r3, #12
 8004254:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	e853 3f00 	ldrex	r3, [r3]
 800425c:	613b      	str	r3, [r7, #16]
   return(result);
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f023 0310 	bic.w	r3, r3, #16
 8004264:	627b      	str	r3, [r7, #36]	; 0x24
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	330c      	adds	r3, #12
 800426c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800426e:	623a      	str	r2, [r7, #32]
 8004270:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004272:	69f9      	ldr	r1, [r7, #28]
 8004274:	6a3a      	ldr	r2, [r7, #32]
 8004276:	e841 2300 	strex	r3, r2, [r1]
 800427a:	61bb      	str	r3, [r7, #24]
   return(result);
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1e5      	bne.n	800424e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0310 	and.w	r3, r3, #16
 800428c:	2b10      	cmp	r3, #16
 800428e:	d10a      	bne.n	80042a6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004290:	2300      	movs	r3, #0
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	60fb      	str	r3, [r7, #12]
 80042a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042aa:	4619      	mov	r1, r3
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7ff fdbf 	bl	8003e30 <HAL_UARTEx_RxEventCallback>
 80042b2:	e002      	b.n	80042ba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f7fc ffe1 	bl	800127c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042ba:	2300      	movs	r3, #0
 80042bc:	e002      	b.n	80042c4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80042be:	2300      	movs	r3, #0
 80042c0:	e000      	b.n	80042c4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80042c2:	2302      	movs	r3, #2
  }
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3730      	adds	r7, #48	; 0x30
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042d0:	b09f      	sub	sp, #124	; 0x7c
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80042e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042e2:	68d9      	ldr	r1, [r3, #12]
 80042e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	ea40 0301 	orr.w	r3, r0, r1
 80042ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042f0:	689a      	ldr	r2, [r3, #8]
 80042f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	431a      	orrs	r2, r3
 80042f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	431a      	orrs	r2, r3
 80042fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	4313      	orrs	r3, r2
 8004304:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004310:	f021 010c 	bic.w	r1, r1, #12
 8004314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800431a:	430b      	orrs	r3, r1
 800431c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800431e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800432a:	6999      	ldr	r1, [r3, #24]
 800432c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	ea40 0301 	orr.w	r3, r0, r1
 8004334:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	4bc5      	ldr	r3, [pc, #788]	; (8004650 <UART_SetConfig+0x384>)
 800433c:	429a      	cmp	r2, r3
 800433e:	d004      	beq.n	800434a <UART_SetConfig+0x7e>
 8004340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	4bc3      	ldr	r3, [pc, #780]	; (8004654 <UART_SetConfig+0x388>)
 8004346:	429a      	cmp	r2, r3
 8004348:	d103      	bne.n	8004352 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800434a:	f7ff f9ab 	bl	80036a4 <HAL_RCC_GetPCLK2Freq>
 800434e:	6778      	str	r0, [r7, #116]	; 0x74
 8004350:	e002      	b.n	8004358 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004352:	f7ff f993 	bl	800367c <HAL_RCC_GetPCLK1Freq>
 8004356:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004360:	f040 80b6 	bne.w	80044d0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004364:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004366:	461c      	mov	r4, r3
 8004368:	f04f 0500 	mov.w	r5, #0
 800436c:	4622      	mov	r2, r4
 800436e:	462b      	mov	r3, r5
 8004370:	1891      	adds	r1, r2, r2
 8004372:	6439      	str	r1, [r7, #64]	; 0x40
 8004374:	415b      	adcs	r3, r3
 8004376:	647b      	str	r3, [r7, #68]	; 0x44
 8004378:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800437c:	1912      	adds	r2, r2, r4
 800437e:	eb45 0303 	adc.w	r3, r5, r3
 8004382:	f04f 0000 	mov.w	r0, #0
 8004386:	f04f 0100 	mov.w	r1, #0
 800438a:	00d9      	lsls	r1, r3, #3
 800438c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004390:	00d0      	lsls	r0, r2, #3
 8004392:	4602      	mov	r2, r0
 8004394:	460b      	mov	r3, r1
 8004396:	1911      	adds	r1, r2, r4
 8004398:	6639      	str	r1, [r7, #96]	; 0x60
 800439a:	416b      	adcs	r3, r5
 800439c:	667b      	str	r3, [r7, #100]	; 0x64
 800439e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	461a      	mov	r2, r3
 80043a4:	f04f 0300 	mov.w	r3, #0
 80043a8:	1891      	adds	r1, r2, r2
 80043aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80043ac:	415b      	adcs	r3, r3
 80043ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80043b4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80043b8:	f7fc fc76 	bl	8000ca8 <__aeabi_uldivmod>
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	4ba5      	ldr	r3, [pc, #660]	; (8004658 <UART_SetConfig+0x38c>)
 80043c2:	fba3 2302 	umull	r2, r3, r3, r2
 80043c6:	095b      	lsrs	r3, r3, #5
 80043c8:	011e      	lsls	r6, r3, #4
 80043ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043cc:	461c      	mov	r4, r3
 80043ce:	f04f 0500 	mov.w	r5, #0
 80043d2:	4622      	mov	r2, r4
 80043d4:	462b      	mov	r3, r5
 80043d6:	1891      	adds	r1, r2, r2
 80043d8:	6339      	str	r1, [r7, #48]	; 0x30
 80043da:	415b      	adcs	r3, r3
 80043dc:	637b      	str	r3, [r7, #52]	; 0x34
 80043de:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80043e2:	1912      	adds	r2, r2, r4
 80043e4:	eb45 0303 	adc.w	r3, r5, r3
 80043e8:	f04f 0000 	mov.w	r0, #0
 80043ec:	f04f 0100 	mov.w	r1, #0
 80043f0:	00d9      	lsls	r1, r3, #3
 80043f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043f6:	00d0      	lsls	r0, r2, #3
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	1911      	adds	r1, r2, r4
 80043fe:	65b9      	str	r1, [r7, #88]	; 0x58
 8004400:	416b      	adcs	r3, r5
 8004402:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	461a      	mov	r2, r3
 800440a:	f04f 0300 	mov.w	r3, #0
 800440e:	1891      	adds	r1, r2, r2
 8004410:	62b9      	str	r1, [r7, #40]	; 0x28
 8004412:	415b      	adcs	r3, r3
 8004414:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004416:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800441a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800441e:	f7fc fc43 	bl	8000ca8 <__aeabi_uldivmod>
 8004422:	4602      	mov	r2, r0
 8004424:	460b      	mov	r3, r1
 8004426:	4b8c      	ldr	r3, [pc, #560]	; (8004658 <UART_SetConfig+0x38c>)
 8004428:	fba3 1302 	umull	r1, r3, r3, r2
 800442c:	095b      	lsrs	r3, r3, #5
 800442e:	2164      	movs	r1, #100	; 0x64
 8004430:	fb01 f303 	mul.w	r3, r1, r3
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	3332      	adds	r3, #50	; 0x32
 800443a:	4a87      	ldr	r2, [pc, #540]	; (8004658 <UART_SetConfig+0x38c>)
 800443c:	fba2 2303 	umull	r2, r3, r2, r3
 8004440:	095b      	lsrs	r3, r3, #5
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004448:	441e      	add	r6, r3
 800444a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800444c:	4618      	mov	r0, r3
 800444e:	f04f 0100 	mov.w	r1, #0
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	1894      	adds	r4, r2, r2
 8004458:	623c      	str	r4, [r7, #32]
 800445a:	415b      	adcs	r3, r3
 800445c:	627b      	str	r3, [r7, #36]	; 0x24
 800445e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004462:	1812      	adds	r2, r2, r0
 8004464:	eb41 0303 	adc.w	r3, r1, r3
 8004468:	f04f 0400 	mov.w	r4, #0
 800446c:	f04f 0500 	mov.w	r5, #0
 8004470:	00dd      	lsls	r5, r3, #3
 8004472:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004476:	00d4      	lsls	r4, r2, #3
 8004478:	4622      	mov	r2, r4
 800447a:	462b      	mov	r3, r5
 800447c:	1814      	adds	r4, r2, r0
 800447e:	653c      	str	r4, [r7, #80]	; 0x50
 8004480:	414b      	adcs	r3, r1
 8004482:	657b      	str	r3, [r7, #84]	; 0x54
 8004484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	461a      	mov	r2, r3
 800448a:	f04f 0300 	mov.w	r3, #0
 800448e:	1891      	adds	r1, r2, r2
 8004490:	61b9      	str	r1, [r7, #24]
 8004492:	415b      	adcs	r3, r3
 8004494:	61fb      	str	r3, [r7, #28]
 8004496:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800449a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800449e:	f7fc fc03 	bl	8000ca8 <__aeabi_uldivmod>
 80044a2:	4602      	mov	r2, r0
 80044a4:	460b      	mov	r3, r1
 80044a6:	4b6c      	ldr	r3, [pc, #432]	; (8004658 <UART_SetConfig+0x38c>)
 80044a8:	fba3 1302 	umull	r1, r3, r3, r2
 80044ac:	095b      	lsrs	r3, r3, #5
 80044ae:	2164      	movs	r1, #100	; 0x64
 80044b0:	fb01 f303 	mul.w	r3, r1, r3
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	3332      	adds	r3, #50	; 0x32
 80044ba:	4a67      	ldr	r2, [pc, #412]	; (8004658 <UART_SetConfig+0x38c>)
 80044bc:	fba2 2303 	umull	r2, r3, r2, r3
 80044c0:	095b      	lsrs	r3, r3, #5
 80044c2:	f003 0207 	and.w	r2, r3, #7
 80044c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4432      	add	r2, r6
 80044cc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044ce:	e0b9      	b.n	8004644 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044d2:	461c      	mov	r4, r3
 80044d4:	f04f 0500 	mov.w	r5, #0
 80044d8:	4622      	mov	r2, r4
 80044da:	462b      	mov	r3, r5
 80044dc:	1891      	adds	r1, r2, r2
 80044de:	6139      	str	r1, [r7, #16]
 80044e0:	415b      	adcs	r3, r3
 80044e2:	617b      	str	r3, [r7, #20]
 80044e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80044e8:	1912      	adds	r2, r2, r4
 80044ea:	eb45 0303 	adc.w	r3, r5, r3
 80044ee:	f04f 0000 	mov.w	r0, #0
 80044f2:	f04f 0100 	mov.w	r1, #0
 80044f6:	00d9      	lsls	r1, r3, #3
 80044f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044fc:	00d0      	lsls	r0, r2, #3
 80044fe:	4602      	mov	r2, r0
 8004500:	460b      	mov	r3, r1
 8004502:	eb12 0804 	adds.w	r8, r2, r4
 8004506:	eb43 0905 	adc.w	r9, r3, r5
 800450a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	4618      	mov	r0, r3
 8004510:	f04f 0100 	mov.w	r1, #0
 8004514:	f04f 0200 	mov.w	r2, #0
 8004518:	f04f 0300 	mov.w	r3, #0
 800451c:	008b      	lsls	r3, r1, #2
 800451e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004522:	0082      	lsls	r2, r0, #2
 8004524:	4640      	mov	r0, r8
 8004526:	4649      	mov	r1, r9
 8004528:	f7fc fbbe 	bl	8000ca8 <__aeabi_uldivmod>
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	4b49      	ldr	r3, [pc, #292]	; (8004658 <UART_SetConfig+0x38c>)
 8004532:	fba3 2302 	umull	r2, r3, r3, r2
 8004536:	095b      	lsrs	r3, r3, #5
 8004538:	011e      	lsls	r6, r3, #4
 800453a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800453c:	4618      	mov	r0, r3
 800453e:	f04f 0100 	mov.w	r1, #0
 8004542:	4602      	mov	r2, r0
 8004544:	460b      	mov	r3, r1
 8004546:	1894      	adds	r4, r2, r2
 8004548:	60bc      	str	r4, [r7, #8]
 800454a:	415b      	adcs	r3, r3
 800454c:	60fb      	str	r3, [r7, #12]
 800454e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004552:	1812      	adds	r2, r2, r0
 8004554:	eb41 0303 	adc.w	r3, r1, r3
 8004558:	f04f 0400 	mov.w	r4, #0
 800455c:	f04f 0500 	mov.w	r5, #0
 8004560:	00dd      	lsls	r5, r3, #3
 8004562:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004566:	00d4      	lsls	r4, r2, #3
 8004568:	4622      	mov	r2, r4
 800456a:	462b      	mov	r3, r5
 800456c:	1814      	adds	r4, r2, r0
 800456e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004570:	414b      	adcs	r3, r1
 8004572:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	4618      	mov	r0, r3
 800457a:	f04f 0100 	mov.w	r1, #0
 800457e:	f04f 0200 	mov.w	r2, #0
 8004582:	f04f 0300 	mov.w	r3, #0
 8004586:	008b      	lsls	r3, r1, #2
 8004588:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800458c:	0082      	lsls	r2, r0, #2
 800458e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004592:	f7fc fb89 	bl	8000ca8 <__aeabi_uldivmod>
 8004596:	4602      	mov	r2, r0
 8004598:	460b      	mov	r3, r1
 800459a:	4b2f      	ldr	r3, [pc, #188]	; (8004658 <UART_SetConfig+0x38c>)
 800459c:	fba3 1302 	umull	r1, r3, r3, r2
 80045a0:	095b      	lsrs	r3, r3, #5
 80045a2:	2164      	movs	r1, #100	; 0x64
 80045a4:	fb01 f303 	mul.w	r3, r1, r3
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	3332      	adds	r3, #50	; 0x32
 80045ae:	4a2a      	ldr	r2, [pc, #168]	; (8004658 <UART_SetConfig+0x38c>)
 80045b0:	fba2 2303 	umull	r2, r3, r2, r3
 80045b4:	095b      	lsrs	r3, r3, #5
 80045b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045ba:	441e      	add	r6, r3
 80045bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045be:	4618      	mov	r0, r3
 80045c0:	f04f 0100 	mov.w	r1, #0
 80045c4:	4602      	mov	r2, r0
 80045c6:	460b      	mov	r3, r1
 80045c8:	1894      	adds	r4, r2, r2
 80045ca:	603c      	str	r4, [r7, #0]
 80045cc:	415b      	adcs	r3, r3
 80045ce:	607b      	str	r3, [r7, #4]
 80045d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045d4:	1812      	adds	r2, r2, r0
 80045d6:	eb41 0303 	adc.w	r3, r1, r3
 80045da:	f04f 0400 	mov.w	r4, #0
 80045de:	f04f 0500 	mov.w	r5, #0
 80045e2:	00dd      	lsls	r5, r3, #3
 80045e4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80045e8:	00d4      	lsls	r4, r2, #3
 80045ea:	4622      	mov	r2, r4
 80045ec:	462b      	mov	r3, r5
 80045ee:	eb12 0a00 	adds.w	sl, r2, r0
 80045f2:	eb43 0b01 	adc.w	fp, r3, r1
 80045f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f04f 0100 	mov.w	r1, #0
 8004600:	f04f 0200 	mov.w	r2, #0
 8004604:	f04f 0300 	mov.w	r3, #0
 8004608:	008b      	lsls	r3, r1, #2
 800460a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800460e:	0082      	lsls	r2, r0, #2
 8004610:	4650      	mov	r0, sl
 8004612:	4659      	mov	r1, fp
 8004614:	f7fc fb48 	bl	8000ca8 <__aeabi_uldivmod>
 8004618:	4602      	mov	r2, r0
 800461a:	460b      	mov	r3, r1
 800461c:	4b0e      	ldr	r3, [pc, #56]	; (8004658 <UART_SetConfig+0x38c>)
 800461e:	fba3 1302 	umull	r1, r3, r3, r2
 8004622:	095b      	lsrs	r3, r3, #5
 8004624:	2164      	movs	r1, #100	; 0x64
 8004626:	fb01 f303 	mul.w	r3, r1, r3
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	011b      	lsls	r3, r3, #4
 800462e:	3332      	adds	r3, #50	; 0x32
 8004630:	4a09      	ldr	r2, [pc, #36]	; (8004658 <UART_SetConfig+0x38c>)
 8004632:	fba2 2303 	umull	r2, r3, r2, r3
 8004636:	095b      	lsrs	r3, r3, #5
 8004638:	f003 020f 	and.w	r2, r3, #15
 800463c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4432      	add	r2, r6
 8004642:	609a      	str	r2, [r3, #8]
}
 8004644:	bf00      	nop
 8004646:	377c      	adds	r7, #124	; 0x7c
 8004648:	46bd      	mov	sp, r7
 800464a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800464e:	bf00      	nop
 8004650:	40011000 	.word	0x40011000
 8004654:	40011400 	.word	0x40011400
 8004658:	51eb851f 	.word	0x51eb851f

0800465c <__errno>:
 800465c:	4b01      	ldr	r3, [pc, #4]	; (8004664 <__errno+0x8>)
 800465e:	6818      	ldr	r0, [r3, #0]
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	2000033c 	.word	0x2000033c

08004668 <__libc_init_array>:
 8004668:	b570      	push	{r4, r5, r6, lr}
 800466a:	4d0d      	ldr	r5, [pc, #52]	; (80046a0 <__libc_init_array+0x38>)
 800466c:	4c0d      	ldr	r4, [pc, #52]	; (80046a4 <__libc_init_array+0x3c>)
 800466e:	1b64      	subs	r4, r4, r5
 8004670:	10a4      	asrs	r4, r4, #2
 8004672:	2600      	movs	r6, #0
 8004674:	42a6      	cmp	r6, r4
 8004676:	d109      	bne.n	800468c <__libc_init_array+0x24>
 8004678:	4d0b      	ldr	r5, [pc, #44]	; (80046a8 <__libc_init_array+0x40>)
 800467a:	4c0c      	ldr	r4, [pc, #48]	; (80046ac <__libc_init_array+0x44>)
 800467c:	f005 fc76 	bl	8009f6c <_init>
 8004680:	1b64      	subs	r4, r4, r5
 8004682:	10a4      	asrs	r4, r4, #2
 8004684:	2600      	movs	r6, #0
 8004686:	42a6      	cmp	r6, r4
 8004688:	d105      	bne.n	8004696 <__libc_init_array+0x2e>
 800468a:	bd70      	pop	{r4, r5, r6, pc}
 800468c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004690:	4798      	blx	r3
 8004692:	3601      	adds	r6, #1
 8004694:	e7ee      	b.n	8004674 <__libc_init_array+0xc>
 8004696:	f855 3b04 	ldr.w	r3, [r5], #4
 800469a:	4798      	blx	r3
 800469c:	3601      	adds	r6, #1
 800469e:	e7f2      	b.n	8004686 <__libc_init_array+0x1e>
 80046a0:	0800a530 	.word	0x0800a530
 80046a4:	0800a530 	.word	0x0800a530
 80046a8:	0800a530 	.word	0x0800a530
 80046ac:	0800a534 	.word	0x0800a534

080046b0 <memcpy>:
 80046b0:	440a      	add	r2, r1
 80046b2:	4291      	cmp	r1, r2
 80046b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80046b8:	d100      	bne.n	80046bc <memcpy+0xc>
 80046ba:	4770      	bx	lr
 80046bc:	b510      	push	{r4, lr}
 80046be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046c6:	4291      	cmp	r1, r2
 80046c8:	d1f9      	bne.n	80046be <memcpy+0xe>
 80046ca:	bd10      	pop	{r4, pc}

080046cc <memset>:
 80046cc:	4402      	add	r2, r0
 80046ce:	4603      	mov	r3, r0
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d100      	bne.n	80046d6 <memset+0xa>
 80046d4:	4770      	bx	lr
 80046d6:	f803 1b01 	strb.w	r1, [r3], #1
 80046da:	e7f9      	b.n	80046d0 <memset+0x4>

080046dc <__cvt>:
 80046dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046e0:	ec55 4b10 	vmov	r4, r5, d0
 80046e4:	2d00      	cmp	r5, #0
 80046e6:	460e      	mov	r6, r1
 80046e8:	4619      	mov	r1, r3
 80046ea:	462b      	mov	r3, r5
 80046ec:	bfbb      	ittet	lt
 80046ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80046f2:	461d      	movlt	r5, r3
 80046f4:	2300      	movge	r3, #0
 80046f6:	232d      	movlt	r3, #45	; 0x2d
 80046f8:	700b      	strb	r3, [r1, #0]
 80046fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004700:	4691      	mov	r9, r2
 8004702:	f023 0820 	bic.w	r8, r3, #32
 8004706:	bfbc      	itt	lt
 8004708:	4622      	movlt	r2, r4
 800470a:	4614      	movlt	r4, r2
 800470c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004710:	d005      	beq.n	800471e <__cvt+0x42>
 8004712:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004716:	d100      	bne.n	800471a <__cvt+0x3e>
 8004718:	3601      	adds	r6, #1
 800471a:	2102      	movs	r1, #2
 800471c:	e000      	b.n	8004720 <__cvt+0x44>
 800471e:	2103      	movs	r1, #3
 8004720:	ab03      	add	r3, sp, #12
 8004722:	9301      	str	r3, [sp, #4]
 8004724:	ab02      	add	r3, sp, #8
 8004726:	9300      	str	r3, [sp, #0]
 8004728:	ec45 4b10 	vmov	d0, r4, r5
 800472c:	4653      	mov	r3, sl
 800472e:	4632      	mov	r2, r6
 8004730:	f001 ff1e 	bl	8006570 <_dtoa_r>
 8004734:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004738:	4607      	mov	r7, r0
 800473a:	d102      	bne.n	8004742 <__cvt+0x66>
 800473c:	f019 0f01 	tst.w	r9, #1
 8004740:	d022      	beq.n	8004788 <__cvt+0xac>
 8004742:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004746:	eb07 0906 	add.w	r9, r7, r6
 800474a:	d110      	bne.n	800476e <__cvt+0x92>
 800474c:	783b      	ldrb	r3, [r7, #0]
 800474e:	2b30      	cmp	r3, #48	; 0x30
 8004750:	d10a      	bne.n	8004768 <__cvt+0x8c>
 8004752:	2200      	movs	r2, #0
 8004754:	2300      	movs	r3, #0
 8004756:	4620      	mov	r0, r4
 8004758:	4629      	mov	r1, r5
 800475a:	f7fc f9c5 	bl	8000ae8 <__aeabi_dcmpeq>
 800475e:	b918      	cbnz	r0, 8004768 <__cvt+0x8c>
 8004760:	f1c6 0601 	rsb	r6, r6, #1
 8004764:	f8ca 6000 	str.w	r6, [sl]
 8004768:	f8da 3000 	ldr.w	r3, [sl]
 800476c:	4499      	add	r9, r3
 800476e:	2200      	movs	r2, #0
 8004770:	2300      	movs	r3, #0
 8004772:	4620      	mov	r0, r4
 8004774:	4629      	mov	r1, r5
 8004776:	f7fc f9b7 	bl	8000ae8 <__aeabi_dcmpeq>
 800477a:	b108      	cbz	r0, 8004780 <__cvt+0xa4>
 800477c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004780:	2230      	movs	r2, #48	; 0x30
 8004782:	9b03      	ldr	r3, [sp, #12]
 8004784:	454b      	cmp	r3, r9
 8004786:	d307      	bcc.n	8004798 <__cvt+0xbc>
 8004788:	9b03      	ldr	r3, [sp, #12]
 800478a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800478c:	1bdb      	subs	r3, r3, r7
 800478e:	4638      	mov	r0, r7
 8004790:	6013      	str	r3, [r2, #0]
 8004792:	b004      	add	sp, #16
 8004794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004798:	1c59      	adds	r1, r3, #1
 800479a:	9103      	str	r1, [sp, #12]
 800479c:	701a      	strb	r2, [r3, #0]
 800479e:	e7f0      	b.n	8004782 <__cvt+0xa6>

080047a0 <__exponent>:
 80047a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047a2:	4603      	mov	r3, r0
 80047a4:	2900      	cmp	r1, #0
 80047a6:	bfb8      	it	lt
 80047a8:	4249      	neglt	r1, r1
 80047aa:	f803 2b02 	strb.w	r2, [r3], #2
 80047ae:	bfb4      	ite	lt
 80047b0:	222d      	movlt	r2, #45	; 0x2d
 80047b2:	222b      	movge	r2, #43	; 0x2b
 80047b4:	2909      	cmp	r1, #9
 80047b6:	7042      	strb	r2, [r0, #1]
 80047b8:	dd2a      	ble.n	8004810 <__exponent+0x70>
 80047ba:	f10d 0407 	add.w	r4, sp, #7
 80047be:	46a4      	mov	ip, r4
 80047c0:	270a      	movs	r7, #10
 80047c2:	46a6      	mov	lr, r4
 80047c4:	460a      	mov	r2, r1
 80047c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80047ca:	fb07 1516 	mls	r5, r7, r6, r1
 80047ce:	3530      	adds	r5, #48	; 0x30
 80047d0:	2a63      	cmp	r2, #99	; 0x63
 80047d2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80047d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80047da:	4631      	mov	r1, r6
 80047dc:	dcf1      	bgt.n	80047c2 <__exponent+0x22>
 80047de:	3130      	adds	r1, #48	; 0x30
 80047e0:	f1ae 0502 	sub.w	r5, lr, #2
 80047e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80047e8:	1c44      	adds	r4, r0, #1
 80047ea:	4629      	mov	r1, r5
 80047ec:	4561      	cmp	r1, ip
 80047ee:	d30a      	bcc.n	8004806 <__exponent+0x66>
 80047f0:	f10d 0209 	add.w	r2, sp, #9
 80047f4:	eba2 020e 	sub.w	r2, r2, lr
 80047f8:	4565      	cmp	r5, ip
 80047fa:	bf88      	it	hi
 80047fc:	2200      	movhi	r2, #0
 80047fe:	4413      	add	r3, r2
 8004800:	1a18      	subs	r0, r3, r0
 8004802:	b003      	add	sp, #12
 8004804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004806:	f811 2b01 	ldrb.w	r2, [r1], #1
 800480a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800480e:	e7ed      	b.n	80047ec <__exponent+0x4c>
 8004810:	2330      	movs	r3, #48	; 0x30
 8004812:	3130      	adds	r1, #48	; 0x30
 8004814:	7083      	strb	r3, [r0, #2]
 8004816:	70c1      	strb	r1, [r0, #3]
 8004818:	1d03      	adds	r3, r0, #4
 800481a:	e7f1      	b.n	8004800 <__exponent+0x60>

0800481c <_printf_float>:
 800481c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004820:	ed2d 8b02 	vpush	{d8}
 8004824:	b08d      	sub	sp, #52	; 0x34
 8004826:	460c      	mov	r4, r1
 8004828:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800482c:	4616      	mov	r6, r2
 800482e:	461f      	mov	r7, r3
 8004830:	4605      	mov	r5, r0
 8004832:	f003 f9c1 	bl	8007bb8 <_localeconv_r>
 8004836:	f8d0 a000 	ldr.w	sl, [r0]
 800483a:	4650      	mov	r0, sl
 800483c:	f7fb fcd8 	bl	80001f0 <strlen>
 8004840:	2300      	movs	r3, #0
 8004842:	930a      	str	r3, [sp, #40]	; 0x28
 8004844:	6823      	ldr	r3, [r4, #0]
 8004846:	9305      	str	r3, [sp, #20]
 8004848:	f8d8 3000 	ldr.w	r3, [r8]
 800484c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004850:	3307      	adds	r3, #7
 8004852:	f023 0307 	bic.w	r3, r3, #7
 8004856:	f103 0208 	add.w	r2, r3, #8
 800485a:	f8c8 2000 	str.w	r2, [r8]
 800485e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004862:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004866:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800486a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800486e:	9307      	str	r3, [sp, #28]
 8004870:	f8cd 8018 	str.w	r8, [sp, #24]
 8004874:	ee08 0a10 	vmov	s16, r0
 8004878:	4b9f      	ldr	r3, [pc, #636]	; (8004af8 <_printf_float+0x2dc>)
 800487a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800487e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004882:	f7fc f963 	bl	8000b4c <__aeabi_dcmpun>
 8004886:	bb88      	cbnz	r0, 80048ec <_printf_float+0xd0>
 8004888:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800488c:	4b9a      	ldr	r3, [pc, #616]	; (8004af8 <_printf_float+0x2dc>)
 800488e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004892:	f7fc f93d 	bl	8000b10 <__aeabi_dcmple>
 8004896:	bb48      	cbnz	r0, 80048ec <_printf_float+0xd0>
 8004898:	2200      	movs	r2, #0
 800489a:	2300      	movs	r3, #0
 800489c:	4640      	mov	r0, r8
 800489e:	4649      	mov	r1, r9
 80048a0:	f7fc f92c 	bl	8000afc <__aeabi_dcmplt>
 80048a4:	b110      	cbz	r0, 80048ac <_printf_float+0x90>
 80048a6:	232d      	movs	r3, #45	; 0x2d
 80048a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048ac:	4b93      	ldr	r3, [pc, #588]	; (8004afc <_printf_float+0x2e0>)
 80048ae:	4894      	ldr	r0, [pc, #592]	; (8004b00 <_printf_float+0x2e4>)
 80048b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80048b4:	bf94      	ite	ls
 80048b6:	4698      	movls	r8, r3
 80048b8:	4680      	movhi	r8, r0
 80048ba:	2303      	movs	r3, #3
 80048bc:	6123      	str	r3, [r4, #16]
 80048be:	9b05      	ldr	r3, [sp, #20]
 80048c0:	f023 0204 	bic.w	r2, r3, #4
 80048c4:	6022      	str	r2, [r4, #0]
 80048c6:	f04f 0900 	mov.w	r9, #0
 80048ca:	9700      	str	r7, [sp, #0]
 80048cc:	4633      	mov	r3, r6
 80048ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80048d0:	4621      	mov	r1, r4
 80048d2:	4628      	mov	r0, r5
 80048d4:	f000 f9d8 	bl	8004c88 <_printf_common>
 80048d8:	3001      	adds	r0, #1
 80048da:	f040 8090 	bne.w	80049fe <_printf_float+0x1e2>
 80048de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048e2:	b00d      	add	sp, #52	; 0x34
 80048e4:	ecbd 8b02 	vpop	{d8}
 80048e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048ec:	4642      	mov	r2, r8
 80048ee:	464b      	mov	r3, r9
 80048f0:	4640      	mov	r0, r8
 80048f2:	4649      	mov	r1, r9
 80048f4:	f7fc f92a 	bl	8000b4c <__aeabi_dcmpun>
 80048f8:	b140      	cbz	r0, 800490c <_printf_float+0xf0>
 80048fa:	464b      	mov	r3, r9
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	bfbc      	itt	lt
 8004900:	232d      	movlt	r3, #45	; 0x2d
 8004902:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004906:	487f      	ldr	r0, [pc, #508]	; (8004b04 <_printf_float+0x2e8>)
 8004908:	4b7f      	ldr	r3, [pc, #508]	; (8004b08 <_printf_float+0x2ec>)
 800490a:	e7d1      	b.n	80048b0 <_printf_float+0x94>
 800490c:	6863      	ldr	r3, [r4, #4]
 800490e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004912:	9206      	str	r2, [sp, #24]
 8004914:	1c5a      	adds	r2, r3, #1
 8004916:	d13f      	bne.n	8004998 <_printf_float+0x17c>
 8004918:	2306      	movs	r3, #6
 800491a:	6063      	str	r3, [r4, #4]
 800491c:	9b05      	ldr	r3, [sp, #20]
 800491e:	6861      	ldr	r1, [r4, #4]
 8004920:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004924:	2300      	movs	r3, #0
 8004926:	9303      	str	r3, [sp, #12]
 8004928:	ab0a      	add	r3, sp, #40	; 0x28
 800492a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800492e:	ab09      	add	r3, sp, #36	; 0x24
 8004930:	ec49 8b10 	vmov	d0, r8, r9
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	6022      	str	r2, [r4, #0]
 8004938:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800493c:	4628      	mov	r0, r5
 800493e:	f7ff fecd 	bl	80046dc <__cvt>
 8004942:	9b06      	ldr	r3, [sp, #24]
 8004944:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004946:	2b47      	cmp	r3, #71	; 0x47
 8004948:	4680      	mov	r8, r0
 800494a:	d108      	bne.n	800495e <_printf_float+0x142>
 800494c:	1cc8      	adds	r0, r1, #3
 800494e:	db02      	blt.n	8004956 <_printf_float+0x13a>
 8004950:	6863      	ldr	r3, [r4, #4]
 8004952:	4299      	cmp	r1, r3
 8004954:	dd41      	ble.n	80049da <_printf_float+0x1be>
 8004956:	f1ab 0b02 	sub.w	fp, fp, #2
 800495a:	fa5f fb8b 	uxtb.w	fp, fp
 800495e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004962:	d820      	bhi.n	80049a6 <_printf_float+0x18a>
 8004964:	3901      	subs	r1, #1
 8004966:	465a      	mov	r2, fp
 8004968:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800496c:	9109      	str	r1, [sp, #36]	; 0x24
 800496e:	f7ff ff17 	bl	80047a0 <__exponent>
 8004972:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004974:	1813      	adds	r3, r2, r0
 8004976:	2a01      	cmp	r2, #1
 8004978:	4681      	mov	r9, r0
 800497a:	6123      	str	r3, [r4, #16]
 800497c:	dc02      	bgt.n	8004984 <_printf_float+0x168>
 800497e:	6822      	ldr	r2, [r4, #0]
 8004980:	07d2      	lsls	r2, r2, #31
 8004982:	d501      	bpl.n	8004988 <_printf_float+0x16c>
 8004984:	3301      	adds	r3, #1
 8004986:	6123      	str	r3, [r4, #16]
 8004988:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800498c:	2b00      	cmp	r3, #0
 800498e:	d09c      	beq.n	80048ca <_printf_float+0xae>
 8004990:	232d      	movs	r3, #45	; 0x2d
 8004992:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004996:	e798      	b.n	80048ca <_printf_float+0xae>
 8004998:	9a06      	ldr	r2, [sp, #24]
 800499a:	2a47      	cmp	r2, #71	; 0x47
 800499c:	d1be      	bne.n	800491c <_printf_float+0x100>
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1bc      	bne.n	800491c <_printf_float+0x100>
 80049a2:	2301      	movs	r3, #1
 80049a4:	e7b9      	b.n	800491a <_printf_float+0xfe>
 80049a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80049aa:	d118      	bne.n	80049de <_printf_float+0x1c2>
 80049ac:	2900      	cmp	r1, #0
 80049ae:	6863      	ldr	r3, [r4, #4]
 80049b0:	dd0b      	ble.n	80049ca <_printf_float+0x1ae>
 80049b2:	6121      	str	r1, [r4, #16]
 80049b4:	b913      	cbnz	r3, 80049bc <_printf_float+0x1a0>
 80049b6:	6822      	ldr	r2, [r4, #0]
 80049b8:	07d0      	lsls	r0, r2, #31
 80049ba:	d502      	bpl.n	80049c2 <_printf_float+0x1a6>
 80049bc:	3301      	adds	r3, #1
 80049be:	440b      	add	r3, r1
 80049c0:	6123      	str	r3, [r4, #16]
 80049c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80049c4:	f04f 0900 	mov.w	r9, #0
 80049c8:	e7de      	b.n	8004988 <_printf_float+0x16c>
 80049ca:	b913      	cbnz	r3, 80049d2 <_printf_float+0x1b6>
 80049cc:	6822      	ldr	r2, [r4, #0]
 80049ce:	07d2      	lsls	r2, r2, #31
 80049d0:	d501      	bpl.n	80049d6 <_printf_float+0x1ba>
 80049d2:	3302      	adds	r3, #2
 80049d4:	e7f4      	b.n	80049c0 <_printf_float+0x1a4>
 80049d6:	2301      	movs	r3, #1
 80049d8:	e7f2      	b.n	80049c0 <_printf_float+0x1a4>
 80049da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80049de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049e0:	4299      	cmp	r1, r3
 80049e2:	db05      	blt.n	80049f0 <_printf_float+0x1d4>
 80049e4:	6823      	ldr	r3, [r4, #0]
 80049e6:	6121      	str	r1, [r4, #16]
 80049e8:	07d8      	lsls	r0, r3, #31
 80049ea:	d5ea      	bpl.n	80049c2 <_printf_float+0x1a6>
 80049ec:	1c4b      	adds	r3, r1, #1
 80049ee:	e7e7      	b.n	80049c0 <_printf_float+0x1a4>
 80049f0:	2900      	cmp	r1, #0
 80049f2:	bfd4      	ite	le
 80049f4:	f1c1 0202 	rsble	r2, r1, #2
 80049f8:	2201      	movgt	r2, #1
 80049fa:	4413      	add	r3, r2
 80049fc:	e7e0      	b.n	80049c0 <_printf_float+0x1a4>
 80049fe:	6823      	ldr	r3, [r4, #0]
 8004a00:	055a      	lsls	r2, r3, #21
 8004a02:	d407      	bmi.n	8004a14 <_printf_float+0x1f8>
 8004a04:	6923      	ldr	r3, [r4, #16]
 8004a06:	4642      	mov	r2, r8
 8004a08:	4631      	mov	r1, r6
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	47b8      	blx	r7
 8004a0e:	3001      	adds	r0, #1
 8004a10:	d12c      	bne.n	8004a6c <_printf_float+0x250>
 8004a12:	e764      	b.n	80048de <_printf_float+0xc2>
 8004a14:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004a18:	f240 80e0 	bls.w	8004bdc <_printf_float+0x3c0>
 8004a1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a20:	2200      	movs	r2, #0
 8004a22:	2300      	movs	r3, #0
 8004a24:	f7fc f860 	bl	8000ae8 <__aeabi_dcmpeq>
 8004a28:	2800      	cmp	r0, #0
 8004a2a:	d034      	beq.n	8004a96 <_printf_float+0x27a>
 8004a2c:	4a37      	ldr	r2, [pc, #220]	; (8004b0c <_printf_float+0x2f0>)
 8004a2e:	2301      	movs	r3, #1
 8004a30:	4631      	mov	r1, r6
 8004a32:	4628      	mov	r0, r5
 8004a34:	47b8      	blx	r7
 8004a36:	3001      	adds	r0, #1
 8004a38:	f43f af51 	beq.w	80048de <_printf_float+0xc2>
 8004a3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a40:	429a      	cmp	r2, r3
 8004a42:	db02      	blt.n	8004a4a <_printf_float+0x22e>
 8004a44:	6823      	ldr	r3, [r4, #0]
 8004a46:	07d8      	lsls	r0, r3, #31
 8004a48:	d510      	bpl.n	8004a6c <_printf_float+0x250>
 8004a4a:	ee18 3a10 	vmov	r3, s16
 8004a4e:	4652      	mov	r2, sl
 8004a50:	4631      	mov	r1, r6
 8004a52:	4628      	mov	r0, r5
 8004a54:	47b8      	blx	r7
 8004a56:	3001      	adds	r0, #1
 8004a58:	f43f af41 	beq.w	80048de <_printf_float+0xc2>
 8004a5c:	f04f 0800 	mov.w	r8, #0
 8004a60:	f104 091a 	add.w	r9, r4, #26
 8004a64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a66:	3b01      	subs	r3, #1
 8004a68:	4543      	cmp	r3, r8
 8004a6a:	dc09      	bgt.n	8004a80 <_printf_float+0x264>
 8004a6c:	6823      	ldr	r3, [r4, #0]
 8004a6e:	079b      	lsls	r3, r3, #30
 8004a70:	f100 8105 	bmi.w	8004c7e <_printf_float+0x462>
 8004a74:	68e0      	ldr	r0, [r4, #12]
 8004a76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a78:	4298      	cmp	r0, r3
 8004a7a:	bfb8      	it	lt
 8004a7c:	4618      	movlt	r0, r3
 8004a7e:	e730      	b.n	80048e2 <_printf_float+0xc6>
 8004a80:	2301      	movs	r3, #1
 8004a82:	464a      	mov	r2, r9
 8004a84:	4631      	mov	r1, r6
 8004a86:	4628      	mov	r0, r5
 8004a88:	47b8      	blx	r7
 8004a8a:	3001      	adds	r0, #1
 8004a8c:	f43f af27 	beq.w	80048de <_printf_float+0xc2>
 8004a90:	f108 0801 	add.w	r8, r8, #1
 8004a94:	e7e6      	b.n	8004a64 <_printf_float+0x248>
 8004a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	dc39      	bgt.n	8004b10 <_printf_float+0x2f4>
 8004a9c:	4a1b      	ldr	r2, [pc, #108]	; (8004b0c <_printf_float+0x2f0>)
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	4631      	mov	r1, r6
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	47b8      	blx	r7
 8004aa6:	3001      	adds	r0, #1
 8004aa8:	f43f af19 	beq.w	80048de <_printf_float+0xc2>
 8004aac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	d102      	bne.n	8004aba <_printf_float+0x29e>
 8004ab4:	6823      	ldr	r3, [r4, #0]
 8004ab6:	07d9      	lsls	r1, r3, #31
 8004ab8:	d5d8      	bpl.n	8004a6c <_printf_float+0x250>
 8004aba:	ee18 3a10 	vmov	r3, s16
 8004abe:	4652      	mov	r2, sl
 8004ac0:	4631      	mov	r1, r6
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	47b8      	blx	r7
 8004ac6:	3001      	adds	r0, #1
 8004ac8:	f43f af09 	beq.w	80048de <_printf_float+0xc2>
 8004acc:	f04f 0900 	mov.w	r9, #0
 8004ad0:	f104 0a1a 	add.w	sl, r4, #26
 8004ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ad6:	425b      	negs	r3, r3
 8004ad8:	454b      	cmp	r3, r9
 8004ada:	dc01      	bgt.n	8004ae0 <_printf_float+0x2c4>
 8004adc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ade:	e792      	b.n	8004a06 <_printf_float+0x1ea>
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	4652      	mov	r2, sl
 8004ae4:	4631      	mov	r1, r6
 8004ae6:	4628      	mov	r0, r5
 8004ae8:	47b8      	blx	r7
 8004aea:	3001      	adds	r0, #1
 8004aec:	f43f aef7 	beq.w	80048de <_printf_float+0xc2>
 8004af0:	f109 0901 	add.w	r9, r9, #1
 8004af4:	e7ee      	b.n	8004ad4 <_printf_float+0x2b8>
 8004af6:	bf00      	nop
 8004af8:	7fefffff 	.word	0x7fefffff
 8004afc:	0800a030 	.word	0x0800a030
 8004b00:	0800a034 	.word	0x0800a034
 8004b04:	0800a03c 	.word	0x0800a03c
 8004b08:	0800a038 	.word	0x0800a038
 8004b0c:	0800a040 	.word	0x0800a040
 8004b10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b14:	429a      	cmp	r2, r3
 8004b16:	bfa8      	it	ge
 8004b18:	461a      	movge	r2, r3
 8004b1a:	2a00      	cmp	r2, #0
 8004b1c:	4691      	mov	r9, r2
 8004b1e:	dc37      	bgt.n	8004b90 <_printf_float+0x374>
 8004b20:	f04f 0b00 	mov.w	fp, #0
 8004b24:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b28:	f104 021a 	add.w	r2, r4, #26
 8004b2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b2e:	9305      	str	r3, [sp, #20]
 8004b30:	eba3 0309 	sub.w	r3, r3, r9
 8004b34:	455b      	cmp	r3, fp
 8004b36:	dc33      	bgt.n	8004ba0 <_printf_float+0x384>
 8004b38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	db3b      	blt.n	8004bb8 <_printf_float+0x39c>
 8004b40:	6823      	ldr	r3, [r4, #0]
 8004b42:	07da      	lsls	r2, r3, #31
 8004b44:	d438      	bmi.n	8004bb8 <_printf_float+0x39c>
 8004b46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b48:	9b05      	ldr	r3, [sp, #20]
 8004b4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	eba2 0901 	sub.w	r9, r2, r1
 8004b52:	4599      	cmp	r9, r3
 8004b54:	bfa8      	it	ge
 8004b56:	4699      	movge	r9, r3
 8004b58:	f1b9 0f00 	cmp.w	r9, #0
 8004b5c:	dc35      	bgt.n	8004bca <_printf_float+0x3ae>
 8004b5e:	f04f 0800 	mov.w	r8, #0
 8004b62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b66:	f104 0a1a 	add.w	sl, r4, #26
 8004b6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b6e:	1a9b      	subs	r3, r3, r2
 8004b70:	eba3 0309 	sub.w	r3, r3, r9
 8004b74:	4543      	cmp	r3, r8
 8004b76:	f77f af79 	ble.w	8004a6c <_printf_float+0x250>
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	4652      	mov	r2, sl
 8004b7e:	4631      	mov	r1, r6
 8004b80:	4628      	mov	r0, r5
 8004b82:	47b8      	blx	r7
 8004b84:	3001      	adds	r0, #1
 8004b86:	f43f aeaa 	beq.w	80048de <_printf_float+0xc2>
 8004b8a:	f108 0801 	add.w	r8, r8, #1
 8004b8e:	e7ec      	b.n	8004b6a <_printf_float+0x34e>
 8004b90:	4613      	mov	r3, r2
 8004b92:	4631      	mov	r1, r6
 8004b94:	4642      	mov	r2, r8
 8004b96:	4628      	mov	r0, r5
 8004b98:	47b8      	blx	r7
 8004b9a:	3001      	adds	r0, #1
 8004b9c:	d1c0      	bne.n	8004b20 <_printf_float+0x304>
 8004b9e:	e69e      	b.n	80048de <_printf_float+0xc2>
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	4631      	mov	r1, r6
 8004ba4:	4628      	mov	r0, r5
 8004ba6:	9205      	str	r2, [sp, #20]
 8004ba8:	47b8      	blx	r7
 8004baa:	3001      	adds	r0, #1
 8004bac:	f43f ae97 	beq.w	80048de <_printf_float+0xc2>
 8004bb0:	9a05      	ldr	r2, [sp, #20]
 8004bb2:	f10b 0b01 	add.w	fp, fp, #1
 8004bb6:	e7b9      	b.n	8004b2c <_printf_float+0x310>
 8004bb8:	ee18 3a10 	vmov	r3, s16
 8004bbc:	4652      	mov	r2, sl
 8004bbe:	4631      	mov	r1, r6
 8004bc0:	4628      	mov	r0, r5
 8004bc2:	47b8      	blx	r7
 8004bc4:	3001      	adds	r0, #1
 8004bc6:	d1be      	bne.n	8004b46 <_printf_float+0x32a>
 8004bc8:	e689      	b.n	80048de <_printf_float+0xc2>
 8004bca:	9a05      	ldr	r2, [sp, #20]
 8004bcc:	464b      	mov	r3, r9
 8004bce:	4442      	add	r2, r8
 8004bd0:	4631      	mov	r1, r6
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	47b8      	blx	r7
 8004bd6:	3001      	adds	r0, #1
 8004bd8:	d1c1      	bne.n	8004b5e <_printf_float+0x342>
 8004bda:	e680      	b.n	80048de <_printf_float+0xc2>
 8004bdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004bde:	2a01      	cmp	r2, #1
 8004be0:	dc01      	bgt.n	8004be6 <_printf_float+0x3ca>
 8004be2:	07db      	lsls	r3, r3, #31
 8004be4:	d538      	bpl.n	8004c58 <_printf_float+0x43c>
 8004be6:	2301      	movs	r3, #1
 8004be8:	4642      	mov	r2, r8
 8004bea:	4631      	mov	r1, r6
 8004bec:	4628      	mov	r0, r5
 8004bee:	47b8      	blx	r7
 8004bf0:	3001      	adds	r0, #1
 8004bf2:	f43f ae74 	beq.w	80048de <_printf_float+0xc2>
 8004bf6:	ee18 3a10 	vmov	r3, s16
 8004bfa:	4652      	mov	r2, sl
 8004bfc:	4631      	mov	r1, r6
 8004bfe:	4628      	mov	r0, r5
 8004c00:	47b8      	blx	r7
 8004c02:	3001      	adds	r0, #1
 8004c04:	f43f ae6b 	beq.w	80048de <_printf_float+0xc2>
 8004c08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	2300      	movs	r3, #0
 8004c10:	f7fb ff6a 	bl	8000ae8 <__aeabi_dcmpeq>
 8004c14:	b9d8      	cbnz	r0, 8004c4e <_printf_float+0x432>
 8004c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c18:	f108 0201 	add.w	r2, r8, #1
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	4631      	mov	r1, r6
 8004c20:	4628      	mov	r0, r5
 8004c22:	47b8      	blx	r7
 8004c24:	3001      	adds	r0, #1
 8004c26:	d10e      	bne.n	8004c46 <_printf_float+0x42a>
 8004c28:	e659      	b.n	80048de <_printf_float+0xc2>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	4652      	mov	r2, sl
 8004c2e:	4631      	mov	r1, r6
 8004c30:	4628      	mov	r0, r5
 8004c32:	47b8      	blx	r7
 8004c34:	3001      	adds	r0, #1
 8004c36:	f43f ae52 	beq.w	80048de <_printf_float+0xc2>
 8004c3a:	f108 0801 	add.w	r8, r8, #1
 8004c3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c40:	3b01      	subs	r3, #1
 8004c42:	4543      	cmp	r3, r8
 8004c44:	dcf1      	bgt.n	8004c2a <_printf_float+0x40e>
 8004c46:	464b      	mov	r3, r9
 8004c48:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004c4c:	e6dc      	b.n	8004a08 <_printf_float+0x1ec>
 8004c4e:	f04f 0800 	mov.w	r8, #0
 8004c52:	f104 0a1a 	add.w	sl, r4, #26
 8004c56:	e7f2      	b.n	8004c3e <_printf_float+0x422>
 8004c58:	2301      	movs	r3, #1
 8004c5a:	4642      	mov	r2, r8
 8004c5c:	e7df      	b.n	8004c1e <_printf_float+0x402>
 8004c5e:	2301      	movs	r3, #1
 8004c60:	464a      	mov	r2, r9
 8004c62:	4631      	mov	r1, r6
 8004c64:	4628      	mov	r0, r5
 8004c66:	47b8      	blx	r7
 8004c68:	3001      	adds	r0, #1
 8004c6a:	f43f ae38 	beq.w	80048de <_printf_float+0xc2>
 8004c6e:	f108 0801 	add.w	r8, r8, #1
 8004c72:	68e3      	ldr	r3, [r4, #12]
 8004c74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c76:	1a5b      	subs	r3, r3, r1
 8004c78:	4543      	cmp	r3, r8
 8004c7a:	dcf0      	bgt.n	8004c5e <_printf_float+0x442>
 8004c7c:	e6fa      	b.n	8004a74 <_printf_float+0x258>
 8004c7e:	f04f 0800 	mov.w	r8, #0
 8004c82:	f104 0919 	add.w	r9, r4, #25
 8004c86:	e7f4      	b.n	8004c72 <_printf_float+0x456>

08004c88 <_printf_common>:
 8004c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c8c:	4616      	mov	r6, r2
 8004c8e:	4699      	mov	r9, r3
 8004c90:	688a      	ldr	r2, [r1, #8]
 8004c92:	690b      	ldr	r3, [r1, #16]
 8004c94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	bfb8      	it	lt
 8004c9c:	4613      	movlt	r3, r2
 8004c9e:	6033      	str	r3, [r6, #0]
 8004ca0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ca4:	4607      	mov	r7, r0
 8004ca6:	460c      	mov	r4, r1
 8004ca8:	b10a      	cbz	r2, 8004cae <_printf_common+0x26>
 8004caa:	3301      	adds	r3, #1
 8004cac:	6033      	str	r3, [r6, #0]
 8004cae:	6823      	ldr	r3, [r4, #0]
 8004cb0:	0699      	lsls	r1, r3, #26
 8004cb2:	bf42      	ittt	mi
 8004cb4:	6833      	ldrmi	r3, [r6, #0]
 8004cb6:	3302      	addmi	r3, #2
 8004cb8:	6033      	strmi	r3, [r6, #0]
 8004cba:	6825      	ldr	r5, [r4, #0]
 8004cbc:	f015 0506 	ands.w	r5, r5, #6
 8004cc0:	d106      	bne.n	8004cd0 <_printf_common+0x48>
 8004cc2:	f104 0a19 	add.w	sl, r4, #25
 8004cc6:	68e3      	ldr	r3, [r4, #12]
 8004cc8:	6832      	ldr	r2, [r6, #0]
 8004cca:	1a9b      	subs	r3, r3, r2
 8004ccc:	42ab      	cmp	r3, r5
 8004cce:	dc26      	bgt.n	8004d1e <_printf_common+0x96>
 8004cd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004cd4:	1e13      	subs	r3, r2, #0
 8004cd6:	6822      	ldr	r2, [r4, #0]
 8004cd8:	bf18      	it	ne
 8004cda:	2301      	movne	r3, #1
 8004cdc:	0692      	lsls	r2, r2, #26
 8004cde:	d42b      	bmi.n	8004d38 <_printf_common+0xb0>
 8004ce0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ce4:	4649      	mov	r1, r9
 8004ce6:	4638      	mov	r0, r7
 8004ce8:	47c0      	blx	r8
 8004cea:	3001      	adds	r0, #1
 8004cec:	d01e      	beq.n	8004d2c <_printf_common+0xa4>
 8004cee:	6823      	ldr	r3, [r4, #0]
 8004cf0:	68e5      	ldr	r5, [r4, #12]
 8004cf2:	6832      	ldr	r2, [r6, #0]
 8004cf4:	f003 0306 	and.w	r3, r3, #6
 8004cf8:	2b04      	cmp	r3, #4
 8004cfa:	bf08      	it	eq
 8004cfc:	1aad      	subeq	r5, r5, r2
 8004cfe:	68a3      	ldr	r3, [r4, #8]
 8004d00:	6922      	ldr	r2, [r4, #16]
 8004d02:	bf0c      	ite	eq
 8004d04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d08:	2500      	movne	r5, #0
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	bfc4      	itt	gt
 8004d0e:	1a9b      	subgt	r3, r3, r2
 8004d10:	18ed      	addgt	r5, r5, r3
 8004d12:	2600      	movs	r6, #0
 8004d14:	341a      	adds	r4, #26
 8004d16:	42b5      	cmp	r5, r6
 8004d18:	d11a      	bne.n	8004d50 <_printf_common+0xc8>
 8004d1a:	2000      	movs	r0, #0
 8004d1c:	e008      	b.n	8004d30 <_printf_common+0xa8>
 8004d1e:	2301      	movs	r3, #1
 8004d20:	4652      	mov	r2, sl
 8004d22:	4649      	mov	r1, r9
 8004d24:	4638      	mov	r0, r7
 8004d26:	47c0      	blx	r8
 8004d28:	3001      	adds	r0, #1
 8004d2a:	d103      	bne.n	8004d34 <_printf_common+0xac>
 8004d2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d34:	3501      	adds	r5, #1
 8004d36:	e7c6      	b.n	8004cc6 <_printf_common+0x3e>
 8004d38:	18e1      	adds	r1, r4, r3
 8004d3a:	1c5a      	adds	r2, r3, #1
 8004d3c:	2030      	movs	r0, #48	; 0x30
 8004d3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d42:	4422      	add	r2, r4
 8004d44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d4c:	3302      	adds	r3, #2
 8004d4e:	e7c7      	b.n	8004ce0 <_printf_common+0x58>
 8004d50:	2301      	movs	r3, #1
 8004d52:	4622      	mov	r2, r4
 8004d54:	4649      	mov	r1, r9
 8004d56:	4638      	mov	r0, r7
 8004d58:	47c0      	blx	r8
 8004d5a:	3001      	adds	r0, #1
 8004d5c:	d0e6      	beq.n	8004d2c <_printf_common+0xa4>
 8004d5e:	3601      	adds	r6, #1
 8004d60:	e7d9      	b.n	8004d16 <_printf_common+0x8e>
	...

08004d64 <_printf_i>:
 8004d64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d68:	460c      	mov	r4, r1
 8004d6a:	4691      	mov	r9, r2
 8004d6c:	7e27      	ldrb	r7, [r4, #24]
 8004d6e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004d70:	2f78      	cmp	r7, #120	; 0x78
 8004d72:	4680      	mov	r8, r0
 8004d74:	469a      	mov	sl, r3
 8004d76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d7a:	d807      	bhi.n	8004d8c <_printf_i+0x28>
 8004d7c:	2f62      	cmp	r7, #98	; 0x62
 8004d7e:	d80a      	bhi.n	8004d96 <_printf_i+0x32>
 8004d80:	2f00      	cmp	r7, #0
 8004d82:	f000 80d8 	beq.w	8004f36 <_printf_i+0x1d2>
 8004d86:	2f58      	cmp	r7, #88	; 0x58
 8004d88:	f000 80a3 	beq.w	8004ed2 <_printf_i+0x16e>
 8004d8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004d90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d94:	e03a      	b.n	8004e0c <_printf_i+0xa8>
 8004d96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d9a:	2b15      	cmp	r3, #21
 8004d9c:	d8f6      	bhi.n	8004d8c <_printf_i+0x28>
 8004d9e:	a001      	add	r0, pc, #4	; (adr r0, 8004da4 <_printf_i+0x40>)
 8004da0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004da4:	08004dfd 	.word	0x08004dfd
 8004da8:	08004e11 	.word	0x08004e11
 8004dac:	08004d8d 	.word	0x08004d8d
 8004db0:	08004d8d 	.word	0x08004d8d
 8004db4:	08004d8d 	.word	0x08004d8d
 8004db8:	08004d8d 	.word	0x08004d8d
 8004dbc:	08004e11 	.word	0x08004e11
 8004dc0:	08004d8d 	.word	0x08004d8d
 8004dc4:	08004d8d 	.word	0x08004d8d
 8004dc8:	08004d8d 	.word	0x08004d8d
 8004dcc:	08004d8d 	.word	0x08004d8d
 8004dd0:	08004f1d 	.word	0x08004f1d
 8004dd4:	08004e41 	.word	0x08004e41
 8004dd8:	08004eff 	.word	0x08004eff
 8004ddc:	08004d8d 	.word	0x08004d8d
 8004de0:	08004d8d 	.word	0x08004d8d
 8004de4:	08004f3f 	.word	0x08004f3f
 8004de8:	08004d8d 	.word	0x08004d8d
 8004dec:	08004e41 	.word	0x08004e41
 8004df0:	08004d8d 	.word	0x08004d8d
 8004df4:	08004d8d 	.word	0x08004d8d
 8004df8:	08004f07 	.word	0x08004f07
 8004dfc:	680b      	ldr	r3, [r1, #0]
 8004dfe:	1d1a      	adds	r2, r3, #4
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	600a      	str	r2, [r1, #0]
 8004e04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e0a3      	b.n	8004f58 <_printf_i+0x1f4>
 8004e10:	6825      	ldr	r5, [r4, #0]
 8004e12:	6808      	ldr	r0, [r1, #0]
 8004e14:	062e      	lsls	r6, r5, #24
 8004e16:	f100 0304 	add.w	r3, r0, #4
 8004e1a:	d50a      	bpl.n	8004e32 <_printf_i+0xce>
 8004e1c:	6805      	ldr	r5, [r0, #0]
 8004e1e:	600b      	str	r3, [r1, #0]
 8004e20:	2d00      	cmp	r5, #0
 8004e22:	da03      	bge.n	8004e2c <_printf_i+0xc8>
 8004e24:	232d      	movs	r3, #45	; 0x2d
 8004e26:	426d      	negs	r5, r5
 8004e28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e2c:	485e      	ldr	r0, [pc, #376]	; (8004fa8 <_printf_i+0x244>)
 8004e2e:	230a      	movs	r3, #10
 8004e30:	e019      	b.n	8004e66 <_printf_i+0x102>
 8004e32:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004e36:	6805      	ldr	r5, [r0, #0]
 8004e38:	600b      	str	r3, [r1, #0]
 8004e3a:	bf18      	it	ne
 8004e3c:	b22d      	sxthne	r5, r5
 8004e3e:	e7ef      	b.n	8004e20 <_printf_i+0xbc>
 8004e40:	680b      	ldr	r3, [r1, #0]
 8004e42:	6825      	ldr	r5, [r4, #0]
 8004e44:	1d18      	adds	r0, r3, #4
 8004e46:	6008      	str	r0, [r1, #0]
 8004e48:	0628      	lsls	r0, r5, #24
 8004e4a:	d501      	bpl.n	8004e50 <_printf_i+0xec>
 8004e4c:	681d      	ldr	r5, [r3, #0]
 8004e4e:	e002      	b.n	8004e56 <_printf_i+0xf2>
 8004e50:	0669      	lsls	r1, r5, #25
 8004e52:	d5fb      	bpl.n	8004e4c <_printf_i+0xe8>
 8004e54:	881d      	ldrh	r5, [r3, #0]
 8004e56:	4854      	ldr	r0, [pc, #336]	; (8004fa8 <_printf_i+0x244>)
 8004e58:	2f6f      	cmp	r7, #111	; 0x6f
 8004e5a:	bf0c      	ite	eq
 8004e5c:	2308      	moveq	r3, #8
 8004e5e:	230a      	movne	r3, #10
 8004e60:	2100      	movs	r1, #0
 8004e62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e66:	6866      	ldr	r6, [r4, #4]
 8004e68:	60a6      	str	r6, [r4, #8]
 8004e6a:	2e00      	cmp	r6, #0
 8004e6c:	bfa2      	ittt	ge
 8004e6e:	6821      	ldrge	r1, [r4, #0]
 8004e70:	f021 0104 	bicge.w	r1, r1, #4
 8004e74:	6021      	strge	r1, [r4, #0]
 8004e76:	b90d      	cbnz	r5, 8004e7c <_printf_i+0x118>
 8004e78:	2e00      	cmp	r6, #0
 8004e7a:	d04d      	beq.n	8004f18 <_printf_i+0x1b4>
 8004e7c:	4616      	mov	r6, r2
 8004e7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e82:	fb03 5711 	mls	r7, r3, r1, r5
 8004e86:	5dc7      	ldrb	r7, [r0, r7]
 8004e88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e8c:	462f      	mov	r7, r5
 8004e8e:	42bb      	cmp	r3, r7
 8004e90:	460d      	mov	r5, r1
 8004e92:	d9f4      	bls.n	8004e7e <_printf_i+0x11a>
 8004e94:	2b08      	cmp	r3, #8
 8004e96:	d10b      	bne.n	8004eb0 <_printf_i+0x14c>
 8004e98:	6823      	ldr	r3, [r4, #0]
 8004e9a:	07df      	lsls	r7, r3, #31
 8004e9c:	d508      	bpl.n	8004eb0 <_printf_i+0x14c>
 8004e9e:	6923      	ldr	r3, [r4, #16]
 8004ea0:	6861      	ldr	r1, [r4, #4]
 8004ea2:	4299      	cmp	r1, r3
 8004ea4:	bfde      	ittt	le
 8004ea6:	2330      	movle	r3, #48	; 0x30
 8004ea8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004eac:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004eb0:	1b92      	subs	r2, r2, r6
 8004eb2:	6122      	str	r2, [r4, #16]
 8004eb4:	f8cd a000 	str.w	sl, [sp]
 8004eb8:	464b      	mov	r3, r9
 8004eba:	aa03      	add	r2, sp, #12
 8004ebc:	4621      	mov	r1, r4
 8004ebe:	4640      	mov	r0, r8
 8004ec0:	f7ff fee2 	bl	8004c88 <_printf_common>
 8004ec4:	3001      	adds	r0, #1
 8004ec6:	d14c      	bne.n	8004f62 <_printf_i+0x1fe>
 8004ec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ecc:	b004      	add	sp, #16
 8004ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ed2:	4835      	ldr	r0, [pc, #212]	; (8004fa8 <_printf_i+0x244>)
 8004ed4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004ed8:	6823      	ldr	r3, [r4, #0]
 8004eda:	680e      	ldr	r6, [r1, #0]
 8004edc:	061f      	lsls	r7, r3, #24
 8004ede:	f856 5b04 	ldr.w	r5, [r6], #4
 8004ee2:	600e      	str	r6, [r1, #0]
 8004ee4:	d514      	bpl.n	8004f10 <_printf_i+0x1ac>
 8004ee6:	07d9      	lsls	r1, r3, #31
 8004ee8:	bf44      	itt	mi
 8004eea:	f043 0320 	orrmi.w	r3, r3, #32
 8004eee:	6023      	strmi	r3, [r4, #0]
 8004ef0:	b91d      	cbnz	r5, 8004efa <_printf_i+0x196>
 8004ef2:	6823      	ldr	r3, [r4, #0]
 8004ef4:	f023 0320 	bic.w	r3, r3, #32
 8004ef8:	6023      	str	r3, [r4, #0]
 8004efa:	2310      	movs	r3, #16
 8004efc:	e7b0      	b.n	8004e60 <_printf_i+0xfc>
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	f043 0320 	orr.w	r3, r3, #32
 8004f04:	6023      	str	r3, [r4, #0]
 8004f06:	2378      	movs	r3, #120	; 0x78
 8004f08:	4828      	ldr	r0, [pc, #160]	; (8004fac <_printf_i+0x248>)
 8004f0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f0e:	e7e3      	b.n	8004ed8 <_printf_i+0x174>
 8004f10:	065e      	lsls	r6, r3, #25
 8004f12:	bf48      	it	mi
 8004f14:	b2ad      	uxthmi	r5, r5
 8004f16:	e7e6      	b.n	8004ee6 <_printf_i+0x182>
 8004f18:	4616      	mov	r6, r2
 8004f1a:	e7bb      	b.n	8004e94 <_printf_i+0x130>
 8004f1c:	680b      	ldr	r3, [r1, #0]
 8004f1e:	6826      	ldr	r6, [r4, #0]
 8004f20:	6960      	ldr	r0, [r4, #20]
 8004f22:	1d1d      	adds	r5, r3, #4
 8004f24:	600d      	str	r5, [r1, #0]
 8004f26:	0635      	lsls	r5, r6, #24
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	d501      	bpl.n	8004f30 <_printf_i+0x1cc>
 8004f2c:	6018      	str	r0, [r3, #0]
 8004f2e:	e002      	b.n	8004f36 <_printf_i+0x1d2>
 8004f30:	0671      	lsls	r1, r6, #25
 8004f32:	d5fb      	bpl.n	8004f2c <_printf_i+0x1c8>
 8004f34:	8018      	strh	r0, [r3, #0]
 8004f36:	2300      	movs	r3, #0
 8004f38:	6123      	str	r3, [r4, #16]
 8004f3a:	4616      	mov	r6, r2
 8004f3c:	e7ba      	b.n	8004eb4 <_printf_i+0x150>
 8004f3e:	680b      	ldr	r3, [r1, #0]
 8004f40:	1d1a      	adds	r2, r3, #4
 8004f42:	600a      	str	r2, [r1, #0]
 8004f44:	681e      	ldr	r6, [r3, #0]
 8004f46:	6862      	ldr	r2, [r4, #4]
 8004f48:	2100      	movs	r1, #0
 8004f4a:	4630      	mov	r0, r6
 8004f4c:	f7fb f958 	bl	8000200 <memchr>
 8004f50:	b108      	cbz	r0, 8004f56 <_printf_i+0x1f2>
 8004f52:	1b80      	subs	r0, r0, r6
 8004f54:	6060      	str	r0, [r4, #4]
 8004f56:	6863      	ldr	r3, [r4, #4]
 8004f58:	6123      	str	r3, [r4, #16]
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f60:	e7a8      	b.n	8004eb4 <_printf_i+0x150>
 8004f62:	6923      	ldr	r3, [r4, #16]
 8004f64:	4632      	mov	r2, r6
 8004f66:	4649      	mov	r1, r9
 8004f68:	4640      	mov	r0, r8
 8004f6a:	47d0      	blx	sl
 8004f6c:	3001      	adds	r0, #1
 8004f6e:	d0ab      	beq.n	8004ec8 <_printf_i+0x164>
 8004f70:	6823      	ldr	r3, [r4, #0]
 8004f72:	079b      	lsls	r3, r3, #30
 8004f74:	d413      	bmi.n	8004f9e <_printf_i+0x23a>
 8004f76:	68e0      	ldr	r0, [r4, #12]
 8004f78:	9b03      	ldr	r3, [sp, #12]
 8004f7a:	4298      	cmp	r0, r3
 8004f7c:	bfb8      	it	lt
 8004f7e:	4618      	movlt	r0, r3
 8004f80:	e7a4      	b.n	8004ecc <_printf_i+0x168>
 8004f82:	2301      	movs	r3, #1
 8004f84:	4632      	mov	r2, r6
 8004f86:	4649      	mov	r1, r9
 8004f88:	4640      	mov	r0, r8
 8004f8a:	47d0      	blx	sl
 8004f8c:	3001      	adds	r0, #1
 8004f8e:	d09b      	beq.n	8004ec8 <_printf_i+0x164>
 8004f90:	3501      	adds	r5, #1
 8004f92:	68e3      	ldr	r3, [r4, #12]
 8004f94:	9903      	ldr	r1, [sp, #12]
 8004f96:	1a5b      	subs	r3, r3, r1
 8004f98:	42ab      	cmp	r3, r5
 8004f9a:	dcf2      	bgt.n	8004f82 <_printf_i+0x21e>
 8004f9c:	e7eb      	b.n	8004f76 <_printf_i+0x212>
 8004f9e:	2500      	movs	r5, #0
 8004fa0:	f104 0619 	add.w	r6, r4, #25
 8004fa4:	e7f5      	b.n	8004f92 <_printf_i+0x22e>
 8004fa6:	bf00      	nop
 8004fa8:	0800a042 	.word	0x0800a042
 8004fac:	0800a053 	.word	0x0800a053

08004fb0 <_scanf_float>:
 8004fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fb4:	b087      	sub	sp, #28
 8004fb6:	4617      	mov	r7, r2
 8004fb8:	9303      	str	r3, [sp, #12]
 8004fba:	688b      	ldr	r3, [r1, #8]
 8004fbc:	1e5a      	subs	r2, r3, #1
 8004fbe:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004fc2:	bf83      	ittte	hi
 8004fc4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004fc8:	195b      	addhi	r3, r3, r5
 8004fca:	9302      	strhi	r3, [sp, #8]
 8004fcc:	2300      	movls	r3, #0
 8004fce:	bf86      	itte	hi
 8004fd0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004fd4:	608b      	strhi	r3, [r1, #8]
 8004fd6:	9302      	strls	r3, [sp, #8]
 8004fd8:	680b      	ldr	r3, [r1, #0]
 8004fda:	468b      	mov	fp, r1
 8004fdc:	2500      	movs	r5, #0
 8004fde:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004fe2:	f84b 3b1c 	str.w	r3, [fp], #28
 8004fe6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004fea:	4680      	mov	r8, r0
 8004fec:	460c      	mov	r4, r1
 8004fee:	465e      	mov	r6, fp
 8004ff0:	46aa      	mov	sl, r5
 8004ff2:	46a9      	mov	r9, r5
 8004ff4:	9501      	str	r5, [sp, #4]
 8004ff6:	68a2      	ldr	r2, [r4, #8]
 8004ff8:	b152      	cbz	r2, 8005010 <_scanf_float+0x60>
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	2b4e      	cmp	r3, #78	; 0x4e
 8005000:	d864      	bhi.n	80050cc <_scanf_float+0x11c>
 8005002:	2b40      	cmp	r3, #64	; 0x40
 8005004:	d83c      	bhi.n	8005080 <_scanf_float+0xd0>
 8005006:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800500a:	b2c8      	uxtb	r0, r1
 800500c:	280e      	cmp	r0, #14
 800500e:	d93a      	bls.n	8005086 <_scanf_float+0xd6>
 8005010:	f1b9 0f00 	cmp.w	r9, #0
 8005014:	d003      	beq.n	800501e <_scanf_float+0x6e>
 8005016:	6823      	ldr	r3, [r4, #0]
 8005018:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800501c:	6023      	str	r3, [r4, #0]
 800501e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005022:	f1ba 0f01 	cmp.w	sl, #1
 8005026:	f200 8113 	bhi.w	8005250 <_scanf_float+0x2a0>
 800502a:	455e      	cmp	r6, fp
 800502c:	f200 8105 	bhi.w	800523a <_scanf_float+0x28a>
 8005030:	2501      	movs	r5, #1
 8005032:	4628      	mov	r0, r5
 8005034:	b007      	add	sp, #28
 8005036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800503a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800503e:	2a0d      	cmp	r2, #13
 8005040:	d8e6      	bhi.n	8005010 <_scanf_float+0x60>
 8005042:	a101      	add	r1, pc, #4	; (adr r1, 8005048 <_scanf_float+0x98>)
 8005044:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005048:	08005187 	.word	0x08005187
 800504c:	08005011 	.word	0x08005011
 8005050:	08005011 	.word	0x08005011
 8005054:	08005011 	.word	0x08005011
 8005058:	080051e7 	.word	0x080051e7
 800505c:	080051bf 	.word	0x080051bf
 8005060:	08005011 	.word	0x08005011
 8005064:	08005011 	.word	0x08005011
 8005068:	08005195 	.word	0x08005195
 800506c:	08005011 	.word	0x08005011
 8005070:	08005011 	.word	0x08005011
 8005074:	08005011 	.word	0x08005011
 8005078:	08005011 	.word	0x08005011
 800507c:	0800514d 	.word	0x0800514d
 8005080:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005084:	e7db      	b.n	800503e <_scanf_float+0x8e>
 8005086:	290e      	cmp	r1, #14
 8005088:	d8c2      	bhi.n	8005010 <_scanf_float+0x60>
 800508a:	a001      	add	r0, pc, #4	; (adr r0, 8005090 <_scanf_float+0xe0>)
 800508c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005090:	0800513f 	.word	0x0800513f
 8005094:	08005011 	.word	0x08005011
 8005098:	0800513f 	.word	0x0800513f
 800509c:	080051d3 	.word	0x080051d3
 80050a0:	08005011 	.word	0x08005011
 80050a4:	080050ed 	.word	0x080050ed
 80050a8:	08005129 	.word	0x08005129
 80050ac:	08005129 	.word	0x08005129
 80050b0:	08005129 	.word	0x08005129
 80050b4:	08005129 	.word	0x08005129
 80050b8:	08005129 	.word	0x08005129
 80050bc:	08005129 	.word	0x08005129
 80050c0:	08005129 	.word	0x08005129
 80050c4:	08005129 	.word	0x08005129
 80050c8:	08005129 	.word	0x08005129
 80050cc:	2b6e      	cmp	r3, #110	; 0x6e
 80050ce:	d809      	bhi.n	80050e4 <_scanf_float+0x134>
 80050d0:	2b60      	cmp	r3, #96	; 0x60
 80050d2:	d8b2      	bhi.n	800503a <_scanf_float+0x8a>
 80050d4:	2b54      	cmp	r3, #84	; 0x54
 80050d6:	d077      	beq.n	80051c8 <_scanf_float+0x218>
 80050d8:	2b59      	cmp	r3, #89	; 0x59
 80050da:	d199      	bne.n	8005010 <_scanf_float+0x60>
 80050dc:	2d07      	cmp	r5, #7
 80050de:	d197      	bne.n	8005010 <_scanf_float+0x60>
 80050e0:	2508      	movs	r5, #8
 80050e2:	e029      	b.n	8005138 <_scanf_float+0x188>
 80050e4:	2b74      	cmp	r3, #116	; 0x74
 80050e6:	d06f      	beq.n	80051c8 <_scanf_float+0x218>
 80050e8:	2b79      	cmp	r3, #121	; 0x79
 80050ea:	e7f6      	b.n	80050da <_scanf_float+0x12a>
 80050ec:	6821      	ldr	r1, [r4, #0]
 80050ee:	05c8      	lsls	r0, r1, #23
 80050f0:	d51a      	bpl.n	8005128 <_scanf_float+0x178>
 80050f2:	9b02      	ldr	r3, [sp, #8]
 80050f4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80050f8:	6021      	str	r1, [r4, #0]
 80050fa:	f109 0901 	add.w	r9, r9, #1
 80050fe:	b11b      	cbz	r3, 8005108 <_scanf_float+0x158>
 8005100:	3b01      	subs	r3, #1
 8005102:	3201      	adds	r2, #1
 8005104:	9302      	str	r3, [sp, #8]
 8005106:	60a2      	str	r2, [r4, #8]
 8005108:	68a3      	ldr	r3, [r4, #8]
 800510a:	3b01      	subs	r3, #1
 800510c:	60a3      	str	r3, [r4, #8]
 800510e:	6923      	ldr	r3, [r4, #16]
 8005110:	3301      	adds	r3, #1
 8005112:	6123      	str	r3, [r4, #16]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	3b01      	subs	r3, #1
 8005118:	2b00      	cmp	r3, #0
 800511a:	607b      	str	r3, [r7, #4]
 800511c:	f340 8084 	ble.w	8005228 <_scanf_float+0x278>
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	3301      	adds	r3, #1
 8005124:	603b      	str	r3, [r7, #0]
 8005126:	e766      	b.n	8004ff6 <_scanf_float+0x46>
 8005128:	eb1a 0f05 	cmn.w	sl, r5
 800512c:	f47f af70 	bne.w	8005010 <_scanf_float+0x60>
 8005130:	6822      	ldr	r2, [r4, #0]
 8005132:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005136:	6022      	str	r2, [r4, #0]
 8005138:	f806 3b01 	strb.w	r3, [r6], #1
 800513c:	e7e4      	b.n	8005108 <_scanf_float+0x158>
 800513e:	6822      	ldr	r2, [r4, #0]
 8005140:	0610      	lsls	r0, r2, #24
 8005142:	f57f af65 	bpl.w	8005010 <_scanf_float+0x60>
 8005146:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800514a:	e7f4      	b.n	8005136 <_scanf_float+0x186>
 800514c:	f1ba 0f00 	cmp.w	sl, #0
 8005150:	d10e      	bne.n	8005170 <_scanf_float+0x1c0>
 8005152:	f1b9 0f00 	cmp.w	r9, #0
 8005156:	d10e      	bne.n	8005176 <_scanf_float+0x1c6>
 8005158:	6822      	ldr	r2, [r4, #0]
 800515a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800515e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005162:	d108      	bne.n	8005176 <_scanf_float+0x1c6>
 8005164:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005168:	6022      	str	r2, [r4, #0]
 800516a:	f04f 0a01 	mov.w	sl, #1
 800516e:	e7e3      	b.n	8005138 <_scanf_float+0x188>
 8005170:	f1ba 0f02 	cmp.w	sl, #2
 8005174:	d055      	beq.n	8005222 <_scanf_float+0x272>
 8005176:	2d01      	cmp	r5, #1
 8005178:	d002      	beq.n	8005180 <_scanf_float+0x1d0>
 800517a:	2d04      	cmp	r5, #4
 800517c:	f47f af48 	bne.w	8005010 <_scanf_float+0x60>
 8005180:	3501      	adds	r5, #1
 8005182:	b2ed      	uxtb	r5, r5
 8005184:	e7d8      	b.n	8005138 <_scanf_float+0x188>
 8005186:	f1ba 0f01 	cmp.w	sl, #1
 800518a:	f47f af41 	bne.w	8005010 <_scanf_float+0x60>
 800518e:	f04f 0a02 	mov.w	sl, #2
 8005192:	e7d1      	b.n	8005138 <_scanf_float+0x188>
 8005194:	b97d      	cbnz	r5, 80051b6 <_scanf_float+0x206>
 8005196:	f1b9 0f00 	cmp.w	r9, #0
 800519a:	f47f af3c 	bne.w	8005016 <_scanf_float+0x66>
 800519e:	6822      	ldr	r2, [r4, #0]
 80051a0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80051a4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80051a8:	f47f af39 	bne.w	800501e <_scanf_float+0x6e>
 80051ac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80051b0:	6022      	str	r2, [r4, #0]
 80051b2:	2501      	movs	r5, #1
 80051b4:	e7c0      	b.n	8005138 <_scanf_float+0x188>
 80051b6:	2d03      	cmp	r5, #3
 80051b8:	d0e2      	beq.n	8005180 <_scanf_float+0x1d0>
 80051ba:	2d05      	cmp	r5, #5
 80051bc:	e7de      	b.n	800517c <_scanf_float+0x1cc>
 80051be:	2d02      	cmp	r5, #2
 80051c0:	f47f af26 	bne.w	8005010 <_scanf_float+0x60>
 80051c4:	2503      	movs	r5, #3
 80051c6:	e7b7      	b.n	8005138 <_scanf_float+0x188>
 80051c8:	2d06      	cmp	r5, #6
 80051ca:	f47f af21 	bne.w	8005010 <_scanf_float+0x60>
 80051ce:	2507      	movs	r5, #7
 80051d0:	e7b2      	b.n	8005138 <_scanf_float+0x188>
 80051d2:	6822      	ldr	r2, [r4, #0]
 80051d4:	0591      	lsls	r1, r2, #22
 80051d6:	f57f af1b 	bpl.w	8005010 <_scanf_float+0x60>
 80051da:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80051de:	6022      	str	r2, [r4, #0]
 80051e0:	f8cd 9004 	str.w	r9, [sp, #4]
 80051e4:	e7a8      	b.n	8005138 <_scanf_float+0x188>
 80051e6:	6822      	ldr	r2, [r4, #0]
 80051e8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80051ec:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80051f0:	d006      	beq.n	8005200 <_scanf_float+0x250>
 80051f2:	0550      	lsls	r0, r2, #21
 80051f4:	f57f af0c 	bpl.w	8005010 <_scanf_float+0x60>
 80051f8:	f1b9 0f00 	cmp.w	r9, #0
 80051fc:	f43f af0f 	beq.w	800501e <_scanf_float+0x6e>
 8005200:	0591      	lsls	r1, r2, #22
 8005202:	bf58      	it	pl
 8005204:	9901      	ldrpl	r1, [sp, #4]
 8005206:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800520a:	bf58      	it	pl
 800520c:	eba9 0101 	subpl.w	r1, r9, r1
 8005210:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005214:	bf58      	it	pl
 8005216:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800521a:	6022      	str	r2, [r4, #0]
 800521c:	f04f 0900 	mov.w	r9, #0
 8005220:	e78a      	b.n	8005138 <_scanf_float+0x188>
 8005222:	f04f 0a03 	mov.w	sl, #3
 8005226:	e787      	b.n	8005138 <_scanf_float+0x188>
 8005228:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800522c:	4639      	mov	r1, r7
 800522e:	4640      	mov	r0, r8
 8005230:	4798      	blx	r3
 8005232:	2800      	cmp	r0, #0
 8005234:	f43f aedf 	beq.w	8004ff6 <_scanf_float+0x46>
 8005238:	e6ea      	b.n	8005010 <_scanf_float+0x60>
 800523a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800523e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005242:	463a      	mov	r2, r7
 8005244:	4640      	mov	r0, r8
 8005246:	4798      	blx	r3
 8005248:	6923      	ldr	r3, [r4, #16]
 800524a:	3b01      	subs	r3, #1
 800524c:	6123      	str	r3, [r4, #16]
 800524e:	e6ec      	b.n	800502a <_scanf_float+0x7a>
 8005250:	1e6b      	subs	r3, r5, #1
 8005252:	2b06      	cmp	r3, #6
 8005254:	d825      	bhi.n	80052a2 <_scanf_float+0x2f2>
 8005256:	2d02      	cmp	r5, #2
 8005258:	d836      	bhi.n	80052c8 <_scanf_float+0x318>
 800525a:	455e      	cmp	r6, fp
 800525c:	f67f aee8 	bls.w	8005030 <_scanf_float+0x80>
 8005260:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005264:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005268:	463a      	mov	r2, r7
 800526a:	4640      	mov	r0, r8
 800526c:	4798      	blx	r3
 800526e:	6923      	ldr	r3, [r4, #16]
 8005270:	3b01      	subs	r3, #1
 8005272:	6123      	str	r3, [r4, #16]
 8005274:	e7f1      	b.n	800525a <_scanf_float+0x2aa>
 8005276:	9802      	ldr	r0, [sp, #8]
 8005278:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800527c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005280:	9002      	str	r0, [sp, #8]
 8005282:	463a      	mov	r2, r7
 8005284:	4640      	mov	r0, r8
 8005286:	4798      	blx	r3
 8005288:	6923      	ldr	r3, [r4, #16]
 800528a:	3b01      	subs	r3, #1
 800528c:	6123      	str	r3, [r4, #16]
 800528e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005292:	fa5f fa8a 	uxtb.w	sl, sl
 8005296:	f1ba 0f02 	cmp.w	sl, #2
 800529a:	d1ec      	bne.n	8005276 <_scanf_float+0x2c6>
 800529c:	3d03      	subs	r5, #3
 800529e:	b2ed      	uxtb	r5, r5
 80052a0:	1b76      	subs	r6, r6, r5
 80052a2:	6823      	ldr	r3, [r4, #0]
 80052a4:	05da      	lsls	r2, r3, #23
 80052a6:	d52f      	bpl.n	8005308 <_scanf_float+0x358>
 80052a8:	055b      	lsls	r3, r3, #21
 80052aa:	d510      	bpl.n	80052ce <_scanf_float+0x31e>
 80052ac:	455e      	cmp	r6, fp
 80052ae:	f67f aebf 	bls.w	8005030 <_scanf_float+0x80>
 80052b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80052b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80052ba:	463a      	mov	r2, r7
 80052bc:	4640      	mov	r0, r8
 80052be:	4798      	blx	r3
 80052c0:	6923      	ldr	r3, [r4, #16]
 80052c2:	3b01      	subs	r3, #1
 80052c4:	6123      	str	r3, [r4, #16]
 80052c6:	e7f1      	b.n	80052ac <_scanf_float+0x2fc>
 80052c8:	46aa      	mov	sl, r5
 80052ca:	9602      	str	r6, [sp, #8]
 80052cc:	e7df      	b.n	800528e <_scanf_float+0x2de>
 80052ce:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80052d2:	6923      	ldr	r3, [r4, #16]
 80052d4:	2965      	cmp	r1, #101	; 0x65
 80052d6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80052da:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80052de:	6123      	str	r3, [r4, #16]
 80052e0:	d00c      	beq.n	80052fc <_scanf_float+0x34c>
 80052e2:	2945      	cmp	r1, #69	; 0x45
 80052e4:	d00a      	beq.n	80052fc <_scanf_float+0x34c>
 80052e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80052ea:	463a      	mov	r2, r7
 80052ec:	4640      	mov	r0, r8
 80052ee:	4798      	blx	r3
 80052f0:	6923      	ldr	r3, [r4, #16]
 80052f2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80052f6:	3b01      	subs	r3, #1
 80052f8:	1eb5      	subs	r5, r6, #2
 80052fa:	6123      	str	r3, [r4, #16]
 80052fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005300:	463a      	mov	r2, r7
 8005302:	4640      	mov	r0, r8
 8005304:	4798      	blx	r3
 8005306:	462e      	mov	r6, r5
 8005308:	6825      	ldr	r5, [r4, #0]
 800530a:	f015 0510 	ands.w	r5, r5, #16
 800530e:	d158      	bne.n	80053c2 <_scanf_float+0x412>
 8005310:	7035      	strb	r5, [r6, #0]
 8005312:	6823      	ldr	r3, [r4, #0]
 8005314:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800531c:	d11c      	bne.n	8005358 <_scanf_float+0x3a8>
 800531e:	9b01      	ldr	r3, [sp, #4]
 8005320:	454b      	cmp	r3, r9
 8005322:	eba3 0209 	sub.w	r2, r3, r9
 8005326:	d124      	bne.n	8005372 <_scanf_float+0x3c2>
 8005328:	2200      	movs	r2, #0
 800532a:	4659      	mov	r1, fp
 800532c:	4640      	mov	r0, r8
 800532e:	f000 ff29 	bl	8006184 <_strtod_r>
 8005332:	9b03      	ldr	r3, [sp, #12]
 8005334:	6821      	ldr	r1, [r4, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f011 0f02 	tst.w	r1, #2
 800533c:	ec57 6b10 	vmov	r6, r7, d0
 8005340:	f103 0204 	add.w	r2, r3, #4
 8005344:	d020      	beq.n	8005388 <_scanf_float+0x3d8>
 8005346:	9903      	ldr	r1, [sp, #12]
 8005348:	600a      	str	r2, [r1, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	e9c3 6700 	strd	r6, r7, [r3]
 8005350:	68e3      	ldr	r3, [r4, #12]
 8005352:	3301      	adds	r3, #1
 8005354:	60e3      	str	r3, [r4, #12]
 8005356:	e66c      	b.n	8005032 <_scanf_float+0x82>
 8005358:	9b04      	ldr	r3, [sp, #16]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d0e4      	beq.n	8005328 <_scanf_float+0x378>
 800535e:	9905      	ldr	r1, [sp, #20]
 8005360:	230a      	movs	r3, #10
 8005362:	462a      	mov	r2, r5
 8005364:	3101      	adds	r1, #1
 8005366:	4640      	mov	r0, r8
 8005368:	f000 ff96 	bl	8006298 <_strtol_r>
 800536c:	9b04      	ldr	r3, [sp, #16]
 800536e:	9e05      	ldr	r6, [sp, #20]
 8005370:	1ac2      	subs	r2, r0, r3
 8005372:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005376:	429e      	cmp	r6, r3
 8005378:	bf28      	it	cs
 800537a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800537e:	4912      	ldr	r1, [pc, #72]	; (80053c8 <_scanf_float+0x418>)
 8005380:	4630      	mov	r0, r6
 8005382:	f000 f8b9 	bl	80054f8 <siprintf>
 8005386:	e7cf      	b.n	8005328 <_scanf_float+0x378>
 8005388:	f011 0f04 	tst.w	r1, #4
 800538c:	9903      	ldr	r1, [sp, #12]
 800538e:	600a      	str	r2, [r1, #0]
 8005390:	d1db      	bne.n	800534a <_scanf_float+0x39a>
 8005392:	f8d3 8000 	ldr.w	r8, [r3]
 8005396:	ee10 2a10 	vmov	r2, s0
 800539a:	ee10 0a10 	vmov	r0, s0
 800539e:	463b      	mov	r3, r7
 80053a0:	4639      	mov	r1, r7
 80053a2:	f7fb fbd3 	bl	8000b4c <__aeabi_dcmpun>
 80053a6:	b128      	cbz	r0, 80053b4 <_scanf_float+0x404>
 80053a8:	4808      	ldr	r0, [pc, #32]	; (80053cc <_scanf_float+0x41c>)
 80053aa:	f000 f89f 	bl	80054ec <nanf>
 80053ae:	ed88 0a00 	vstr	s0, [r8]
 80053b2:	e7cd      	b.n	8005350 <_scanf_float+0x3a0>
 80053b4:	4630      	mov	r0, r6
 80053b6:	4639      	mov	r1, r7
 80053b8:	f7fb fc26 	bl	8000c08 <__aeabi_d2f>
 80053bc:	f8c8 0000 	str.w	r0, [r8]
 80053c0:	e7c6      	b.n	8005350 <_scanf_float+0x3a0>
 80053c2:	2500      	movs	r5, #0
 80053c4:	e635      	b.n	8005032 <_scanf_float+0x82>
 80053c6:	bf00      	nop
 80053c8:	0800a064 	.word	0x0800a064
 80053cc:	0800a0fb 	.word	0x0800a0fb

080053d0 <iprintf>:
 80053d0:	b40f      	push	{r0, r1, r2, r3}
 80053d2:	4b0a      	ldr	r3, [pc, #40]	; (80053fc <iprintf+0x2c>)
 80053d4:	b513      	push	{r0, r1, r4, lr}
 80053d6:	681c      	ldr	r4, [r3, #0]
 80053d8:	b124      	cbz	r4, 80053e4 <iprintf+0x14>
 80053da:	69a3      	ldr	r3, [r4, #24]
 80053dc:	b913      	cbnz	r3, 80053e4 <iprintf+0x14>
 80053de:	4620      	mov	r0, r4
 80053e0:	f001 ffcc 	bl	800737c <__sinit>
 80053e4:	ab05      	add	r3, sp, #20
 80053e6:	9a04      	ldr	r2, [sp, #16]
 80053e8:	68a1      	ldr	r1, [r4, #8]
 80053ea:	9301      	str	r3, [sp, #4]
 80053ec:	4620      	mov	r0, r4
 80053ee:	f003 fb63 	bl	8008ab8 <_vfiprintf_r>
 80053f2:	b002      	add	sp, #8
 80053f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053f8:	b004      	add	sp, #16
 80053fa:	4770      	bx	lr
 80053fc:	2000033c 	.word	0x2000033c

08005400 <_puts_r>:
 8005400:	b570      	push	{r4, r5, r6, lr}
 8005402:	460e      	mov	r6, r1
 8005404:	4605      	mov	r5, r0
 8005406:	b118      	cbz	r0, 8005410 <_puts_r+0x10>
 8005408:	6983      	ldr	r3, [r0, #24]
 800540a:	b90b      	cbnz	r3, 8005410 <_puts_r+0x10>
 800540c:	f001 ffb6 	bl	800737c <__sinit>
 8005410:	69ab      	ldr	r3, [r5, #24]
 8005412:	68ac      	ldr	r4, [r5, #8]
 8005414:	b913      	cbnz	r3, 800541c <_puts_r+0x1c>
 8005416:	4628      	mov	r0, r5
 8005418:	f001 ffb0 	bl	800737c <__sinit>
 800541c:	4b2c      	ldr	r3, [pc, #176]	; (80054d0 <_puts_r+0xd0>)
 800541e:	429c      	cmp	r4, r3
 8005420:	d120      	bne.n	8005464 <_puts_r+0x64>
 8005422:	686c      	ldr	r4, [r5, #4]
 8005424:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005426:	07db      	lsls	r3, r3, #31
 8005428:	d405      	bmi.n	8005436 <_puts_r+0x36>
 800542a:	89a3      	ldrh	r3, [r4, #12]
 800542c:	0598      	lsls	r0, r3, #22
 800542e:	d402      	bmi.n	8005436 <_puts_r+0x36>
 8005430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005432:	f002 fbc6 	bl	8007bc2 <__retarget_lock_acquire_recursive>
 8005436:	89a3      	ldrh	r3, [r4, #12]
 8005438:	0719      	lsls	r1, r3, #28
 800543a:	d51d      	bpl.n	8005478 <_puts_r+0x78>
 800543c:	6923      	ldr	r3, [r4, #16]
 800543e:	b1db      	cbz	r3, 8005478 <_puts_r+0x78>
 8005440:	3e01      	subs	r6, #1
 8005442:	68a3      	ldr	r3, [r4, #8]
 8005444:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005448:	3b01      	subs	r3, #1
 800544a:	60a3      	str	r3, [r4, #8]
 800544c:	bb39      	cbnz	r1, 800549e <_puts_r+0x9e>
 800544e:	2b00      	cmp	r3, #0
 8005450:	da38      	bge.n	80054c4 <_puts_r+0xc4>
 8005452:	4622      	mov	r2, r4
 8005454:	210a      	movs	r1, #10
 8005456:	4628      	mov	r0, r5
 8005458:	f000 ff20 	bl	800629c <__swbuf_r>
 800545c:	3001      	adds	r0, #1
 800545e:	d011      	beq.n	8005484 <_puts_r+0x84>
 8005460:	250a      	movs	r5, #10
 8005462:	e011      	b.n	8005488 <_puts_r+0x88>
 8005464:	4b1b      	ldr	r3, [pc, #108]	; (80054d4 <_puts_r+0xd4>)
 8005466:	429c      	cmp	r4, r3
 8005468:	d101      	bne.n	800546e <_puts_r+0x6e>
 800546a:	68ac      	ldr	r4, [r5, #8]
 800546c:	e7da      	b.n	8005424 <_puts_r+0x24>
 800546e:	4b1a      	ldr	r3, [pc, #104]	; (80054d8 <_puts_r+0xd8>)
 8005470:	429c      	cmp	r4, r3
 8005472:	bf08      	it	eq
 8005474:	68ec      	ldreq	r4, [r5, #12]
 8005476:	e7d5      	b.n	8005424 <_puts_r+0x24>
 8005478:	4621      	mov	r1, r4
 800547a:	4628      	mov	r0, r5
 800547c:	f000 ff60 	bl	8006340 <__swsetup_r>
 8005480:	2800      	cmp	r0, #0
 8005482:	d0dd      	beq.n	8005440 <_puts_r+0x40>
 8005484:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005488:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800548a:	07da      	lsls	r2, r3, #31
 800548c:	d405      	bmi.n	800549a <_puts_r+0x9a>
 800548e:	89a3      	ldrh	r3, [r4, #12]
 8005490:	059b      	lsls	r3, r3, #22
 8005492:	d402      	bmi.n	800549a <_puts_r+0x9a>
 8005494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005496:	f002 fb95 	bl	8007bc4 <__retarget_lock_release_recursive>
 800549a:	4628      	mov	r0, r5
 800549c:	bd70      	pop	{r4, r5, r6, pc}
 800549e:	2b00      	cmp	r3, #0
 80054a0:	da04      	bge.n	80054ac <_puts_r+0xac>
 80054a2:	69a2      	ldr	r2, [r4, #24]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	dc06      	bgt.n	80054b6 <_puts_r+0xb6>
 80054a8:	290a      	cmp	r1, #10
 80054aa:	d004      	beq.n	80054b6 <_puts_r+0xb6>
 80054ac:	6823      	ldr	r3, [r4, #0]
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	6022      	str	r2, [r4, #0]
 80054b2:	7019      	strb	r1, [r3, #0]
 80054b4:	e7c5      	b.n	8005442 <_puts_r+0x42>
 80054b6:	4622      	mov	r2, r4
 80054b8:	4628      	mov	r0, r5
 80054ba:	f000 feef 	bl	800629c <__swbuf_r>
 80054be:	3001      	adds	r0, #1
 80054c0:	d1bf      	bne.n	8005442 <_puts_r+0x42>
 80054c2:	e7df      	b.n	8005484 <_puts_r+0x84>
 80054c4:	6823      	ldr	r3, [r4, #0]
 80054c6:	250a      	movs	r5, #10
 80054c8:	1c5a      	adds	r2, r3, #1
 80054ca:	6022      	str	r2, [r4, #0]
 80054cc:	701d      	strb	r5, [r3, #0]
 80054ce:	e7db      	b.n	8005488 <_puts_r+0x88>
 80054d0:	0800a2b4 	.word	0x0800a2b4
 80054d4:	0800a2d4 	.word	0x0800a2d4
 80054d8:	0800a294 	.word	0x0800a294

080054dc <puts>:
 80054dc:	4b02      	ldr	r3, [pc, #8]	; (80054e8 <puts+0xc>)
 80054de:	4601      	mov	r1, r0
 80054e0:	6818      	ldr	r0, [r3, #0]
 80054e2:	f7ff bf8d 	b.w	8005400 <_puts_r>
 80054e6:	bf00      	nop
 80054e8:	2000033c 	.word	0x2000033c

080054ec <nanf>:
 80054ec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80054f4 <nanf+0x8>
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	7fc00000 	.word	0x7fc00000

080054f8 <siprintf>:
 80054f8:	b40e      	push	{r1, r2, r3}
 80054fa:	b500      	push	{lr}
 80054fc:	b09c      	sub	sp, #112	; 0x70
 80054fe:	ab1d      	add	r3, sp, #116	; 0x74
 8005500:	9002      	str	r0, [sp, #8]
 8005502:	9006      	str	r0, [sp, #24]
 8005504:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005508:	4809      	ldr	r0, [pc, #36]	; (8005530 <siprintf+0x38>)
 800550a:	9107      	str	r1, [sp, #28]
 800550c:	9104      	str	r1, [sp, #16]
 800550e:	4909      	ldr	r1, [pc, #36]	; (8005534 <siprintf+0x3c>)
 8005510:	f853 2b04 	ldr.w	r2, [r3], #4
 8005514:	9105      	str	r1, [sp, #20]
 8005516:	6800      	ldr	r0, [r0, #0]
 8005518:	9301      	str	r3, [sp, #4]
 800551a:	a902      	add	r1, sp, #8
 800551c:	f003 f9a2 	bl	8008864 <_svfiprintf_r>
 8005520:	9b02      	ldr	r3, [sp, #8]
 8005522:	2200      	movs	r2, #0
 8005524:	701a      	strb	r2, [r3, #0]
 8005526:	b01c      	add	sp, #112	; 0x70
 8005528:	f85d eb04 	ldr.w	lr, [sp], #4
 800552c:	b003      	add	sp, #12
 800552e:	4770      	bx	lr
 8005530:	2000033c 	.word	0x2000033c
 8005534:	ffff0208 	.word	0xffff0208

08005538 <sulp>:
 8005538:	b570      	push	{r4, r5, r6, lr}
 800553a:	4604      	mov	r4, r0
 800553c:	460d      	mov	r5, r1
 800553e:	ec45 4b10 	vmov	d0, r4, r5
 8005542:	4616      	mov	r6, r2
 8005544:	f002 ff2a 	bl	800839c <__ulp>
 8005548:	ec51 0b10 	vmov	r0, r1, d0
 800554c:	b17e      	cbz	r6, 800556e <sulp+0x36>
 800554e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005552:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005556:	2b00      	cmp	r3, #0
 8005558:	dd09      	ble.n	800556e <sulp+0x36>
 800555a:	051b      	lsls	r3, r3, #20
 800555c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005560:	2400      	movs	r4, #0
 8005562:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005566:	4622      	mov	r2, r4
 8005568:	462b      	mov	r3, r5
 800556a:	f7fb f855 	bl	8000618 <__aeabi_dmul>
 800556e:	bd70      	pop	{r4, r5, r6, pc}

08005570 <_strtod_l>:
 8005570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005574:	b0a3      	sub	sp, #140	; 0x8c
 8005576:	461f      	mov	r7, r3
 8005578:	2300      	movs	r3, #0
 800557a:	931e      	str	r3, [sp, #120]	; 0x78
 800557c:	4ba4      	ldr	r3, [pc, #656]	; (8005810 <_strtod_l+0x2a0>)
 800557e:	9219      	str	r2, [sp, #100]	; 0x64
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	9307      	str	r3, [sp, #28]
 8005584:	4604      	mov	r4, r0
 8005586:	4618      	mov	r0, r3
 8005588:	4688      	mov	r8, r1
 800558a:	f7fa fe31 	bl	80001f0 <strlen>
 800558e:	f04f 0a00 	mov.w	sl, #0
 8005592:	4605      	mov	r5, r0
 8005594:	f04f 0b00 	mov.w	fp, #0
 8005598:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800559c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800559e:	781a      	ldrb	r2, [r3, #0]
 80055a0:	2a2b      	cmp	r2, #43	; 0x2b
 80055a2:	d04c      	beq.n	800563e <_strtod_l+0xce>
 80055a4:	d839      	bhi.n	800561a <_strtod_l+0xaa>
 80055a6:	2a0d      	cmp	r2, #13
 80055a8:	d832      	bhi.n	8005610 <_strtod_l+0xa0>
 80055aa:	2a08      	cmp	r2, #8
 80055ac:	d832      	bhi.n	8005614 <_strtod_l+0xa4>
 80055ae:	2a00      	cmp	r2, #0
 80055b0:	d03c      	beq.n	800562c <_strtod_l+0xbc>
 80055b2:	2300      	movs	r3, #0
 80055b4:	930e      	str	r3, [sp, #56]	; 0x38
 80055b6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80055b8:	7833      	ldrb	r3, [r6, #0]
 80055ba:	2b30      	cmp	r3, #48	; 0x30
 80055bc:	f040 80b4 	bne.w	8005728 <_strtod_l+0x1b8>
 80055c0:	7873      	ldrb	r3, [r6, #1]
 80055c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80055c6:	2b58      	cmp	r3, #88	; 0x58
 80055c8:	d16c      	bne.n	80056a4 <_strtod_l+0x134>
 80055ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055cc:	9301      	str	r3, [sp, #4]
 80055ce:	ab1e      	add	r3, sp, #120	; 0x78
 80055d0:	9702      	str	r7, [sp, #8]
 80055d2:	9300      	str	r3, [sp, #0]
 80055d4:	4a8f      	ldr	r2, [pc, #572]	; (8005814 <_strtod_l+0x2a4>)
 80055d6:	ab1f      	add	r3, sp, #124	; 0x7c
 80055d8:	a91d      	add	r1, sp, #116	; 0x74
 80055da:	4620      	mov	r0, r4
 80055dc:	f001 ffe4 	bl	80075a8 <__gethex>
 80055e0:	f010 0707 	ands.w	r7, r0, #7
 80055e4:	4605      	mov	r5, r0
 80055e6:	d005      	beq.n	80055f4 <_strtod_l+0x84>
 80055e8:	2f06      	cmp	r7, #6
 80055ea:	d12a      	bne.n	8005642 <_strtod_l+0xd2>
 80055ec:	3601      	adds	r6, #1
 80055ee:	2300      	movs	r3, #0
 80055f0:	961d      	str	r6, [sp, #116]	; 0x74
 80055f2:	930e      	str	r3, [sp, #56]	; 0x38
 80055f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f040 8596 	bne.w	8006128 <_strtod_l+0xbb8>
 80055fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055fe:	b1db      	cbz	r3, 8005638 <_strtod_l+0xc8>
 8005600:	4652      	mov	r2, sl
 8005602:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005606:	ec43 2b10 	vmov	d0, r2, r3
 800560a:	b023      	add	sp, #140	; 0x8c
 800560c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005610:	2a20      	cmp	r2, #32
 8005612:	d1ce      	bne.n	80055b2 <_strtod_l+0x42>
 8005614:	3301      	adds	r3, #1
 8005616:	931d      	str	r3, [sp, #116]	; 0x74
 8005618:	e7c0      	b.n	800559c <_strtod_l+0x2c>
 800561a:	2a2d      	cmp	r2, #45	; 0x2d
 800561c:	d1c9      	bne.n	80055b2 <_strtod_l+0x42>
 800561e:	2201      	movs	r2, #1
 8005620:	920e      	str	r2, [sp, #56]	; 0x38
 8005622:	1c5a      	adds	r2, r3, #1
 8005624:	921d      	str	r2, [sp, #116]	; 0x74
 8005626:	785b      	ldrb	r3, [r3, #1]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1c4      	bne.n	80055b6 <_strtod_l+0x46>
 800562c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800562e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005632:	2b00      	cmp	r3, #0
 8005634:	f040 8576 	bne.w	8006124 <_strtod_l+0xbb4>
 8005638:	4652      	mov	r2, sl
 800563a:	465b      	mov	r3, fp
 800563c:	e7e3      	b.n	8005606 <_strtod_l+0x96>
 800563e:	2200      	movs	r2, #0
 8005640:	e7ee      	b.n	8005620 <_strtod_l+0xb0>
 8005642:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005644:	b13a      	cbz	r2, 8005656 <_strtod_l+0xe6>
 8005646:	2135      	movs	r1, #53	; 0x35
 8005648:	a820      	add	r0, sp, #128	; 0x80
 800564a:	f002 ffb2 	bl	80085b2 <__copybits>
 800564e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005650:	4620      	mov	r0, r4
 8005652:	f002 fb77 	bl	8007d44 <_Bfree>
 8005656:	3f01      	subs	r7, #1
 8005658:	2f05      	cmp	r7, #5
 800565a:	d807      	bhi.n	800566c <_strtod_l+0xfc>
 800565c:	e8df f007 	tbb	[pc, r7]
 8005660:	1d180b0e 	.word	0x1d180b0e
 8005664:	030e      	.short	0x030e
 8005666:	f04f 0b00 	mov.w	fp, #0
 800566a:	46da      	mov	sl, fp
 800566c:	0728      	lsls	r0, r5, #28
 800566e:	d5c1      	bpl.n	80055f4 <_strtod_l+0x84>
 8005670:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005674:	e7be      	b.n	80055f4 <_strtod_l+0x84>
 8005676:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800567a:	e7f7      	b.n	800566c <_strtod_l+0xfc>
 800567c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8005680:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005682:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005686:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800568a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800568e:	e7ed      	b.n	800566c <_strtod_l+0xfc>
 8005690:	f8df b184 	ldr.w	fp, [pc, #388]	; 8005818 <_strtod_l+0x2a8>
 8005694:	f04f 0a00 	mov.w	sl, #0
 8005698:	e7e8      	b.n	800566c <_strtod_l+0xfc>
 800569a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800569e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80056a2:	e7e3      	b.n	800566c <_strtod_l+0xfc>
 80056a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80056a6:	1c5a      	adds	r2, r3, #1
 80056a8:	921d      	str	r2, [sp, #116]	; 0x74
 80056aa:	785b      	ldrb	r3, [r3, #1]
 80056ac:	2b30      	cmp	r3, #48	; 0x30
 80056ae:	d0f9      	beq.n	80056a4 <_strtod_l+0x134>
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d09f      	beq.n	80055f4 <_strtod_l+0x84>
 80056b4:	2301      	movs	r3, #1
 80056b6:	f04f 0900 	mov.w	r9, #0
 80056ba:	9304      	str	r3, [sp, #16]
 80056bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80056be:	930a      	str	r3, [sp, #40]	; 0x28
 80056c0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80056c4:	464f      	mov	r7, r9
 80056c6:	220a      	movs	r2, #10
 80056c8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80056ca:	7806      	ldrb	r6, [r0, #0]
 80056cc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80056d0:	b2d9      	uxtb	r1, r3
 80056d2:	2909      	cmp	r1, #9
 80056d4:	d92a      	bls.n	800572c <_strtod_l+0x1bc>
 80056d6:	9907      	ldr	r1, [sp, #28]
 80056d8:	462a      	mov	r2, r5
 80056da:	f003 fb78 	bl	8008dce <strncmp>
 80056de:	b398      	cbz	r0, 8005748 <_strtod_l+0x1d8>
 80056e0:	2000      	movs	r0, #0
 80056e2:	4633      	mov	r3, r6
 80056e4:	463d      	mov	r5, r7
 80056e6:	9007      	str	r0, [sp, #28]
 80056e8:	4602      	mov	r2, r0
 80056ea:	2b65      	cmp	r3, #101	; 0x65
 80056ec:	d001      	beq.n	80056f2 <_strtod_l+0x182>
 80056ee:	2b45      	cmp	r3, #69	; 0x45
 80056f0:	d118      	bne.n	8005724 <_strtod_l+0x1b4>
 80056f2:	b91d      	cbnz	r5, 80056fc <_strtod_l+0x18c>
 80056f4:	9b04      	ldr	r3, [sp, #16]
 80056f6:	4303      	orrs	r3, r0
 80056f8:	d098      	beq.n	800562c <_strtod_l+0xbc>
 80056fa:	2500      	movs	r5, #0
 80056fc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8005700:	f108 0301 	add.w	r3, r8, #1
 8005704:	931d      	str	r3, [sp, #116]	; 0x74
 8005706:	f898 3001 	ldrb.w	r3, [r8, #1]
 800570a:	2b2b      	cmp	r3, #43	; 0x2b
 800570c:	d075      	beq.n	80057fa <_strtod_l+0x28a>
 800570e:	2b2d      	cmp	r3, #45	; 0x2d
 8005710:	d07b      	beq.n	800580a <_strtod_l+0x29a>
 8005712:	f04f 0c00 	mov.w	ip, #0
 8005716:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800571a:	2909      	cmp	r1, #9
 800571c:	f240 8082 	bls.w	8005824 <_strtod_l+0x2b4>
 8005720:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005724:	2600      	movs	r6, #0
 8005726:	e09d      	b.n	8005864 <_strtod_l+0x2f4>
 8005728:	2300      	movs	r3, #0
 800572a:	e7c4      	b.n	80056b6 <_strtod_l+0x146>
 800572c:	2f08      	cmp	r7, #8
 800572e:	bfd8      	it	le
 8005730:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8005732:	f100 0001 	add.w	r0, r0, #1
 8005736:	bfda      	itte	le
 8005738:	fb02 3301 	mlale	r3, r2, r1, r3
 800573c:	9309      	strle	r3, [sp, #36]	; 0x24
 800573e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005742:	3701      	adds	r7, #1
 8005744:	901d      	str	r0, [sp, #116]	; 0x74
 8005746:	e7bf      	b.n	80056c8 <_strtod_l+0x158>
 8005748:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800574a:	195a      	adds	r2, r3, r5
 800574c:	921d      	str	r2, [sp, #116]	; 0x74
 800574e:	5d5b      	ldrb	r3, [r3, r5]
 8005750:	2f00      	cmp	r7, #0
 8005752:	d037      	beq.n	80057c4 <_strtod_l+0x254>
 8005754:	9007      	str	r0, [sp, #28]
 8005756:	463d      	mov	r5, r7
 8005758:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800575c:	2a09      	cmp	r2, #9
 800575e:	d912      	bls.n	8005786 <_strtod_l+0x216>
 8005760:	2201      	movs	r2, #1
 8005762:	e7c2      	b.n	80056ea <_strtod_l+0x17a>
 8005764:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005766:	1c5a      	adds	r2, r3, #1
 8005768:	921d      	str	r2, [sp, #116]	; 0x74
 800576a:	785b      	ldrb	r3, [r3, #1]
 800576c:	3001      	adds	r0, #1
 800576e:	2b30      	cmp	r3, #48	; 0x30
 8005770:	d0f8      	beq.n	8005764 <_strtod_l+0x1f4>
 8005772:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005776:	2a08      	cmp	r2, #8
 8005778:	f200 84db 	bhi.w	8006132 <_strtod_l+0xbc2>
 800577c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800577e:	9007      	str	r0, [sp, #28]
 8005780:	2000      	movs	r0, #0
 8005782:	920a      	str	r2, [sp, #40]	; 0x28
 8005784:	4605      	mov	r5, r0
 8005786:	3b30      	subs	r3, #48	; 0x30
 8005788:	f100 0201 	add.w	r2, r0, #1
 800578c:	d014      	beq.n	80057b8 <_strtod_l+0x248>
 800578e:	9907      	ldr	r1, [sp, #28]
 8005790:	4411      	add	r1, r2
 8005792:	9107      	str	r1, [sp, #28]
 8005794:	462a      	mov	r2, r5
 8005796:	eb00 0e05 	add.w	lr, r0, r5
 800579a:	210a      	movs	r1, #10
 800579c:	4572      	cmp	r2, lr
 800579e:	d113      	bne.n	80057c8 <_strtod_l+0x258>
 80057a0:	182a      	adds	r2, r5, r0
 80057a2:	2a08      	cmp	r2, #8
 80057a4:	f105 0501 	add.w	r5, r5, #1
 80057a8:	4405      	add	r5, r0
 80057aa:	dc1c      	bgt.n	80057e6 <_strtod_l+0x276>
 80057ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80057ae:	220a      	movs	r2, #10
 80057b0:	fb02 3301 	mla	r3, r2, r1, r3
 80057b4:	9309      	str	r3, [sp, #36]	; 0x24
 80057b6:	2200      	movs	r2, #0
 80057b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80057ba:	1c59      	adds	r1, r3, #1
 80057bc:	911d      	str	r1, [sp, #116]	; 0x74
 80057be:	785b      	ldrb	r3, [r3, #1]
 80057c0:	4610      	mov	r0, r2
 80057c2:	e7c9      	b.n	8005758 <_strtod_l+0x1e8>
 80057c4:	4638      	mov	r0, r7
 80057c6:	e7d2      	b.n	800576e <_strtod_l+0x1fe>
 80057c8:	2a08      	cmp	r2, #8
 80057ca:	dc04      	bgt.n	80057d6 <_strtod_l+0x266>
 80057cc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80057ce:	434e      	muls	r6, r1
 80057d0:	9609      	str	r6, [sp, #36]	; 0x24
 80057d2:	3201      	adds	r2, #1
 80057d4:	e7e2      	b.n	800579c <_strtod_l+0x22c>
 80057d6:	f102 0c01 	add.w	ip, r2, #1
 80057da:	f1bc 0f10 	cmp.w	ip, #16
 80057de:	bfd8      	it	le
 80057e0:	fb01 f909 	mulle.w	r9, r1, r9
 80057e4:	e7f5      	b.n	80057d2 <_strtod_l+0x262>
 80057e6:	2d10      	cmp	r5, #16
 80057e8:	bfdc      	itt	le
 80057ea:	220a      	movle	r2, #10
 80057ec:	fb02 3909 	mlale	r9, r2, r9, r3
 80057f0:	e7e1      	b.n	80057b6 <_strtod_l+0x246>
 80057f2:	2300      	movs	r3, #0
 80057f4:	9307      	str	r3, [sp, #28]
 80057f6:	2201      	movs	r2, #1
 80057f8:	e77c      	b.n	80056f4 <_strtod_l+0x184>
 80057fa:	f04f 0c00 	mov.w	ip, #0
 80057fe:	f108 0302 	add.w	r3, r8, #2
 8005802:	931d      	str	r3, [sp, #116]	; 0x74
 8005804:	f898 3002 	ldrb.w	r3, [r8, #2]
 8005808:	e785      	b.n	8005716 <_strtod_l+0x1a6>
 800580a:	f04f 0c01 	mov.w	ip, #1
 800580e:	e7f6      	b.n	80057fe <_strtod_l+0x28e>
 8005810:	0800a360 	.word	0x0800a360
 8005814:	0800a06c 	.word	0x0800a06c
 8005818:	7ff00000 	.word	0x7ff00000
 800581c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800581e:	1c59      	adds	r1, r3, #1
 8005820:	911d      	str	r1, [sp, #116]	; 0x74
 8005822:	785b      	ldrb	r3, [r3, #1]
 8005824:	2b30      	cmp	r3, #48	; 0x30
 8005826:	d0f9      	beq.n	800581c <_strtod_l+0x2ac>
 8005828:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800582c:	2908      	cmp	r1, #8
 800582e:	f63f af79 	bhi.w	8005724 <_strtod_l+0x1b4>
 8005832:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8005836:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005838:	9308      	str	r3, [sp, #32]
 800583a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800583c:	1c59      	adds	r1, r3, #1
 800583e:	911d      	str	r1, [sp, #116]	; 0x74
 8005840:	785b      	ldrb	r3, [r3, #1]
 8005842:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8005846:	2e09      	cmp	r6, #9
 8005848:	d937      	bls.n	80058ba <_strtod_l+0x34a>
 800584a:	9e08      	ldr	r6, [sp, #32]
 800584c:	1b89      	subs	r1, r1, r6
 800584e:	2908      	cmp	r1, #8
 8005850:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005854:	dc02      	bgt.n	800585c <_strtod_l+0x2ec>
 8005856:	4576      	cmp	r6, lr
 8005858:	bfa8      	it	ge
 800585a:	4676      	movge	r6, lr
 800585c:	f1bc 0f00 	cmp.w	ip, #0
 8005860:	d000      	beq.n	8005864 <_strtod_l+0x2f4>
 8005862:	4276      	negs	r6, r6
 8005864:	2d00      	cmp	r5, #0
 8005866:	d14f      	bne.n	8005908 <_strtod_l+0x398>
 8005868:	9904      	ldr	r1, [sp, #16]
 800586a:	4301      	orrs	r1, r0
 800586c:	f47f aec2 	bne.w	80055f4 <_strtod_l+0x84>
 8005870:	2a00      	cmp	r2, #0
 8005872:	f47f aedb 	bne.w	800562c <_strtod_l+0xbc>
 8005876:	2b69      	cmp	r3, #105	; 0x69
 8005878:	d027      	beq.n	80058ca <_strtod_l+0x35a>
 800587a:	dc24      	bgt.n	80058c6 <_strtod_l+0x356>
 800587c:	2b49      	cmp	r3, #73	; 0x49
 800587e:	d024      	beq.n	80058ca <_strtod_l+0x35a>
 8005880:	2b4e      	cmp	r3, #78	; 0x4e
 8005882:	f47f aed3 	bne.w	800562c <_strtod_l+0xbc>
 8005886:	499e      	ldr	r1, [pc, #632]	; (8005b00 <_strtod_l+0x590>)
 8005888:	a81d      	add	r0, sp, #116	; 0x74
 800588a:	f002 f8e5 	bl	8007a58 <__match>
 800588e:	2800      	cmp	r0, #0
 8005890:	f43f aecc 	beq.w	800562c <_strtod_l+0xbc>
 8005894:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	2b28      	cmp	r3, #40	; 0x28
 800589a:	d12d      	bne.n	80058f8 <_strtod_l+0x388>
 800589c:	4999      	ldr	r1, [pc, #612]	; (8005b04 <_strtod_l+0x594>)
 800589e:	aa20      	add	r2, sp, #128	; 0x80
 80058a0:	a81d      	add	r0, sp, #116	; 0x74
 80058a2:	f002 f8ed 	bl	8007a80 <__hexnan>
 80058a6:	2805      	cmp	r0, #5
 80058a8:	d126      	bne.n	80058f8 <_strtod_l+0x388>
 80058aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80058ac:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80058b0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80058b4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80058b8:	e69c      	b.n	80055f4 <_strtod_l+0x84>
 80058ba:	210a      	movs	r1, #10
 80058bc:	fb01 3e0e 	mla	lr, r1, lr, r3
 80058c0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80058c4:	e7b9      	b.n	800583a <_strtod_l+0x2ca>
 80058c6:	2b6e      	cmp	r3, #110	; 0x6e
 80058c8:	e7db      	b.n	8005882 <_strtod_l+0x312>
 80058ca:	498f      	ldr	r1, [pc, #572]	; (8005b08 <_strtod_l+0x598>)
 80058cc:	a81d      	add	r0, sp, #116	; 0x74
 80058ce:	f002 f8c3 	bl	8007a58 <__match>
 80058d2:	2800      	cmp	r0, #0
 80058d4:	f43f aeaa 	beq.w	800562c <_strtod_l+0xbc>
 80058d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80058da:	498c      	ldr	r1, [pc, #560]	; (8005b0c <_strtod_l+0x59c>)
 80058dc:	3b01      	subs	r3, #1
 80058de:	a81d      	add	r0, sp, #116	; 0x74
 80058e0:	931d      	str	r3, [sp, #116]	; 0x74
 80058e2:	f002 f8b9 	bl	8007a58 <__match>
 80058e6:	b910      	cbnz	r0, 80058ee <_strtod_l+0x37e>
 80058e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80058ea:	3301      	adds	r3, #1
 80058ec:	931d      	str	r3, [sp, #116]	; 0x74
 80058ee:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8005b1c <_strtod_l+0x5ac>
 80058f2:	f04f 0a00 	mov.w	sl, #0
 80058f6:	e67d      	b.n	80055f4 <_strtod_l+0x84>
 80058f8:	4885      	ldr	r0, [pc, #532]	; (8005b10 <_strtod_l+0x5a0>)
 80058fa:	f003 fa0d 	bl	8008d18 <nan>
 80058fe:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005902:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8005906:	e675      	b.n	80055f4 <_strtod_l+0x84>
 8005908:	9b07      	ldr	r3, [sp, #28]
 800590a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800590c:	1af3      	subs	r3, r6, r3
 800590e:	2f00      	cmp	r7, #0
 8005910:	bf08      	it	eq
 8005912:	462f      	moveq	r7, r5
 8005914:	2d10      	cmp	r5, #16
 8005916:	9308      	str	r3, [sp, #32]
 8005918:	46a8      	mov	r8, r5
 800591a:	bfa8      	it	ge
 800591c:	f04f 0810 	movge.w	r8, #16
 8005920:	f7fa fe00 	bl	8000524 <__aeabi_ui2d>
 8005924:	2d09      	cmp	r5, #9
 8005926:	4682      	mov	sl, r0
 8005928:	468b      	mov	fp, r1
 800592a:	dd13      	ble.n	8005954 <_strtod_l+0x3e4>
 800592c:	4b79      	ldr	r3, [pc, #484]	; (8005b14 <_strtod_l+0x5a4>)
 800592e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005932:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005936:	f7fa fe6f 	bl	8000618 <__aeabi_dmul>
 800593a:	4682      	mov	sl, r0
 800593c:	4648      	mov	r0, r9
 800593e:	468b      	mov	fp, r1
 8005940:	f7fa fdf0 	bl	8000524 <__aeabi_ui2d>
 8005944:	4602      	mov	r2, r0
 8005946:	460b      	mov	r3, r1
 8005948:	4650      	mov	r0, sl
 800594a:	4659      	mov	r1, fp
 800594c:	f7fa fcae 	bl	80002ac <__adddf3>
 8005950:	4682      	mov	sl, r0
 8005952:	468b      	mov	fp, r1
 8005954:	2d0f      	cmp	r5, #15
 8005956:	dc38      	bgt.n	80059ca <_strtod_l+0x45a>
 8005958:	9b08      	ldr	r3, [sp, #32]
 800595a:	2b00      	cmp	r3, #0
 800595c:	f43f ae4a 	beq.w	80055f4 <_strtod_l+0x84>
 8005960:	dd24      	ble.n	80059ac <_strtod_l+0x43c>
 8005962:	2b16      	cmp	r3, #22
 8005964:	dc0b      	bgt.n	800597e <_strtod_l+0x40e>
 8005966:	4d6b      	ldr	r5, [pc, #428]	; (8005b14 <_strtod_l+0x5a4>)
 8005968:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800596c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005970:	4652      	mov	r2, sl
 8005972:	465b      	mov	r3, fp
 8005974:	f7fa fe50 	bl	8000618 <__aeabi_dmul>
 8005978:	4682      	mov	sl, r0
 800597a:	468b      	mov	fp, r1
 800597c:	e63a      	b.n	80055f4 <_strtod_l+0x84>
 800597e:	9a08      	ldr	r2, [sp, #32]
 8005980:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005984:	4293      	cmp	r3, r2
 8005986:	db20      	blt.n	80059ca <_strtod_l+0x45a>
 8005988:	4c62      	ldr	r4, [pc, #392]	; (8005b14 <_strtod_l+0x5a4>)
 800598a:	f1c5 050f 	rsb	r5, r5, #15
 800598e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005992:	4652      	mov	r2, sl
 8005994:	465b      	mov	r3, fp
 8005996:	e9d1 0100 	ldrd	r0, r1, [r1]
 800599a:	f7fa fe3d 	bl	8000618 <__aeabi_dmul>
 800599e:	9b08      	ldr	r3, [sp, #32]
 80059a0:	1b5d      	subs	r5, r3, r5
 80059a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80059a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80059aa:	e7e3      	b.n	8005974 <_strtod_l+0x404>
 80059ac:	9b08      	ldr	r3, [sp, #32]
 80059ae:	3316      	adds	r3, #22
 80059b0:	db0b      	blt.n	80059ca <_strtod_l+0x45a>
 80059b2:	9b07      	ldr	r3, [sp, #28]
 80059b4:	4a57      	ldr	r2, [pc, #348]	; (8005b14 <_strtod_l+0x5a4>)
 80059b6:	1b9e      	subs	r6, r3, r6
 80059b8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80059bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80059c0:	4650      	mov	r0, sl
 80059c2:	4659      	mov	r1, fp
 80059c4:	f7fa ff52 	bl	800086c <__aeabi_ddiv>
 80059c8:	e7d6      	b.n	8005978 <_strtod_l+0x408>
 80059ca:	9b08      	ldr	r3, [sp, #32]
 80059cc:	eba5 0808 	sub.w	r8, r5, r8
 80059d0:	4498      	add	r8, r3
 80059d2:	f1b8 0f00 	cmp.w	r8, #0
 80059d6:	dd71      	ble.n	8005abc <_strtod_l+0x54c>
 80059d8:	f018 030f 	ands.w	r3, r8, #15
 80059dc:	d00a      	beq.n	80059f4 <_strtod_l+0x484>
 80059de:	494d      	ldr	r1, [pc, #308]	; (8005b14 <_strtod_l+0x5a4>)
 80059e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80059e4:	4652      	mov	r2, sl
 80059e6:	465b      	mov	r3, fp
 80059e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059ec:	f7fa fe14 	bl	8000618 <__aeabi_dmul>
 80059f0:	4682      	mov	sl, r0
 80059f2:	468b      	mov	fp, r1
 80059f4:	f038 080f 	bics.w	r8, r8, #15
 80059f8:	d04d      	beq.n	8005a96 <_strtod_l+0x526>
 80059fa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80059fe:	dd22      	ble.n	8005a46 <_strtod_l+0x4d6>
 8005a00:	2500      	movs	r5, #0
 8005a02:	462e      	mov	r6, r5
 8005a04:	9509      	str	r5, [sp, #36]	; 0x24
 8005a06:	9507      	str	r5, [sp, #28]
 8005a08:	2322      	movs	r3, #34	; 0x22
 8005a0a:	f8df b110 	ldr.w	fp, [pc, #272]	; 8005b1c <_strtod_l+0x5ac>
 8005a0e:	6023      	str	r3, [r4, #0]
 8005a10:	f04f 0a00 	mov.w	sl, #0
 8005a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f43f adec 	beq.w	80055f4 <_strtod_l+0x84>
 8005a1c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005a1e:	4620      	mov	r0, r4
 8005a20:	f002 f990 	bl	8007d44 <_Bfree>
 8005a24:	9907      	ldr	r1, [sp, #28]
 8005a26:	4620      	mov	r0, r4
 8005a28:	f002 f98c 	bl	8007d44 <_Bfree>
 8005a2c:	4631      	mov	r1, r6
 8005a2e:	4620      	mov	r0, r4
 8005a30:	f002 f988 	bl	8007d44 <_Bfree>
 8005a34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a36:	4620      	mov	r0, r4
 8005a38:	f002 f984 	bl	8007d44 <_Bfree>
 8005a3c:	4629      	mov	r1, r5
 8005a3e:	4620      	mov	r0, r4
 8005a40:	f002 f980 	bl	8007d44 <_Bfree>
 8005a44:	e5d6      	b.n	80055f4 <_strtod_l+0x84>
 8005a46:	2300      	movs	r3, #0
 8005a48:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005a4c:	4650      	mov	r0, sl
 8005a4e:	4659      	mov	r1, fp
 8005a50:	4699      	mov	r9, r3
 8005a52:	f1b8 0f01 	cmp.w	r8, #1
 8005a56:	dc21      	bgt.n	8005a9c <_strtod_l+0x52c>
 8005a58:	b10b      	cbz	r3, 8005a5e <_strtod_l+0x4ee>
 8005a5a:	4682      	mov	sl, r0
 8005a5c:	468b      	mov	fp, r1
 8005a5e:	4b2e      	ldr	r3, [pc, #184]	; (8005b18 <_strtod_l+0x5a8>)
 8005a60:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005a64:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005a68:	4652      	mov	r2, sl
 8005a6a:	465b      	mov	r3, fp
 8005a6c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005a70:	f7fa fdd2 	bl	8000618 <__aeabi_dmul>
 8005a74:	4b29      	ldr	r3, [pc, #164]	; (8005b1c <_strtod_l+0x5ac>)
 8005a76:	460a      	mov	r2, r1
 8005a78:	400b      	ands	r3, r1
 8005a7a:	4929      	ldr	r1, [pc, #164]	; (8005b20 <_strtod_l+0x5b0>)
 8005a7c:	428b      	cmp	r3, r1
 8005a7e:	4682      	mov	sl, r0
 8005a80:	d8be      	bhi.n	8005a00 <_strtod_l+0x490>
 8005a82:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005a86:	428b      	cmp	r3, r1
 8005a88:	bf86      	itte	hi
 8005a8a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8005b24 <_strtod_l+0x5b4>
 8005a8e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8005a92:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005a96:	2300      	movs	r3, #0
 8005a98:	9304      	str	r3, [sp, #16]
 8005a9a:	e081      	b.n	8005ba0 <_strtod_l+0x630>
 8005a9c:	f018 0f01 	tst.w	r8, #1
 8005aa0:	d007      	beq.n	8005ab2 <_strtod_l+0x542>
 8005aa2:	4b1d      	ldr	r3, [pc, #116]	; (8005b18 <_strtod_l+0x5a8>)
 8005aa4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aac:	f7fa fdb4 	bl	8000618 <__aeabi_dmul>
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	f109 0901 	add.w	r9, r9, #1
 8005ab6:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005aba:	e7ca      	b.n	8005a52 <_strtod_l+0x4e2>
 8005abc:	d0eb      	beq.n	8005a96 <_strtod_l+0x526>
 8005abe:	f1c8 0800 	rsb	r8, r8, #0
 8005ac2:	f018 020f 	ands.w	r2, r8, #15
 8005ac6:	d00a      	beq.n	8005ade <_strtod_l+0x56e>
 8005ac8:	4b12      	ldr	r3, [pc, #72]	; (8005b14 <_strtod_l+0x5a4>)
 8005aca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ace:	4650      	mov	r0, sl
 8005ad0:	4659      	mov	r1, fp
 8005ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad6:	f7fa fec9 	bl	800086c <__aeabi_ddiv>
 8005ada:	4682      	mov	sl, r0
 8005adc:	468b      	mov	fp, r1
 8005ade:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005ae2:	d0d8      	beq.n	8005a96 <_strtod_l+0x526>
 8005ae4:	f1b8 0f1f 	cmp.w	r8, #31
 8005ae8:	dd1e      	ble.n	8005b28 <_strtod_l+0x5b8>
 8005aea:	2500      	movs	r5, #0
 8005aec:	462e      	mov	r6, r5
 8005aee:	9509      	str	r5, [sp, #36]	; 0x24
 8005af0:	9507      	str	r5, [sp, #28]
 8005af2:	2322      	movs	r3, #34	; 0x22
 8005af4:	f04f 0a00 	mov.w	sl, #0
 8005af8:	f04f 0b00 	mov.w	fp, #0
 8005afc:	6023      	str	r3, [r4, #0]
 8005afe:	e789      	b.n	8005a14 <_strtod_l+0x4a4>
 8005b00:	0800a03d 	.word	0x0800a03d
 8005b04:	0800a080 	.word	0x0800a080
 8005b08:	0800a035 	.word	0x0800a035
 8005b0c:	0800a200 	.word	0x0800a200
 8005b10:	0800a0fb 	.word	0x0800a0fb
 8005b14:	0800a400 	.word	0x0800a400
 8005b18:	0800a3d8 	.word	0x0800a3d8
 8005b1c:	7ff00000 	.word	0x7ff00000
 8005b20:	7ca00000 	.word	0x7ca00000
 8005b24:	7fefffff 	.word	0x7fefffff
 8005b28:	f018 0310 	ands.w	r3, r8, #16
 8005b2c:	bf18      	it	ne
 8005b2e:	236a      	movne	r3, #106	; 0x6a
 8005b30:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8005ee8 <_strtod_l+0x978>
 8005b34:	9304      	str	r3, [sp, #16]
 8005b36:	4650      	mov	r0, sl
 8005b38:	4659      	mov	r1, fp
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	f018 0f01 	tst.w	r8, #1
 8005b40:	d004      	beq.n	8005b4c <_strtod_l+0x5dc>
 8005b42:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005b46:	f7fa fd67 	bl	8000618 <__aeabi_dmul>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005b50:	f109 0908 	add.w	r9, r9, #8
 8005b54:	d1f2      	bne.n	8005b3c <_strtod_l+0x5cc>
 8005b56:	b10b      	cbz	r3, 8005b5c <_strtod_l+0x5ec>
 8005b58:	4682      	mov	sl, r0
 8005b5a:	468b      	mov	fp, r1
 8005b5c:	9b04      	ldr	r3, [sp, #16]
 8005b5e:	b1bb      	cbz	r3, 8005b90 <_strtod_l+0x620>
 8005b60:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8005b64:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	4659      	mov	r1, fp
 8005b6c:	dd10      	ble.n	8005b90 <_strtod_l+0x620>
 8005b6e:	2b1f      	cmp	r3, #31
 8005b70:	f340 8128 	ble.w	8005dc4 <_strtod_l+0x854>
 8005b74:	2b34      	cmp	r3, #52	; 0x34
 8005b76:	bfde      	ittt	le
 8005b78:	3b20      	suble	r3, #32
 8005b7a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8005b7e:	fa02 f303 	lslle.w	r3, r2, r3
 8005b82:	f04f 0a00 	mov.w	sl, #0
 8005b86:	bfcc      	ite	gt
 8005b88:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005b8c:	ea03 0b01 	andle.w	fp, r3, r1
 8005b90:	2200      	movs	r2, #0
 8005b92:	2300      	movs	r3, #0
 8005b94:	4650      	mov	r0, sl
 8005b96:	4659      	mov	r1, fp
 8005b98:	f7fa ffa6 	bl	8000ae8 <__aeabi_dcmpeq>
 8005b9c:	2800      	cmp	r0, #0
 8005b9e:	d1a4      	bne.n	8005aea <_strtod_l+0x57a>
 8005ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ba2:	9300      	str	r3, [sp, #0]
 8005ba4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005ba6:	462b      	mov	r3, r5
 8005ba8:	463a      	mov	r2, r7
 8005baa:	4620      	mov	r0, r4
 8005bac:	f002 f936 	bl	8007e1c <__s2b>
 8005bb0:	9009      	str	r0, [sp, #36]	; 0x24
 8005bb2:	2800      	cmp	r0, #0
 8005bb4:	f43f af24 	beq.w	8005a00 <_strtod_l+0x490>
 8005bb8:	9b07      	ldr	r3, [sp, #28]
 8005bba:	1b9e      	subs	r6, r3, r6
 8005bbc:	9b08      	ldr	r3, [sp, #32]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	bfb4      	ite	lt
 8005bc2:	4633      	movlt	r3, r6
 8005bc4:	2300      	movge	r3, #0
 8005bc6:	9310      	str	r3, [sp, #64]	; 0x40
 8005bc8:	9b08      	ldr	r3, [sp, #32]
 8005bca:	2500      	movs	r5, #0
 8005bcc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005bd0:	9318      	str	r3, [sp, #96]	; 0x60
 8005bd2:	462e      	mov	r6, r5
 8005bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	6859      	ldr	r1, [r3, #4]
 8005bda:	f002 f873 	bl	8007cc4 <_Balloc>
 8005bde:	9007      	str	r0, [sp, #28]
 8005be0:	2800      	cmp	r0, #0
 8005be2:	f43f af11 	beq.w	8005a08 <_strtod_l+0x498>
 8005be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005be8:	691a      	ldr	r2, [r3, #16]
 8005bea:	3202      	adds	r2, #2
 8005bec:	f103 010c 	add.w	r1, r3, #12
 8005bf0:	0092      	lsls	r2, r2, #2
 8005bf2:	300c      	adds	r0, #12
 8005bf4:	f7fe fd5c 	bl	80046b0 <memcpy>
 8005bf8:	ec4b ab10 	vmov	d0, sl, fp
 8005bfc:	aa20      	add	r2, sp, #128	; 0x80
 8005bfe:	a91f      	add	r1, sp, #124	; 0x7c
 8005c00:	4620      	mov	r0, r4
 8005c02:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8005c06:	f002 fc45 	bl	8008494 <__d2b>
 8005c0a:	901e      	str	r0, [sp, #120]	; 0x78
 8005c0c:	2800      	cmp	r0, #0
 8005c0e:	f43f aefb 	beq.w	8005a08 <_strtod_l+0x498>
 8005c12:	2101      	movs	r1, #1
 8005c14:	4620      	mov	r0, r4
 8005c16:	f002 f99b 	bl	8007f50 <__i2b>
 8005c1a:	4606      	mov	r6, r0
 8005c1c:	2800      	cmp	r0, #0
 8005c1e:	f43f aef3 	beq.w	8005a08 <_strtod_l+0x498>
 8005c22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005c24:	9904      	ldr	r1, [sp, #16]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	bfab      	itete	ge
 8005c2a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8005c2c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8005c2e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8005c30:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8005c34:	bfac      	ite	ge
 8005c36:	eb03 0902 	addge.w	r9, r3, r2
 8005c3a:	1ad7      	sublt	r7, r2, r3
 8005c3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005c3e:	eba3 0801 	sub.w	r8, r3, r1
 8005c42:	4490      	add	r8, r2
 8005c44:	4ba3      	ldr	r3, [pc, #652]	; (8005ed4 <_strtod_l+0x964>)
 8005c46:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005c4a:	4598      	cmp	r8, r3
 8005c4c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005c50:	f280 80cc 	bge.w	8005dec <_strtod_l+0x87c>
 8005c54:	eba3 0308 	sub.w	r3, r3, r8
 8005c58:	2b1f      	cmp	r3, #31
 8005c5a:	eba2 0203 	sub.w	r2, r2, r3
 8005c5e:	f04f 0101 	mov.w	r1, #1
 8005c62:	f300 80b6 	bgt.w	8005dd2 <_strtod_l+0x862>
 8005c66:	fa01 f303 	lsl.w	r3, r1, r3
 8005c6a:	9311      	str	r3, [sp, #68]	; 0x44
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	930c      	str	r3, [sp, #48]	; 0x30
 8005c70:	eb09 0802 	add.w	r8, r9, r2
 8005c74:	9b04      	ldr	r3, [sp, #16]
 8005c76:	45c1      	cmp	r9, r8
 8005c78:	4417      	add	r7, r2
 8005c7a:	441f      	add	r7, r3
 8005c7c:	464b      	mov	r3, r9
 8005c7e:	bfa8      	it	ge
 8005c80:	4643      	movge	r3, r8
 8005c82:	42bb      	cmp	r3, r7
 8005c84:	bfa8      	it	ge
 8005c86:	463b      	movge	r3, r7
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	bfc2      	ittt	gt
 8005c8c:	eba8 0803 	subgt.w	r8, r8, r3
 8005c90:	1aff      	subgt	r7, r7, r3
 8005c92:	eba9 0903 	subgt.w	r9, r9, r3
 8005c96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	dd17      	ble.n	8005ccc <_strtod_l+0x75c>
 8005c9c:	4631      	mov	r1, r6
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	f002 fa11 	bl	80080c8 <__pow5mult>
 8005ca6:	4606      	mov	r6, r0
 8005ca8:	2800      	cmp	r0, #0
 8005caa:	f43f aead 	beq.w	8005a08 <_strtod_l+0x498>
 8005cae:	4601      	mov	r1, r0
 8005cb0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005cb2:	4620      	mov	r0, r4
 8005cb4:	f002 f962 	bl	8007f7c <__multiply>
 8005cb8:	900f      	str	r0, [sp, #60]	; 0x3c
 8005cba:	2800      	cmp	r0, #0
 8005cbc:	f43f aea4 	beq.w	8005a08 <_strtod_l+0x498>
 8005cc0:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	f002 f83e 	bl	8007d44 <_Bfree>
 8005cc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005cca:	931e      	str	r3, [sp, #120]	; 0x78
 8005ccc:	f1b8 0f00 	cmp.w	r8, #0
 8005cd0:	f300 8091 	bgt.w	8005df6 <_strtod_l+0x886>
 8005cd4:	9b08      	ldr	r3, [sp, #32]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	dd08      	ble.n	8005cec <_strtod_l+0x77c>
 8005cda:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005cdc:	9907      	ldr	r1, [sp, #28]
 8005cde:	4620      	mov	r0, r4
 8005ce0:	f002 f9f2 	bl	80080c8 <__pow5mult>
 8005ce4:	9007      	str	r0, [sp, #28]
 8005ce6:	2800      	cmp	r0, #0
 8005ce8:	f43f ae8e 	beq.w	8005a08 <_strtod_l+0x498>
 8005cec:	2f00      	cmp	r7, #0
 8005cee:	dd08      	ble.n	8005d02 <_strtod_l+0x792>
 8005cf0:	9907      	ldr	r1, [sp, #28]
 8005cf2:	463a      	mov	r2, r7
 8005cf4:	4620      	mov	r0, r4
 8005cf6:	f002 fa41 	bl	800817c <__lshift>
 8005cfa:	9007      	str	r0, [sp, #28]
 8005cfc:	2800      	cmp	r0, #0
 8005cfe:	f43f ae83 	beq.w	8005a08 <_strtod_l+0x498>
 8005d02:	f1b9 0f00 	cmp.w	r9, #0
 8005d06:	dd08      	ble.n	8005d1a <_strtod_l+0x7aa>
 8005d08:	4631      	mov	r1, r6
 8005d0a:	464a      	mov	r2, r9
 8005d0c:	4620      	mov	r0, r4
 8005d0e:	f002 fa35 	bl	800817c <__lshift>
 8005d12:	4606      	mov	r6, r0
 8005d14:	2800      	cmp	r0, #0
 8005d16:	f43f ae77 	beq.w	8005a08 <_strtod_l+0x498>
 8005d1a:	9a07      	ldr	r2, [sp, #28]
 8005d1c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005d1e:	4620      	mov	r0, r4
 8005d20:	f002 fab4 	bl	800828c <__mdiff>
 8005d24:	4605      	mov	r5, r0
 8005d26:	2800      	cmp	r0, #0
 8005d28:	f43f ae6e 	beq.w	8005a08 <_strtod_l+0x498>
 8005d2c:	68c3      	ldr	r3, [r0, #12]
 8005d2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d30:	2300      	movs	r3, #0
 8005d32:	60c3      	str	r3, [r0, #12]
 8005d34:	4631      	mov	r1, r6
 8005d36:	f002 fa8d 	bl	8008254 <__mcmp>
 8005d3a:	2800      	cmp	r0, #0
 8005d3c:	da65      	bge.n	8005e0a <_strtod_l+0x89a>
 8005d3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d40:	ea53 030a 	orrs.w	r3, r3, sl
 8005d44:	f040 8087 	bne.w	8005e56 <_strtod_l+0x8e6>
 8005d48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f040 8082 	bne.w	8005e56 <_strtod_l+0x8e6>
 8005d52:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005d56:	0d1b      	lsrs	r3, r3, #20
 8005d58:	051b      	lsls	r3, r3, #20
 8005d5a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005d5e:	d97a      	bls.n	8005e56 <_strtod_l+0x8e6>
 8005d60:	696b      	ldr	r3, [r5, #20]
 8005d62:	b913      	cbnz	r3, 8005d6a <_strtod_l+0x7fa>
 8005d64:	692b      	ldr	r3, [r5, #16]
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	dd75      	ble.n	8005e56 <_strtod_l+0x8e6>
 8005d6a:	4629      	mov	r1, r5
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	4620      	mov	r0, r4
 8005d70:	f002 fa04 	bl	800817c <__lshift>
 8005d74:	4631      	mov	r1, r6
 8005d76:	4605      	mov	r5, r0
 8005d78:	f002 fa6c 	bl	8008254 <__mcmp>
 8005d7c:	2800      	cmp	r0, #0
 8005d7e:	dd6a      	ble.n	8005e56 <_strtod_l+0x8e6>
 8005d80:	9904      	ldr	r1, [sp, #16]
 8005d82:	4a55      	ldr	r2, [pc, #340]	; (8005ed8 <_strtod_l+0x968>)
 8005d84:	465b      	mov	r3, fp
 8005d86:	2900      	cmp	r1, #0
 8005d88:	f000 8085 	beq.w	8005e96 <_strtod_l+0x926>
 8005d8c:	ea02 010b 	and.w	r1, r2, fp
 8005d90:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005d94:	dc7f      	bgt.n	8005e96 <_strtod_l+0x926>
 8005d96:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005d9a:	f77f aeaa 	ble.w	8005af2 <_strtod_l+0x582>
 8005d9e:	4a4f      	ldr	r2, [pc, #316]	; (8005edc <_strtod_l+0x96c>)
 8005da0:	2300      	movs	r3, #0
 8005da2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8005da6:	4650      	mov	r0, sl
 8005da8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8005dac:	4659      	mov	r1, fp
 8005dae:	f7fa fc33 	bl	8000618 <__aeabi_dmul>
 8005db2:	460b      	mov	r3, r1
 8005db4:	4303      	orrs	r3, r0
 8005db6:	bf08      	it	eq
 8005db8:	2322      	moveq	r3, #34	; 0x22
 8005dba:	4682      	mov	sl, r0
 8005dbc:	468b      	mov	fp, r1
 8005dbe:	bf08      	it	eq
 8005dc0:	6023      	streq	r3, [r4, #0]
 8005dc2:	e62b      	b.n	8005a1c <_strtod_l+0x4ac>
 8005dc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dcc:	ea03 0a0a 	and.w	sl, r3, sl
 8005dd0:	e6de      	b.n	8005b90 <_strtod_l+0x620>
 8005dd2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005dd6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005dda:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005dde:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005de2:	fa01 f308 	lsl.w	r3, r1, r8
 8005de6:	930c      	str	r3, [sp, #48]	; 0x30
 8005de8:	9111      	str	r1, [sp, #68]	; 0x44
 8005dea:	e741      	b.n	8005c70 <_strtod_l+0x700>
 8005dec:	2300      	movs	r3, #0
 8005dee:	930c      	str	r3, [sp, #48]	; 0x30
 8005df0:	2301      	movs	r3, #1
 8005df2:	9311      	str	r3, [sp, #68]	; 0x44
 8005df4:	e73c      	b.n	8005c70 <_strtod_l+0x700>
 8005df6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005df8:	4642      	mov	r2, r8
 8005dfa:	4620      	mov	r0, r4
 8005dfc:	f002 f9be 	bl	800817c <__lshift>
 8005e00:	901e      	str	r0, [sp, #120]	; 0x78
 8005e02:	2800      	cmp	r0, #0
 8005e04:	f47f af66 	bne.w	8005cd4 <_strtod_l+0x764>
 8005e08:	e5fe      	b.n	8005a08 <_strtod_l+0x498>
 8005e0a:	465f      	mov	r7, fp
 8005e0c:	d16e      	bne.n	8005eec <_strtod_l+0x97c>
 8005e0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005e10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005e14:	b342      	cbz	r2, 8005e68 <_strtod_l+0x8f8>
 8005e16:	4a32      	ldr	r2, [pc, #200]	; (8005ee0 <_strtod_l+0x970>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d128      	bne.n	8005e6e <_strtod_l+0x8fe>
 8005e1c:	9b04      	ldr	r3, [sp, #16]
 8005e1e:	4650      	mov	r0, sl
 8005e20:	b1eb      	cbz	r3, 8005e5e <_strtod_l+0x8ee>
 8005e22:	4a2d      	ldr	r2, [pc, #180]	; (8005ed8 <_strtod_l+0x968>)
 8005e24:	403a      	ands	r2, r7
 8005e26:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005e2a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005e2e:	d819      	bhi.n	8005e64 <_strtod_l+0x8f4>
 8005e30:	0d12      	lsrs	r2, r2, #20
 8005e32:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005e36:	fa01 f303 	lsl.w	r3, r1, r3
 8005e3a:	4298      	cmp	r0, r3
 8005e3c:	d117      	bne.n	8005e6e <_strtod_l+0x8fe>
 8005e3e:	4b29      	ldr	r3, [pc, #164]	; (8005ee4 <_strtod_l+0x974>)
 8005e40:	429f      	cmp	r7, r3
 8005e42:	d102      	bne.n	8005e4a <_strtod_l+0x8da>
 8005e44:	3001      	adds	r0, #1
 8005e46:	f43f addf 	beq.w	8005a08 <_strtod_l+0x498>
 8005e4a:	4b23      	ldr	r3, [pc, #140]	; (8005ed8 <_strtod_l+0x968>)
 8005e4c:	403b      	ands	r3, r7
 8005e4e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005e52:	f04f 0a00 	mov.w	sl, #0
 8005e56:	9b04      	ldr	r3, [sp, #16]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1a0      	bne.n	8005d9e <_strtod_l+0x82e>
 8005e5c:	e5de      	b.n	8005a1c <_strtod_l+0x4ac>
 8005e5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e62:	e7ea      	b.n	8005e3a <_strtod_l+0x8ca>
 8005e64:	460b      	mov	r3, r1
 8005e66:	e7e8      	b.n	8005e3a <_strtod_l+0x8ca>
 8005e68:	ea53 030a 	orrs.w	r3, r3, sl
 8005e6c:	d088      	beq.n	8005d80 <_strtod_l+0x810>
 8005e6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e70:	b1db      	cbz	r3, 8005eaa <_strtod_l+0x93a>
 8005e72:	423b      	tst	r3, r7
 8005e74:	d0ef      	beq.n	8005e56 <_strtod_l+0x8e6>
 8005e76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e78:	9a04      	ldr	r2, [sp, #16]
 8005e7a:	4650      	mov	r0, sl
 8005e7c:	4659      	mov	r1, fp
 8005e7e:	b1c3      	cbz	r3, 8005eb2 <_strtod_l+0x942>
 8005e80:	f7ff fb5a 	bl	8005538 <sulp>
 8005e84:	4602      	mov	r2, r0
 8005e86:	460b      	mov	r3, r1
 8005e88:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005e8c:	f7fa fa0e 	bl	80002ac <__adddf3>
 8005e90:	4682      	mov	sl, r0
 8005e92:	468b      	mov	fp, r1
 8005e94:	e7df      	b.n	8005e56 <_strtod_l+0x8e6>
 8005e96:	4013      	ands	r3, r2
 8005e98:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005e9c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005ea0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005ea4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005ea8:	e7d5      	b.n	8005e56 <_strtod_l+0x8e6>
 8005eaa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005eac:	ea13 0f0a 	tst.w	r3, sl
 8005eb0:	e7e0      	b.n	8005e74 <_strtod_l+0x904>
 8005eb2:	f7ff fb41 	bl	8005538 <sulp>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	460b      	mov	r3, r1
 8005eba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005ebe:	f7fa f9f3 	bl	80002a8 <__aeabi_dsub>
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	4682      	mov	sl, r0
 8005ec8:	468b      	mov	fp, r1
 8005eca:	f7fa fe0d 	bl	8000ae8 <__aeabi_dcmpeq>
 8005ece:	2800      	cmp	r0, #0
 8005ed0:	d0c1      	beq.n	8005e56 <_strtod_l+0x8e6>
 8005ed2:	e60e      	b.n	8005af2 <_strtod_l+0x582>
 8005ed4:	fffffc02 	.word	0xfffffc02
 8005ed8:	7ff00000 	.word	0x7ff00000
 8005edc:	39500000 	.word	0x39500000
 8005ee0:	000fffff 	.word	0x000fffff
 8005ee4:	7fefffff 	.word	0x7fefffff
 8005ee8:	0800a098 	.word	0x0800a098
 8005eec:	4631      	mov	r1, r6
 8005eee:	4628      	mov	r0, r5
 8005ef0:	f002 fb2c 	bl	800854c <__ratio>
 8005ef4:	ec59 8b10 	vmov	r8, r9, d0
 8005ef8:	ee10 0a10 	vmov	r0, s0
 8005efc:	2200      	movs	r2, #0
 8005efe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f02:	4649      	mov	r1, r9
 8005f04:	f7fa fe04 	bl	8000b10 <__aeabi_dcmple>
 8005f08:	2800      	cmp	r0, #0
 8005f0a:	d07c      	beq.n	8006006 <_strtod_l+0xa96>
 8005f0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d04c      	beq.n	8005fac <_strtod_l+0xa3c>
 8005f12:	4b95      	ldr	r3, [pc, #596]	; (8006168 <_strtod_l+0xbf8>)
 8005f14:	2200      	movs	r2, #0
 8005f16:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005f1a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006168 <_strtod_l+0xbf8>
 8005f1e:	f04f 0800 	mov.w	r8, #0
 8005f22:	4b92      	ldr	r3, [pc, #584]	; (800616c <_strtod_l+0xbfc>)
 8005f24:	403b      	ands	r3, r7
 8005f26:	9311      	str	r3, [sp, #68]	; 0x44
 8005f28:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005f2a:	4b91      	ldr	r3, [pc, #580]	; (8006170 <_strtod_l+0xc00>)
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	f040 80b2 	bne.w	8006096 <_strtod_l+0xb26>
 8005f32:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005f36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005f3a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8005f3e:	ec4b ab10 	vmov	d0, sl, fp
 8005f42:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8005f46:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005f4a:	f002 fa27 	bl	800839c <__ulp>
 8005f4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005f52:	ec53 2b10 	vmov	r2, r3, d0
 8005f56:	f7fa fb5f 	bl	8000618 <__aeabi_dmul>
 8005f5a:	4652      	mov	r2, sl
 8005f5c:	465b      	mov	r3, fp
 8005f5e:	f7fa f9a5 	bl	80002ac <__adddf3>
 8005f62:	460b      	mov	r3, r1
 8005f64:	4981      	ldr	r1, [pc, #516]	; (800616c <_strtod_l+0xbfc>)
 8005f66:	4a83      	ldr	r2, [pc, #524]	; (8006174 <_strtod_l+0xc04>)
 8005f68:	4019      	ands	r1, r3
 8005f6a:	4291      	cmp	r1, r2
 8005f6c:	4682      	mov	sl, r0
 8005f6e:	d95e      	bls.n	800602e <_strtod_l+0xabe>
 8005f70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f72:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d103      	bne.n	8005f82 <_strtod_l+0xa12>
 8005f7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	f43f ad43 	beq.w	8005a08 <_strtod_l+0x498>
 8005f82:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8006180 <_strtod_l+0xc10>
 8005f86:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005f8a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	f001 fed9 	bl	8007d44 <_Bfree>
 8005f92:	9907      	ldr	r1, [sp, #28]
 8005f94:	4620      	mov	r0, r4
 8005f96:	f001 fed5 	bl	8007d44 <_Bfree>
 8005f9a:	4631      	mov	r1, r6
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	f001 fed1 	bl	8007d44 <_Bfree>
 8005fa2:	4629      	mov	r1, r5
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	f001 fecd 	bl	8007d44 <_Bfree>
 8005faa:	e613      	b.n	8005bd4 <_strtod_l+0x664>
 8005fac:	f1ba 0f00 	cmp.w	sl, #0
 8005fb0:	d11b      	bne.n	8005fea <_strtod_l+0xa7a>
 8005fb2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005fb6:	b9f3      	cbnz	r3, 8005ff6 <_strtod_l+0xa86>
 8005fb8:	4b6b      	ldr	r3, [pc, #428]	; (8006168 <_strtod_l+0xbf8>)
 8005fba:	2200      	movs	r2, #0
 8005fbc:	4640      	mov	r0, r8
 8005fbe:	4649      	mov	r1, r9
 8005fc0:	f7fa fd9c 	bl	8000afc <__aeabi_dcmplt>
 8005fc4:	b9d0      	cbnz	r0, 8005ffc <_strtod_l+0xa8c>
 8005fc6:	4640      	mov	r0, r8
 8005fc8:	4649      	mov	r1, r9
 8005fca:	4b6b      	ldr	r3, [pc, #428]	; (8006178 <_strtod_l+0xc08>)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f7fa fb23 	bl	8000618 <__aeabi_dmul>
 8005fd2:	4680      	mov	r8, r0
 8005fd4:	4689      	mov	r9, r1
 8005fd6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005fda:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8005fde:	931b      	str	r3, [sp, #108]	; 0x6c
 8005fe0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8005fe4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005fe8:	e79b      	b.n	8005f22 <_strtod_l+0x9b2>
 8005fea:	f1ba 0f01 	cmp.w	sl, #1
 8005fee:	d102      	bne.n	8005ff6 <_strtod_l+0xa86>
 8005ff0:	2f00      	cmp	r7, #0
 8005ff2:	f43f ad7e 	beq.w	8005af2 <_strtod_l+0x582>
 8005ff6:	4b61      	ldr	r3, [pc, #388]	; (800617c <_strtod_l+0xc0c>)
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	e78c      	b.n	8005f16 <_strtod_l+0x9a6>
 8005ffc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006178 <_strtod_l+0xc08>
 8006000:	f04f 0800 	mov.w	r8, #0
 8006004:	e7e7      	b.n	8005fd6 <_strtod_l+0xa66>
 8006006:	4b5c      	ldr	r3, [pc, #368]	; (8006178 <_strtod_l+0xc08>)
 8006008:	4640      	mov	r0, r8
 800600a:	4649      	mov	r1, r9
 800600c:	2200      	movs	r2, #0
 800600e:	f7fa fb03 	bl	8000618 <__aeabi_dmul>
 8006012:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006014:	4680      	mov	r8, r0
 8006016:	4689      	mov	r9, r1
 8006018:	b933      	cbnz	r3, 8006028 <_strtod_l+0xab8>
 800601a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800601e:	9012      	str	r0, [sp, #72]	; 0x48
 8006020:	9313      	str	r3, [sp, #76]	; 0x4c
 8006022:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8006026:	e7dd      	b.n	8005fe4 <_strtod_l+0xa74>
 8006028:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800602c:	e7f9      	b.n	8006022 <_strtod_l+0xab2>
 800602e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006032:	9b04      	ldr	r3, [sp, #16]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d1a8      	bne.n	8005f8a <_strtod_l+0xa1a>
 8006038:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800603c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800603e:	0d1b      	lsrs	r3, r3, #20
 8006040:	051b      	lsls	r3, r3, #20
 8006042:	429a      	cmp	r2, r3
 8006044:	d1a1      	bne.n	8005f8a <_strtod_l+0xa1a>
 8006046:	4640      	mov	r0, r8
 8006048:	4649      	mov	r1, r9
 800604a:	f7fa fe45 	bl	8000cd8 <__aeabi_d2lz>
 800604e:	f7fa fab5 	bl	80005bc <__aeabi_l2d>
 8006052:	4602      	mov	r2, r0
 8006054:	460b      	mov	r3, r1
 8006056:	4640      	mov	r0, r8
 8006058:	4649      	mov	r1, r9
 800605a:	f7fa f925 	bl	80002a8 <__aeabi_dsub>
 800605e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006060:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006064:	ea43 030a 	orr.w	r3, r3, sl
 8006068:	4313      	orrs	r3, r2
 800606a:	4680      	mov	r8, r0
 800606c:	4689      	mov	r9, r1
 800606e:	d053      	beq.n	8006118 <_strtod_l+0xba8>
 8006070:	a335      	add	r3, pc, #212	; (adr r3, 8006148 <_strtod_l+0xbd8>)
 8006072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006076:	f7fa fd41 	bl	8000afc <__aeabi_dcmplt>
 800607a:	2800      	cmp	r0, #0
 800607c:	f47f acce 	bne.w	8005a1c <_strtod_l+0x4ac>
 8006080:	a333      	add	r3, pc, #204	; (adr r3, 8006150 <_strtod_l+0xbe0>)
 8006082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006086:	4640      	mov	r0, r8
 8006088:	4649      	mov	r1, r9
 800608a:	f7fa fd55 	bl	8000b38 <__aeabi_dcmpgt>
 800608e:	2800      	cmp	r0, #0
 8006090:	f43f af7b 	beq.w	8005f8a <_strtod_l+0xa1a>
 8006094:	e4c2      	b.n	8005a1c <_strtod_l+0x4ac>
 8006096:	9b04      	ldr	r3, [sp, #16]
 8006098:	b333      	cbz	r3, 80060e8 <_strtod_l+0xb78>
 800609a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800609c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80060a0:	d822      	bhi.n	80060e8 <_strtod_l+0xb78>
 80060a2:	a32d      	add	r3, pc, #180	; (adr r3, 8006158 <_strtod_l+0xbe8>)
 80060a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a8:	4640      	mov	r0, r8
 80060aa:	4649      	mov	r1, r9
 80060ac:	f7fa fd30 	bl	8000b10 <__aeabi_dcmple>
 80060b0:	b1a0      	cbz	r0, 80060dc <_strtod_l+0xb6c>
 80060b2:	4649      	mov	r1, r9
 80060b4:	4640      	mov	r0, r8
 80060b6:	f7fa fd87 	bl	8000bc8 <__aeabi_d2uiz>
 80060ba:	2801      	cmp	r0, #1
 80060bc:	bf38      	it	cc
 80060be:	2001      	movcc	r0, #1
 80060c0:	f7fa fa30 	bl	8000524 <__aeabi_ui2d>
 80060c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80060c6:	4680      	mov	r8, r0
 80060c8:	4689      	mov	r9, r1
 80060ca:	bb13      	cbnz	r3, 8006112 <_strtod_l+0xba2>
 80060cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80060d0:	9014      	str	r0, [sp, #80]	; 0x50
 80060d2:	9315      	str	r3, [sp, #84]	; 0x54
 80060d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80060d8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80060dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060de:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80060e0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80060e4:	1a9b      	subs	r3, r3, r2
 80060e6:	930d      	str	r3, [sp, #52]	; 0x34
 80060e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80060ec:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80060f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80060f4:	f002 f952 	bl	800839c <__ulp>
 80060f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80060fc:	ec53 2b10 	vmov	r2, r3, d0
 8006100:	f7fa fa8a 	bl	8000618 <__aeabi_dmul>
 8006104:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006108:	f7fa f8d0 	bl	80002ac <__adddf3>
 800610c:	4682      	mov	sl, r0
 800610e:	468b      	mov	fp, r1
 8006110:	e78f      	b.n	8006032 <_strtod_l+0xac2>
 8006112:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8006116:	e7dd      	b.n	80060d4 <_strtod_l+0xb64>
 8006118:	a311      	add	r3, pc, #68	; (adr r3, 8006160 <_strtod_l+0xbf0>)
 800611a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611e:	f7fa fced 	bl	8000afc <__aeabi_dcmplt>
 8006122:	e7b4      	b.n	800608e <_strtod_l+0xb1e>
 8006124:	2300      	movs	r3, #0
 8006126:	930e      	str	r3, [sp, #56]	; 0x38
 8006128:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800612a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800612c:	6013      	str	r3, [r2, #0]
 800612e:	f7ff ba65 	b.w	80055fc <_strtod_l+0x8c>
 8006132:	2b65      	cmp	r3, #101	; 0x65
 8006134:	f43f ab5d 	beq.w	80057f2 <_strtod_l+0x282>
 8006138:	2b45      	cmp	r3, #69	; 0x45
 800613a:	f43f ab5a 	beq.w	80057f2 <_strtod_l+0x282>
 800613e:	2201      	movs	r2, #1
 8006140:	f7ff bb92 	b.w	8005868 <_strtod_l+0x2f8>
 8006144:	f3af 8000 	nop.w
 8006148:	94a03595 	.word	0x94a03595
 800614c:	3fdfffff 	.word	0x3fdfffff
 8006150:	35afe535 	.word	0x35afe535
 8006154:	3fe00000 	.word	0x3fe00000
 8006158:	ffc00000 	.word	0xffc00000
 800615c:	41dfffff 	.word	0x41dfffff
 8006160:	94a03595 	.word	0x94a03595
 8006164:	3fcfffff 	.word	0x3fcfffff
 8006168:	3ff00000 	.word	0x3ff00000
 800616c:	7ff00000 	.word	0x7ff00000
 8006170:	7fe00000 	.word	0x7fe00000
 8006174:	7c9fffff 	.word	0x7c9fffff
 8006178:	3fe00000 	.word	0x3fe00000
 800617c:	bff00000 	.word	0xbff00000
 8006180:	7fefffff 	.word	0x7fefffff

08006184 <_strtod_r>:
 8006184:	4b01      	ldr	r3, [pc, #4]	; (800618c <_strtod_r+0x8>)
 8006186:	f7ff b9f3 	b.w	8005570 <_strtod_l>
 800618a:	bf00      	nop
 800618c:	200003a4 	.word	0x200003a4

08006190 <_strtol_l.isra.0>:
 8006190:	2b01      	cmp	r3, #1
 8006192:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006196:	d001      	beq.n	800619c <_strtol_l.isra.0+0xc>
 8006198:	2b24      	cmp	r3, #36	; 0x24
 800619a:	d906      	bls.n	80061aa <_strtol_l.isra.0+0x1a>
 800619c:	f7fe fa5e 	bl	800465c <__errno>
 80061a0:	2316      	movs	r3, #22
 80061a2:	6003      	str	r3, [r0, #0]
 80061a4:	2000      	movs	r0, #0
 80061a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061aa:	4f3a      	ldr	r7, [pc, #232]	; (8006294 <_strtol_l.isra.0+0x104>)
 80061ac:	468e      	mov	lr, r1
 80061ae:	4676      	mov	r6, lr
 80061b0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80061b4:	5de5      	ldrb	r5, [r4, r7]
 80061b6:	f015 0508 	ands.w	r5, r5, #8
 80061ba:	d1f8      	bne.n	80061ae <_strtol_l.isra.0+0x1e>
 80061bc:	2c2d      	cmp	r4, #45	; 0x2d
 80061be:	d134      	bne.n	800622a <_strtol_l.isra.0+0x9a>
 80061c0:	f89e 4000 	ldrb.w	r4, [lr]
 80061c4:	f04f 0801 	mov.w	r8, #1
 80061c8:	f106 0e02 	add.w	lr, r6, #2
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d05c      	beq.n	800628a <_strtol_l.isra.0+0xfa>
 80061d0:	2b10      	cmp	r3, #16
 80061d2:	d10c      	bne.n	80061ee <_strtol_l.isra.0+0x5e>
 80061d4:	2c30      	cmp	r4, #48	; 0x30
 80061d6:	d10a      	bne.n	80061ee <_strtol_l.isra.0+0x5e>
 80061d8:	f89e 4000 	ldrb.w	r4, [lr]
 80061dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80061e0:	2c58      	cmp	r4, #88	; 0x58
 80061e2:	d14d      	bne.n	8006280 <_strtol_l.isra.0+0xf0>
 80061e4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80061e8:	2310      	movs	r3, #16
 80061ea:	f10e 0e02 	add.w	lr, lr, #2
 80061ee:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80061f2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80061f6:	2600      	movs	r6, #0
 80061f8:	fbbc f9f3 	udiv	r9, ip, r3
 80061fc:	4635      	mov	r5, r6
 80061fe:	fb03 ca19 	mls	sl, r3, r9, ip
 8006202:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006206:	2f09      	cmp	r7, #9
 8006208:	d818      	bhi.n	800623c <_strtol_l.isra.0+0xac>
 800620a:	463c      	mov	r4, r7
 800620c:	42a3      	cmp	r3, r4
 800620e:	dd24      	ble.n	800625a <_strtol_l.isra.0+0xca>
 8006210:	2e00      	cmp	r6, #0
 8006212:	db1f      	blt.n	8006254 <_strtol_l.isra.0+0xc4>
 8006214:	45a9      	cmp	r9, r5
 8006216:	d31d      	bcc.n	8006254 <_strtol_l.isra.0+0xc4>
 8006218:	d101      	bne.n	800621e <_strtol_l.isra.0+0x8e>
 800621a:	45a2      	cmp	sl, r4
 800621c:	db1a      	blt.n	8006254 <_strtol_l.isra.0+0xc4>
 800621e:	fb05 4503 	mla	r5, r5, r3, r4
 8006222:	2601      	movs	r6, #1
 8006224:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006228:	e7eb      	b.n	8006202 <_strtol_l.isra.0+0x72>
 800622a:	2c2b      	cmp	r4, #43	; 0x2b
 800622c:	bf08      	it	eq
 800622e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8006232:	46a8      	mov	r8, r5
 8006234:	bf08      	it	eq
 8006236:	f106 0e02 	addeq.w	lr, r6, #2
 800623a:	e7c7      	b.n	80061cc <_strtol_l.isra.0+0x3c>
 800623c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006240:	2f19      	cmp	r7, #25
 8006242:	d801      	bhi.n	8006248 <_strtol_l.isra.0+0xb8>
 8006244:	3c37      	subs	r4, #55	; 0x37
 8006246:	e7e1      	b.n	800620c <_strtol_l.isra.0+0x7c>
 8006248:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800624c:	2f19      	cmp	r7, #25
 800624e:	d804      	bhi.n	800625a <_strtol_l.isra.0+0xca>
 8006250:	3c57      	subs	r4, #87	; 0x57
 8006252:	e7db      	b.n	800620c <_strtol_l.isra.0+0x7c>
 8006254:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8006258:	e7e4      	b.n	8006224 <_strtol_l.isra.0+0x94>
 800625a:	2e00      	cmp	r6, #0
 800625c:	da05      	bge.n	800626a <_strtol_l.isra.0+0xda>
 800625e:	2322      	movs	r3, #34	; 0x22
 8006260:	6003      	str	r3, [r0, #0]
 8006262:	4665      	mov	r5, ip
 8006264:	b942      	cbnz	r2, 8006278 <_strtol_l.isra.0+0xe8>
 8006266:	4628      	mov	r0, r5
 8006268:	e79d      	b.n	80061a6 <_strtol_l.isra.0+0x16>
 800626a:	f1b8 0f00 	cmp.w	r8, #0
 800626e:	d000      	beq.n	8006272 <_strtol_l.isra.0+0xe2>
 8006270:	426d      	negs	r5, r5
 8006272:	2a00      	cmp	r2, #0
 8006274:	d0f7      	beq.n	8006266 <_strtol_l.isra.0+0xd6>
 8006276:	b10e      	cbz	r6, 800627c <_strtol_l.isra.0+0xec>
 8006278:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800627c:	6011      	str	r1, [r2, #0]
 800627e:	e7f2      	b.n	8006266 <_strtol_l.isra.0+0xd6>
 8006280:	2430      	movs	r4, #48	; 0x30
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1b3      	bne.n	80061ee <_strtol_l.isra.0+0x5e>
 8006286:	2308      	movs	r3, #8
 8006288:	e7b1      	b.n	80061ee <_strtol_l.isra.0+0x5e>
 800628a:	2c30      	cmp	r4, #48	; 0x30
 800628c:	d0a4      	beq.n	80061d8 <_strtol_l.isra.0+0x48>
 800628e:	230a      	movs	r3, #10
 8006290:	e7ad      	b.n	80061ee <_strtol_l.isra.0+0x5e>
 8006292:	bf00      	nop
 8006294:	0800a0fd 	.word	0x0800a0fd

08006298 <_strtol_r>:
 8006298:	f7ff bf7a 	b.w	8006190 <_strtol_l.isra.0>

0800629c <__swbuf_r>:
 800629c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629e:	460e      	mov	r6, r1
 80062a0:	4614      	mov	r4, r2
 80062a2:	4605      	mov	r5, r0
 80062a4:	b118      	cbz	r0, 80062ae <__swbuf_r+0x12>
 80062a6:	6983      	ldr	r3, [r0, #24]
 80062a8:	b90b      	cbnz	r3, 80062ae <__swbuf_r+0x12>
 80062aa:	f001 f867 	bl	800737c <__sinit>
 80062ae:	4b21      	ldr	r3, [pc, #132]	; (8006334 <__swbuf_r+0x98>)
 80062b0:	429c      	cmp	r4, r3
 80062b2:	d12b      	bne.n	800630c <__swbuf_r+0x70>
 80062b4:	686c      	ldr	r4, [r5, #4]
 80062b6:	69a3      	ldr	r3, [r4, #24]
 80062b8:	60a3      	str	r3, [r4, #8]
 80062ba:	89a3      	ldrh	r3, [r4, #12]
 80062bc:	071a      	lsls	r2, r3, #28
 80062be:	d52f      	bpl.n	8006320 <__swbuf_r+0x84>
 80062c0:	6923      	ldr	r3, [r4, #16]
 80062c2:	b36b      	cbz	r3, 8006320 <__swbuf_r+0x84>
 80062c4:	6923      	ldr	r3, [r4, #16]
 80062c6:	6820      	ldr	r0, [r4, #0]
 80062c8:	1ac0      	subs	r0, r0, r3
 80062ca:	6963      	ldr	r3, [r4, #20]
 80062cc:	b2f6      	uxtb	r6, r6
 80062ce:	4283      	cmp	r3, r0
 80062d0:	4637      	mov	r7, r6
 80062d2:	dc04      	bgt.n	80062de <__swbuf_r+0x42>
 80062d4:	4621      	mov	r1, r4
 80062d6:	4628      	mov	r0, r5
 80062d8:	f000 ffbc 	bl	8007254 <_fflush_r>
 80062dc:	bb30      	cbnz	r0, 800632c <__swbuf_r+0x90>
 80062de:	68a3      	ldr	r3, [r4, #8]
 80062e0:	3b01      	subs	r3, #1
 80062e2:	60a3      	str	r3, [r4, #8]
 80062e4:	6823      	ldr	r3, [r4, #0]
 80062e6:	1c5a      	adds	r2, r3, #1
 80062e8:	6022      	str	r2, [r4, #0]
 80062ea:	701e      	strb	r6, [r3, #0]
 80062ec:	6963      	ldr	r3, [r4, #20]
 80062ee:	3001      	adds	r0, #1
 80062f0:	4283      	cmp	r3, r0
 80062f2:	d004      	beq.n	80062fe <__swbuf_r+0x62>
 80062f4:	89a3      	ldrh	r3, [r4, #12]
 80062f6:	07db      	lsls	r3, r3, #31
 80062f8:	d506      	bpl.n	8006308 <__swbuf_r+0x6c>
 80062fa:	2e0a      	cmp	r6, #10
 80062fc:	d104      	bne.n	8006308 <__swbuf_r+0x6c>
 80062fe:	4621      	mov	r1, r4
 8006300:	4628      	mov	r0, r5
 8006302:	f000 ffa7 	bl	8007254 <_fflush_r>
 8006306:	b988      	cbnz	r0, 800632c <__swbuf_r+0x90>
 8006308:	4638      	mov	r0, r7
 800630a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800630c:	4b0a      	ldr	r3, [pc, #40]	; (8006338 <__swbuf_r+0x9c>)
 800630e:	429c      	cmp	r4, r3
 8006310:	d101      	bne.n	8006316 <__swbuf_r+0x7a>
 8006312:	68ac      	ldr	r4, [r5, #8]
 8006314:	e7cf      	b.n	80062b6 <__swbuf_r+0x1a>
 8006316:	4b09      	ldr	r3, [pc, #36]	; (800633c <__swbuf_r+0xa0>)
 8006318:	429c      	cmp	r4, r3
 800631a:	bf08      	it	eq
 800631c:	68ec      	ldreq	r4, [r5, #12]
 800631e:	e7ca      	b.n	80062b6 <__swbuf_r+0x1a>
 8006320:	4621      	mov	r1, r4
 8006322:	4628      	mov	r0, r5
 8006324:	f000 f80c 	bl	8006340 <__swsetup_r>
 8006328:	2800      	cmp	r0, #0
 800632a:	d0cb      	beq.n	80062c4 <__swbuf_r+0x28>
 800632c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006330:	e7ea      	b.n	8006308 <__swbuf_r+0x6c>
 8006332:	bf00      	nop
 8006334:	0800a2b4 	.word	0x0800a2b4
 8006338:	0800a2d4 	.word	0x0800a2d4
 800633c:	0800a294 	.word	0x0800a294

08006340 <__swsetup_r>:
 8006340:	4b32      	ldr	r3, [pc, #200]	; (800640c <__swsetup_r+0xcc>)
 8006342:	b570      	push	{r4, r5, r6, lr}
 8006344:	681d      	ldr	r5, [r3, #0]
 8006346:	4606      	mov	r6, r0
 8006348:	460c      	mov	r4, r1
 800634a:	b125      	cbz	r5, 8006356 <__swsetup_r+0x16>
 800634c:	69ab      	ldr	r3, [r5, #24]
 800634e:	b913      	cbnz	r3, 8006356 <__swsetup_r+0x16>
 8006350:	4628      	mov	r0, r5
 8006352:	f001 f813 	bl	800737c <__sinit>
 8006356:	4b2e      	ldr	r3, [pc, #184]	; (8006410 <__swsetup_r+0xd0>)
 8006358:	429c      	cmp	r4, r3
 800635a:	d10f      	bne.n	800637c <__swsetup_r+0x3c>
 800635c:	686c      	ldr	r4, [r5, #4]
 800635e:	89a3      	ldrh	r3, [r4, #12]
 8006360:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006364:	0719      	lsls	r1, r3, #28
 8006366:	d42c      	bmi.n	80063c2 <__swsetup_r+0x82>
 8006368:	06dd      	lsls	r5, r3, #27
 800636a:	d411      	bmi.n	8006390 <__swsetup_r+0x50>
 800636c:	2309      	movs	r3, #9
 800636e:	6033      	str	r3, [r6, #0]
 8006370:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006374:	81a3      	strh	r3, [r4, #12]
 8006376:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800637a:	e03e      	b.n	80063fa <__swsetup_r+0xba>
 800637c:	4b25      	ldr	r3, [pc, #148]	; (8006414 <__swsetup_r+0xd4>)
 800637e:	429c      	cmp	r4, r3
 8006380:	d101      	bne.n	8006386 <__swsetup_r+0x46>
 8006382:	68ac      	ldr	r4, [r5, #8]
 8006384:	e7eb      	b.n	800635e <__swsetup_r+0x1e>
 8006386:	4b24      	ldr	r3, [pc, #144]	; (8006418 <__swsetup_r+0xd8>)
 8006388:	429c      	cmp	r4, r3
 800638a:	bf08      	it	eq
 800638c:	68ec      	ldreq	r4, [r5, #12]
 800638e:	e7e6      	b.n	800635e <__swsetup_r+0x1e>
 8006390:	0758      	lsls	r0, r3, #29
 8006392:	d512      	bpl.n	80063ba <__swsetup_r+0x7a>
 8006394:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006396:	b141      	cbz	r1, 80063aa <__swsetup_r+0x6a>
 8006398:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800639c:	4299      	cmp	r1, r3
 800639e:	d002      	beq.n	80063a6 <__swsetup_r+0x66>
 80063a0:	4630      	mov	r0, r6
 80063a2:	f002 f959 	bl	8008658 <_free_r>
 80063a6:	2300      	movs	r3, #0
 80063a8:	6363      	str	r3, [r4, #52]	; 0x34
 80063aa:	89a3      	ldrh	r3, [r4, #12]
 80063ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80063b0:	81a3      	strh	r3, [r4, #12]
 80063b2:	2300      	movs	r3, #0
 80063b4:	6063      	str	r3, [r4, #4]
 80063b6:	6923      	ldr	r3, [r4, #16]
 80063b8:	6023      	str	r3, [r4, #0]
 80063ba:	89a3      	ldrh	r3, [r4, #12]
 80063bc:	f043 0308 	orr.w	r3, r3, #8
 80063c0:	81a3      	strh	r3, [r4, #12]
 80063c2:	6923      	ldr	r3, [r4, #16]
 80063c4:	b94b      	cbnz	r3, 80063da <__swsetup_r+0x9a>
 80063c6:	89a3      	ldrh	r3, [r4, #12]
 80063c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80063cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063d0:	d003      	beq.n	80063da <__swsetup_r+0x9a>
 80063d2:	4621      	mov	r1, r4
 80063d4:	4630      	mov	r0, r6
 80063d6:	f001 fc1b 	bl	8007c10 <__smakebuf_r>
 80063da:	89a0      	ldrh	r0, [r4, #12]
 80063dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063e0:	f010 0301 	ands.w	r3, r0, #1
 80063e4:	d00a      	beq.n	80063fc <__swsetup_r+0xbc>
 80063e6:	2300      	movs	r3, #0
 80063e8:	60a3      	str	r3, [r4, #8]
 80063ea:	6963      	ldr	r3, [r4, #20]
 80063ec:	425b      	negs	r3, r3
 80063ee:	61a3      	str	r3, [r4, #24]
 80063f0:	6923      	ldr	r3, [r4, #16]
 80063f2:	b943      	cbnz	r3, 8006406 <__swsetup_r+0xc6>
 80063f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80063f8:	d1ba      	bne.n	8006370 <__swsetup_r+0x30>
 80063fa:	bd70      	pop	{r4, r5, r6, pc}
 80063fc:	0781      	lsls	r1, r0, #30
 80063fe:	bf58      	it	pl
 8006400:	6963      	ldrpl	r3, [r4, #20]
 8006402:	60a3      	str	r3, [r4, #8]
 8006404:	e7f4      	b.n	80063f0 <__swsetup_r+0xb0>
 8006406:	2000      	movs	r0, #0
 8006408:	e7f7      	b.n	80063fa <__swsetup_r+0xba>
 800640a:	bf00      	nop
 800640c:	2000033c 	.word	0x2000033c
 8006410:	0800a2b4 	.word	0x0800a2b4
 8006414:	0800a2d4 	.word	0x0800a2d4
 8006418:	0800a294 	.word	0x0800a294

0800641c <__assert_func>:
 800641c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800641e:	4614      	mov	r4, r2
 8006420:	461a      	mov	r2, r3
 8006422:	4b09      	ldr	r3, [pc, #36]	; (8006448 <__assert_func+0x2c>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4605      	mov	r5, r0
 8006428:	68d8      	ldr	r0, [r3, #12]
 800642a:	b14c      	cbz	r4, 8006440 <__assert_func+0x24>
 800642c:	4b07      	ldr	r3, [pc, #28]	; (800644c <__assert_func+0x30>)
 800642e:	9100      	str	r1, [sp, #0]
 8006430:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006434:	4906      	ldr	r1, [pc, #24]	; (8006450 <__assert_func+0x34>)
 8006436:	462b      	mov	r3, r5
 8006438:	f001 f81e 	bl	8007478 <fiprintf>
 800643c:	f002 fcf8 	bl	8008e30 <abort>
 8006440:	4b04      	ldr	r3, [pc, #16]	; (8006454 <__assert_func+0x38>)
 8006442:	461c      	mov	r4, r3
 8006444:	e7f3      	b.n	800642e <__assert_func+0x12>
 8006446:	bf00      	nop
 8006448:	2000033c 	.word	0x2000033c
 800644c:	0800a0c0 	.word	0x0800a0c0
 8006450:	0800a0cd 	.word	0x0800a0cd
 8006454:	0800a0fb 	.word	0x0800a0fb

08006458 <quorem>:
 8006458:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800645c:	6903      	ldr	r3, [r0, #16]
 800645e:	690c      	ldr	r4, [r1, #16]
 8006460:	42a3      	cmp	r3, r4
 8006462:	4607      	mov	r7, r0
 8006464:	f2c0 8081 	blt.w	800656a <quorem+0x112>
 8006468:	3c01      	subs	r4, #1
 800646a:	f101 0814 	add.w	r8, r1, #20
 800646e:	f100 0514 	add.w	r5, r0, #20
 8006472:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006476:	9301      	str	r3, [sp, #4]
 8006478:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800647c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006480:	3301      	adds	r3, #1
 8006482:	429a      	cmp	r2, r3
 8006484:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006488:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800648c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006490:	d331      	bcc.n	80064f6 <quorem+0x9e>
 8006492:	f04f 0e00 	mov.w	lr, #0
 8006496:	4640      	mov	r0, r8
 8006498:	46ac      	mov	ip, r5
 800649a:	46f2      	mov	sl, lr
 800649c:	f850 2b04 	ldr.w	r2, [r0], #4
 80064a0:	b293      	uxth	r3, r2
 80064a2:	fb06 e303 	mla	r3, r6, r3, lr
 80064a6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	ebaa 0303 	sub.w	r3, sl, r3
 80064b0:	0c12      	lsrs	r2, r2, #16
 80064b2:	f8dc a000 	ldr.w	sl, [ip]
 80064b6:	fb06 e202 	mla	r2, r6, r2, lr
 80064ba:	fa13 f38a 	uxtah	r3, r3, sl
 80064be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80064c2:	fa1f fa82 	uxth.w	sl, r2
 80064c6:	f8dc 2000 	ldr.w	r2, [ip]
 80064ca:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80064ce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064d8:	4581      	cmp	r9, r0
 80064da:	f84c 3b04 	str.w	r3, [ip], #4
 80064de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80064e2:	d2db      	bcs.n	800649c <quorem+0x44>
 80064e4:	f855 300b 	ldr.w	r3, [r5, fp]
 80064e8:	b92b      	cbnz	r3, 80064f6 <quorem+0x9e>
 80064ea:	9b01      	ldr	r3, [sp, #4]
 80064ec:	3b04      	subs	r3, #4
 80064ee:	429d      	cmp	r5, r3
 80064f0:	461a      	mov	r2, r3
 80064f2:	d32e      	bcc.n	8006552 <quorem+0xfa>
 80064f4:	613c      	str	r4, [r7, #16]
 80064f6:	4638      	mov	r0, r7
 80064f8:	f001 feac 	bl	8008254 <__mcmp>
 80064fc:	2800      	cmp	r0, #0
 80064fe:	db24      	blt.n	800654a <quorem+0xf2>
 8006500:	3601      	adds	r6, #1
 8006502:	4628      	mov	r0, r5
 8006504:	f04f 0c00 	mov.w	ip, #0
 8006508:	f858 2b04 	ldr.w	r2, [r8], #4
 800650c:	f8d0 e000 	ldr.w	lr, [r0]
 8006510:	b293      	uxth	r3, r2
 8006512:	ebac 0303 	sub.w	r3, ip, r3
 8006516:	0c12      	lsrs	r2, r2, #16
 8006518:	fa13 f38e 	uxtah	r3, r3, lr
 800651c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006520:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006524:	b29b      	uxth	r3, r3
 8006526:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800652a:	45c1      	cmp	r9, r8
 800652c:	f840 3b04 	str.w	r3, [r0], #4
 8006530:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006534:	d2e8      	bcs.n	8006508 <quorem+0xb0>
 8006536:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800653a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800653e:	b922      	cbnz	r2, 800654a <quorem+0xf2>
 8006540:	3b04      	subs	r3, #4
 8006542:	429d      	cmp	r5, r3
 8006544:	461a      	mov	r2, r3
 8006546:	d30a      	bcc.n	800655e <quorem+0x106>
 8006548:	613c      	str	r4, [r7, #16]
 800654a:	4630      	mov	r0, r6
 800654c:	b003      	add	sp, #12
 800654e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006552:	6812      	ldr	r2, [r2, #0]
 8006554:	3b04      	subs	r3, #4
 8006556:	2a00      	cmp	r2, #0
 8006558:	d1cc      	bne.n	80064f4 <quorem+0x9c>
 800655a:	3c01      	subs	r4, #1
 800655c:	e7c7      	b.n	80064ee <quorem+0x96>
 800655e:	6812      	ldr	r2, [r2, #0]
 8006560:	3b04      	subs	r3, #4
 8006562:	2a00      	cmp	r2, #0
 8006564:	d1f0      	bne.n	8006548 <quorem+0xf0>
 8006566:	3c01      	subs	r4, #1
 8006568:	e7eb      	b.n	8006542 <quorem+0xea>
 800656a:	2000      	movs	r0, #0
 800656c:	e7ee      	b.n	800654c <quorem+0xf4>
	...

08006570 <_dtoa_r>:
 8006570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006574:	ed2d 8b02 	vpush	{d8}
 8006578:	ec57 6b10 	vmov	r6, r7, d0
 800657c:	b095      	sub	sp, #84	; 0x54
 800657e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006580:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006584:	9105      	str	r1, [sp, #20]
 8006586:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800658a:	4604      	mov	r4, r0
 800658c:	9209      	str	r2, [sp, #36]	; 0x24
 800658e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006590:	b975      	cbnz	r5, 80065b0 <_dtoa_r+0x40>
 8006592:	2010      	movs	r0, #16
 8006594:	f001 fb7c 	bl	8007c90 <malloc>
 8006598:	4602      	mov	r2, r0
 800659a:	6260      	str	r0, [r4, #36]	; 0x24
 800659c:	b920      	cbnz	r0, 80065a8 <_dtoa_r+0x38>
 800659e:	4bb2      	ldr	r3, [pc, #712]	; (8006868 <_dtoa_r+0x2f8>)
 80065a0:	21ea      	movs	r1, #234	; 0xea
 80065a2:	48b2      	ldr	r0, [pc, #712]	; (800686c <_dtoa_r+0x2fc>)
 80065a4:	f7ff ff3a 	bl	800641c <__assert_func>
 80065a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80065ac:	6005      	str	r5, [r0, #0]
 80065ae:	60c5      	str	r5, [r0, #12]
 80065b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065b2:	6819      	ldr	r1, [r3, #0]
 80065b4:	b151      	cbz	r1, 80065cc <_dtoa_r+0x5c>
 80065b6:	685a      	ldr	r2, [r3, #4]
 80065b8:	604a      	str	r2, [r1, #4]
 80065ba:	2301      	movs	r3, #1
 80065bc:	4093      	lsls	r3, r2
 80065be:	608b      	str	r3, [r1, #8]
 80065c0:	4620      	mov	r0, r4
 80065c2:	f001 fbbf 	bl	8007d44 <_Bfree>
 80065c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065c8:	2200      	movs	r2, #0
 80065ca:	601a      	str	r2, [r3, #0]
 80065cc:	1e3b      	subs	r3, r7, #0
 80065ce:	bfb9      	ittee	lt
 80065d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80065d4:	9303      	strlt	r3, [sp, #12]
 80065d6:	2300      	movge	r3, #0
 80065d8:	f8c8 3000 	strge.w	r3, [r8]
 80065dc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80065e0:	4ba3      	ldr	r3, [pc, #652]	; (8006870 <_dtoa_r+0x300>)
 80065e2:	bfbc      	itt	lt
 80065e4:	2201      	movlt	r2, #1
 80065e6:	f8c8 2000 	strlt.w	r2, [r8]
 80065ea:	ea33 0309 	bics.w	r3, r3, r9
 80065ee:	d11b      	bne.n	8006628 <_dtoa_r+0xb8>
 80065f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80065f2:	f242 730f 	movw	r3, #9999	; 0x270f
 80065f6:	6013      	str	r3, [r2, #0]
 80065f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80065fc:	4333      	orrs	r3, r6
 80065fe:	f000 857a 	beq.w	80070f6 <_dtoa_r+0xb86>
 8006602:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006604:	b963      	cbnz	r3, 8006620 <_dtoa_r+0xb0>
 8006606:	4b9b      	ldr	r3, [pc, #620]	; (8006874 <_dtoa_r+0x304>)
 8006608:	e024      	b.n	8006654 <_dtoa_r+0xe4>
 800660a:	4b9b      	ldr	r3, [pc, #620]	; (8006878 <_dtoa_r+0x308>)
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	3308      	adds	r3, #8
 8006610:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006612:	6013      	str	r3, [r2, #0]
 8006614:	9800      	ldr	r0, [sp, #0]
 8006616:	b015      	add	sp, #84	; 0x54
 8006618:	ecbd 8b02 	vpop	{d8}
 800661c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006620:	4b94      	ldr	r3, [pc, #592]	; (8006874 <_dtoa_r+0x304>)
 8006622:	9300      	str	r3, [sp, #0]
 8006624:	3303      	adds	r3, #3
 8006626:	e7f3      	b.n	8006610 <_dtoa_r+0xa0>
 8006628:	ed9d 7b02 	vldr	d7, [sp, #8]
 800662c:	2200      	movs	r2, #0
 800662e:	ec51 0b17 	vmov	r0, r1, d7
 8006632:	2300      	movs	r3, #0
 8006634:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006638:	f7fa fa56 	bl	8000ae8 <__aeabi_dcmpeq>
 800663c:	4680      	mov	r8, r0
 800663e:	b158      	cbz	r0, 8006658 <_dtoa_r+0xe8>
 8006640:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006642:	2301      	movs	r3, #1
 8006644:	6013      	str	r3, [r2, #0]
 8006646:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006648:	2b00      	cmp	r3, #0
 800664a:	f000 8551 	beq.w	80070f0 <_dtoa_r+0xb80>
 800664e:	488b      	ldr	r0, [pc, #556]	; (800687c <_dtoa_r+0x30c>)
 8006650:	6018      	str	r0, [r3, #0]
 8006652:	1e43      	subs	r3, r0, #1
 8006654:	9300      	str	r3, [sp, #0]
 8006656:	e7dd      	b.n	8006614 <_dtoa_r+0xa4>
 8006658:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800665c:	aa12      	add	r2, sp, #72	; 0x48
 800665e:	a913      	add	r1, sp, #76	; 0x4c
 8006660:	4620      	mov	r0, r4
 8006662:	f001 ff17 	bl	8008494 <__d2b>
 8006666:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800666a:	4683      	mov	fp, r0
 800666c:	2d00      	cmp	r5, #0
 800666e:	d07c      	beq.n	800676a <_dtoa_r+0x1fa>
 8006670:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006672:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006676:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800667a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800667e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006682:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006686:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800668a:	4b7d      	ldr	r3, [pc, #500]	; (8006880 <_dtoa_r+0x310>)
 800668c:	2200      	movs	r2, #0
 800668e:	4630      	mov	r0, r6
 8006690:	4639      	mov	r1, r7
 8006692:	f7f9 fe09 	bl	80002a8 <__aeabi_dsub>
 8006696:	a36e      	add	r3, pc, #440	; (adr r3, 8006850 <_dtoa_r+0x2e0>)
 8006698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669c:	f7f9 ffbc 	bl	8000618 <__aeabi_dmul>
 80066a0:	a36d      	add	r3, pc, #436	; (adr r3, 8006858 <_dtoa_r+0x2e8>)
 80066a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a6:	f7f9 fe01 	bl	80002ac <__adddf3>
 80066aa:	4606      	mov	r6, r0
 80066ac:	4628      	mov	r0, r5
 80066ae:	460f      	mov	r7, r1
 80066b0:	f7f9 ff48 	bl	8000544 <__aeabi_i2d>
 80066b4:	a36a      	add	r3, pc, #424	; (adr r3, 8006860 <_dtoa_r+0x2f0>)
 80066b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ba:	f7f9 ffad 	bl	8000618 <__aeabi_dmul>
 80066be:	4602      	mov	r2, r0
 80066c0:	460b      	mov	r3, r1
 80066c2:	4630      	mov	r0, r6
 80066c4:	4639      	mov	r1, r7
 80066c6:	f7f9 fdf1 	bl	80002ac <__adddf3>
 80066ca:	4606      	mov	r6, r0
 80066cc:	460f      	mov	r7, r1
 80066ce:	f7fa fa53 	bl	8000b78 <__aeabi_d2iz>
 80066d2:	2200      	movs	r2, #0
 80066d4:	4682      	mov	sl, r0
 80066d6:	2300      	movs	r3, #0
 80066d8:	4630      	mov	r0, r6
 80066da:	4639      	mov	r1, r7
 80066dc:	f7fa fa0e 	bl	8000afc <__aeabi_dcmplt>
 80066e0:	b148      	cbz	r0, 80066f6 <_dtoa_r+0x186>
 80066e2:	4650      	mov	r0, sl
 80066e4:	f7f9 ff2e 	bl	8000544 <__aeabi_i2d>
 80066e8:	4632      	mov	r2, r6
 80066ea:	463b      	mov	r3, r7
 80066ec:	f7fa f9fc 	bl	8000ae8 <__aeabi_dcmpeq>
 80066f0:	b908      	cbnz	r0, 80066f6 <_dtoa_r+0x186>
 80066f2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80066f6:	f1ba 0f16 	cmp.w	sl, #22
 80066fa:	d854      	bhi.n	80067a6 <_dtoa_r+0x236>
 80066fc:	4b61      	ldr	r3, [pc, #388]	; (8006884 <_dtoa_r+0x314>)
 80066fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006706:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800670a:	f7fa f9f7 	bl	8000afc <__aeabi_dcmplt>
 800670e:	2800      	cmp	r0, #0
 8006710:	d04b      	beq.n	80067aa <_dtoa_r+0x23a>
 8006712:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006716:	2300      	movs	r3, #0
 8006718:	930e      	str	r3, [sp, #56]	; 0x38
 800671a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800671c:	1b5d      	subs	r5, r3, r5
 800671e:	1e6b      	subs	r3, r5, #1
 8006720:	9304      	str	r3, [sp, #16]
 8006722:	bf43      	ittte	mi
 8006724:	2300      	movmi	r3, #0
 8006726:	f1c5 0801 	rsbmi	r8, r5, #1
 800672a:	9304      	strmi	r3, [sp, #16]
 800672c:	f04f 0800 	movpl.w	r8, #0
 8006730:	f1ba 0f00 	cmp.w	sl, #0
 8006734:	db3b      	blt.n	80067ae <_dtoa_r+0x23e>
 8006736:	9b04      	ldr	r3, [sp, #16]
 8006738:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800673c:	4453      	add	r3, sl
 800673e:	9304      	str	r3, [sp, #16]
 8006740:	2300      	movs	r3, #0
 8006742:	9306      	str	r3, [sp, #24]
 8006744:	9b05      	ldr	r3, [sp, #20]
 8006746:	2b09      	cmp	r3, #9
 8006748:	d869      	bhi.n	800681e <_dtoa_r+0x2ae>
 800674a:	2b05      	cmp	r3, #5
 800674c:	bfc4      	itt	gt
 800674e:	3b04      	subgt	r3, #4
 8006750:	9305      	strgt	r3, [sp, #20]
 8006752:	9b05      	ldr	r3, [sp, #20]
 8006754:	f1a3 0302 	sub.w	r3, r3, #2
 8006758:	bfcc      	ite	gt
 800675a:	2500      	movgt	r5, #0
 800675c:	2501      	movle	r5, #1
 800675e:	2b03      	cmp	r3, #3
 8006760:	d869      	bhi.n	8006836 <_dtoa_r+0x2c6>
 8006762:	e8df f003 	tbb	[pc, r3]
 8006766:	4e2c      	.short	0x4e2c
 8006768:	5a4c      	.short	0x5a4c
 800676a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800676e:	441d      	add	r5, r3
 8006770:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006774:	2b20      	cmp	r3, #32
 8006776:	bfc1      	itttt	gt
 8006778:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800677c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006780:	fa09 f303 	lslgt.w	r3, r9, r3
 8006784:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006788:	bfda      	itte	le
 800678a:	f1c3 0320 	rsble	r3, r3, #32
 800678e:	fa06 f003 	lslle.w	r0, r6, r3
 8006792:	4318      	orrgt	r0, r3
 8006794:	f7f9 fec6 	bl	8000524 <__aeabi_ui2d>
 8006798:	2301      	movs	r3, #1
 800679a:	4606      	mov	r6, r0
 800679c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80067a0:	3d01      	subs	r5, #1
 80067a2:	9310      	str	r3, [sp, #64]	; 0x40
 80067a4:	e771      	b.n	800668a <_dtoa_r+0x11a>
 80067a6:	2301      	movs	r3, #1
 80067a8:	e7b6      	b.n	8006718 <_dtoa_r+0x1a8>
 80067aa:	900e      	str	r0, [sp, #56]	; 0x38
 80067ac:	e7b5      	b.n	800671a <_dtoa_r+0x1aa>
 80067ae:	f1ca 0300 	rsb	r3, sl, #0
 80067b2:	9306      	str	r3, [sp, #24]
 80067b4:	2300      	movs	r3, #0
 80067b6:	eba8 080a 	sub.w	r8, r8, sl
 80067ba:	930d      	str	r3, [sp, #52]	; 0x34
 80067bc:	e7c2      	b.n	8006744 <_dtoa_r+0x1d4>
 80067be:	2300      	movs	r3, #0
 80067c0:	9308      	str	r3, [sp, #32]
 80067c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	dc39      	bgt.n	800683c <_dtoa_r+0x2cc>
 80067c8:	f04f 0901 	mov.w	r9, #1
 80067cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80067d0:	464b      	mov	r3, r9
 80067d2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80067d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80067d8:	2200      	movs	r2, #0
 80067da:	6042      	str	r2, [r0, #4]
 80067dc:	2204      	movs	r2, #4
 80067de:	f102 0614 	add.w	r6, r2, #20
 80067e2:	429e      	cmp	r6, r3
 80067e4:	6841      	ldr	r1, [r0, #4]
 80067e6:	d92f      	bls.n	8006848 <_dtoa_r+0x2d8>
 80067e8:	4620      	mov	r0, r4
 80067ea:	f001 fa6b 	bl	8007cc4 <_Balloc>
 80067ee:	9000      	str	r0, [sp, #0]
 80067f0:	2800      	cmp	r0, #0
 80067f2:	d14b      	bne.n	800688c <_dtoa_r+0x31c>
 80067f4:	4b24      	ldr	r3, [pc, #144]	; (8006888 <_dtoa_r+0x318>)
 80067f6:	4602      	mov	r2, r0
 80067f8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80067fc:	e6d1      	b.n	80065a2 <_dtoa_r+0x32>
 80067fe:	2301      	movs	r3, #1
 8006800:	e7de      	b.n	80067c0 <_dtoa_r+0x250>
 8006802:	2300      	movs	r3, #0
 8006804:	9308      	str	r3, [sp, #32]
 8006806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006808:	eb0a 0903 	add.w	r9, sl, r3
 800680c:	f109 0301 	add.w	r3, r9, #1
 8006810:	2b01      	cmp	r3, #1
 8006812:	9301      	str	r3, [sp, #4]
 8006814:	bfb8      	it	lt
 8006816:	2301      	movlt	r3, #1
 8006818:	e7dd      	b.n	80067d6 <_dtoa_r+0x266>
 800681a:	2301      	movs	r3, #1
 800681c:	e7f2      	b.n	8006804 <_dtoa_r+0x294>
 800681e:	2501      	movs	r5, #1
 8006820:	2300      	movs	r3, #0
 8006822:	9305      	str	r3, [sp, #20]
 8006824:	9508      	str	r5, [sp, #32]
 8006826:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800682a:	2200      	movs	r2, #0
 800682c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006830:	2312      	movs	r3, #18
 8006832:	9209      	str	r2, [sp, #36]	; 0x24
 8006834:	e7cf      	b.n	80067d6 <_dtoa_r+0x266>
 8006836:	2301      	movs	r3, #1
 8006838:	9308      	str	r3, [sp, #32]
 800683a:	e7f4      	b.n	8006826 <_dtoa_r+0x2b6>
 800683c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006840:	f8cd 9004 	str.w	r9, [sp, #4]
 8006844:	464b      	mov	r3, r9
 8006846:	e7c6      	b.n	80067d6 <_dtoa_r+0x266>
 8006848:	3101      	adds	r1, #1
 800684a:	6041      	str	r1, [r0, #4]
 800684c:	0052      	lsls	r2, r2, #1
 800684e:	e7c6      	b.n	80067de <_dtoa_r+0x26e>
 8006850:	636f4361 	.word	0x636f4361
 8006854:	3fd287a7 	.word	0x3fd287a7
 8006858:	8b60c8b3 	.word	0x8b60c8b3
 800685c:	3fc68a28 	.word	0x3fc68a28
 8006860:	509f79fb 	.word	0x509f79fb
 8006864:	3fd34413 	.word	0x3fd34413
 8006868:	0800a20a 	.word	0x0800a20a
 800686c:	0800a221 	.word	0x0800a221
 8006870:	7ff00000 	.word	0x7ff00000
 8006874:	0800a206 	.word	0x0800a206
 8006878:	0800a1fd 	.word	0x0800a1fd
 800687c:	0800a041 	.word	0x0800a041
 8006880:	3ff80000 	.word	0x3ff80000
 8006884:	0800a400 	.word	0x0800a400
 8006888:	0800a280 	.word	0x0800a280
 800688c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800688e:	9a00      	ldr	r2, [sp, #0]
 8006890:	601a      	str	r2, [r3, #0]
 8006892:	9b01      	ldr	r3, [sp, #4]
 8006894:	2b0e      	cmp	r3, #14
 8006896:	f200 80ad 	bhi.w	80069f4 <_dtoa_r+0x484>
 800689a:	2d00      	cmp	r5, #0
 800689c:	f000 80aa 	beq.w	80069f4 <_dtoa_r+0x484>
 80068a0:	f1ba 0f00 	cmp.w	sl, #0
 80068a4:	dd36      	ble.n	8006914 <_dtoa_r+0x3a4>
 80068a6:	4ac3      	ldr	r2, [pc, #780]	; (8006bb4 <_dtoa_r+0x644>)
 80068a8:	f00a 030f 	and.w	r3, sl, #15
 80068ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80068b0:	ed93 7b00 	vldr	d7, [r3]
 80068b4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80068b8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80068bc:	eeb0 8a47 	vmov.f32	s16, s14
 80068c0:	eef0 8a67 	vmov.f32	s17, s15
 80068c4:	d016      	beq.n	80068f4 <_dtoa_r+0x384>
 80068c6:	4bbc      	ldr	r3, [pc, #752]	; (8006bb8 <_dtoa_r+0x648>)
 80068c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80068cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80068d0:	f7f9 ffcc 	bl	800086c <__aeabi_ddiv>
 80068d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068d8:	f007 070f 	and.w	r7, r7, #15
 80068dc:	2503      	movs	r5, #3
 80068de:	4eb6      	ldr	r6, [pc, #728]	; (8006bb8 <_dtoa_r+0x648>)
 80068e0:	b957      	cbnz	r7, 80068f8 <_dtoa_r+0x388>
 80068e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068e6:	ec53 2b18 	vmov	r2, r3, d8
 80068ea:	f7f9 ffbf 	bl	800086c <__aeabi_ddiv>
 80068ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068f2:	e029      	b.n	8006948 <_dtoa_r+0x3d8>
 80068f4:	2502      	movs	r5, #2
 80068f6:	e7f2      	b.n	80068de <_dtoa_r+0x36e>
 80068f8:	07f9      	lsls	r1, r7, #31
 80068fa:	d508      	bpl.n	800690e <_dtoa_r+0x39e>
 80068fc:	ec51 0b18 	vmov	r0, r1, d8
 8006900:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006904:	f7f9 fe88 	bl	8000618 <__aeabi_dmul>
 8006908:	ec41 0b18 	vmov	d8, r0, r1
 800690c:	3501      	adds	r5, #1
 800690e:	107f      	asrs	r7, r7, #1
 8006910:	3608      	adds	r6, #8
 8006912:	e7e5      	b.n	80068e0 <_dtoa_r+0x370>
 8006914:	f000 80a6 	beq.w	8006a64 <_dtoa_r+0x4f4>
 8006918:	f1ca 0600 	rsb	r6, sl, #0
 800691c:	4ba5      	ldr	r3, [pc, #660]	; (8006bb4 <_dtoa_r+0x644>)
 800691e:	4fa6      	ldr	r7, [pc, #664]	; (8006bb8 <_dtoa_r+0x648>)
 8006920:	f006 020f 	and.w	r2, r6, #15
 8006924:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800692c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006930:	f7f9 fe72 	bl	8000618 <__aeabi_dmul>
 8006934:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006938:	1136      	asrs	r6, r6, #4
 800693a:	2300      	movs	r3, #0
 800693c:	2502      	movs	r5, #2
 800693e:	2e00      	cmp	r6, #0
 8006940:	f040 8085 	bne.w	8006a4e <_dtoa_r+0x4de>
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1d2      	bne.n	80068ee <_dtoa_r+0x37e>
 8006948:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800694a:	2b00      	cmp	r3, #0
 800694c:	f000 808c 	beq.w	8006a68 <_dtoa_r+0x4f8>
 8006950:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006954:	4b99      	ldr	r3, [pc, #612]	; (8006bbc <_dtoa_r+0x64c>)
 8006956:	2200      	movs	r2, #0
 8006958:	4630      	mov	r0, r6
 800695a:	4639      	mov	r1, r7
 800695c:	f7fa f8ce 	bl	8000afc <__aeabi_dcmplt>
 8006960:	2800      	cmp	r0, #0
 8006962:	f000 8081 	beq.w	8006a68 <_dtoa_r+0x4f8>
 8006966:	9b01      	ldr	r3, [sp, #4]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d07d      	beq.n	8006a68 <_dtoa_r+0x4f8>
 800696c:	f1b9 0f00 	cmp.w	r9, #0
 8006970:	dd3c      	ble.n	80069ec <_dtoa_r+0x47c>
 8006972:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8006976:	9307      	str	r3, [sp, #28]
 8006978:	2200      	movs	r2, #0
 800697a:	4b91      	ldr	r3, [pc, #580]	; (8006bc0 <_dtoa_r+0x650>)
 800697c:	4630      	mov	r0, r6
 800697e:	4639      	mov	r1, r7
 8006980:	f7f9 fe4a 	bl	8000618 <__aeabi_dmul>
 8006984:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006988:	3501      	adds	r5, #1
 800698a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800698e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006992:	4628      	mov	r0, r5
 8006994:	f7f9 fdd6 	bl	8000544 <__aeabi_i2d>
 8006998:	4632      	mov	r2, r6
 800699a:	463b      	mov	r3, r7
 800699c:	f7f9 fe3c 	bl	8000618 <__aeabi_dmul>
 80069a0:	4b88      	ldr	r3, [pc, #544]	; (8006bc4 <_dtoa_r+0x654>)
 80069a2:	2200      	movs	r2, #0
 80069a4:	f7f9 fc82 	bl	80002ac <__adddf3>
 80069a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80069ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069b0:	9303      	str	r3, [sp, #12]
 80069b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d15c      	bne.n	8006a72 <_dtoa_r+0x502>
 80069b8:	4b83      	ldr	r3, [pc, #524]	; (8006bc8 <_dtoa_r+0x658>)
 80069ba:	2200      	movs	r2, #0
 80069bc:	4630      	mov	r0, r6
 80069be:	4639      	mov	r1, r7
 80069c0:	f7f9 fc72 	bl	80002a8 <__aeabi_dsub>
 80069c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069c8:	4606      	mov	r6, r0
 80069ca:	460f      	mov	r7, r1
 80069cc:	f7fa f8b4 	bl	8000b38 <__aeabi_dcmpgt>
 80069d0:	2800      	cmp	r0, #0
 80069d2:	f040 8296 	bne.w	8006f02 <_dtoa_r+0x992>
 80069d6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80069da:	4630      	mov	r0, r6
 80069dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80069e0:	4639      	mov	r1, r7
 80069e2:	f7fa f88b 	bl	8000afc <__aeabi_dcmplt>
 80069e6:	2800      	cmp	r0, #0
 80069e8:	f040 8288 	bne.w	8006efc <_dtoa_r+0x98c>
 80069ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80069f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80069f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	f2c0 8158 	blt.w	8006cac <_dtoa_r+0x73c>
 80069fc:	f1ba 0f0e 	cmp.w	sl, #14
 8006a00:	f300 8154 	bgt.w	8006cac <_dtoa_r+0x73c>
 8006a04:	4b6b      	ldr	r3, [pc, #428]	; (8006bb4 <_dtoa_r+0x644>)
 8006a06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006a0a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f280 80e3 	bge.w	8006bdc <_dtoa_r+0x66c>
 8006a16:	9b01      	ldr	r3, [sp, #4]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f300 80df 	bgt.w	8006bdc <_dtoa_r+0x66c>
 8006a1e:	f040 826d 	bne.w	8006efc <_dtoa_r+0x98c>
 8006a22:	4b69      	ldr	r3, [pc, #420]	; (8006bc8 <_dtoa_r+0x658>)
 8006a24:	2200      	movs	r2, #0
 8006a26:	4640      	mov	r0, r8
 8006a28:	4649      	mov	r1, r9
 8006a2a:	f7f9 fdf5 	bl	8000618 <__aeabi_dmul>
 8006a2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a32:	f7fa f877 	bl	8000b24 <__aeabi_dcmpge>
 8006a36:	9e01      	ldr	r6, [sp, #4]
 8006a38:	4637      	mov	r7, r6
 8006a3a:	2800      	cmp	r0, #0
 8006a3c:	f040 8243 	bne.w	8006ec6 <_dtoa_r+0x956>
 8006a40:	9d00      	ldr	r5, [sp, #0]
 8006a42:	2331      	movs	r3, #49	; 0x31
 8006a44:	f805 3b01 	strb.w	r3, [r5], #1
 8006a48:	f10a 0a01 	add.w	sl, sl, #1
 8006a4c:	e23f      	b.n	8006ece <_dtoa_r+0x95e>
 8006a4e:	07f2      	lsls	r2, r6, #31
 8006a50:	d505      	bpl.n	8006a5e <_dtoa_r+0x4ee>
 8006a52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a56:	f7f9 fddf 	bl	8000618 <__aeabi_dmul>
 8006a5a:	3501      	adds	r5, #1
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	1076      	asrs	r6, r6, #1
 8006a60:	3708      	adds	r7, #8
 8006a62:	e76c      	b.n	800693e <_dtoa_r+0x3ce>
 8006a64:	2502      	movs	r5, #2
 8006a66:	e76f      	b.n	8006948 <_dtoa_r+0x3d8>
 8006a68:	9b01      	ldr	r3, [sp, #4]
 8006a6a:	f8cd a01c 	str.w	sl, [sp, #28]
 8006a6e:	930c      	str	r3, [sp, #48]	; 0x30
 8006a70:	e78d      	b.n	800698e <_dtoa_r+0x41e>
 8006a72:	9900      	ldr	r1, [sp, #0]
 8006a74:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006a76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a78:	4b4e      	ldr	r3, [pc, #312]	; (8006bb4 <_dtoa_r+0x644>)
 8006a7a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a7e:	4401      	add	r1, r0
 8006a80:	9102      	str	r1, [sp, #8]
 8006a82:	9908      	ldr	r1, [sp, #32]
 8006a84:	eeb0 8a47 	vmov.f32	s16, s14
 8006a88:	eef0 8a67 	vmov.f32	s17, s15
 8006a8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a90:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a94:	2900      	cmp	r1, #0
 8006a96:	d045      	beq.n	8006b24 <_dtoa_r+0x5b4>
 8006a98:	494c      	ldr	r1, [pc, #304]	; (8006bcc <_dtoa_r+0x65c>)
 8006a9a:	2000      	movs	r0, #0
 8006a9c:	f7f9 fee6 	bl	800086c <__aeabi_ddiv>
 8006aa0:	ec53 2b18 	vmov	r2, r3, d8
 8006aa4:	f7f9 fc00 	bl	80002a8 <__aeabi_dsub>
 8006aa8:	9d00      	ldr	r5, [sp, #0]
 8006aaa:	ec41 0b18 	vmov	d8, r0, r1
 8006aae:	4639      	mov	r1, r7
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	f7fa f861 	bl	8000b78 <__aeabi_d2iz>
 8006ab6:	900c      	str	r0, [sp, #48]	; 0x30
 8006ab8:	f7f9 fd44 	bl	8000544 <__aeabi_i2d>
 8006abc:	4602      	mov	r2, r0
 8006abe:	460b      	mov	r3, r1
 8006ac0:	4630      	mov	r0, r6
 8006ac2:	4639      	mov	r1, r7
 8006ac4:	f7f9 fbf0 	bl	80002a8 <__aeabi_dsub>
 8006ac8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006aca:	3330      	adds	r3, #48	; 0x30
 8006acc:	f805 3b01 	strb.w	r3, [r5], #1
 8006ad0:	ec53 2b18 	vmov	r2, r3, d8
 8006ad4:	4606      	mov	r6, r0
 8006ad6:	460f      	mov	r7, r1
 8006ad8:	f7fa f810 	bl	8000afc <__aeabi_dcmplt>
 8006adc:	2800      	cmp	r0, #0
 8006ade:	d165      	bne.n	8006bac <_dtoa_r+0x63c>
 8006ae0:	4632      	mov	r2, r6
 8006ae2:	463b      	mov	r3, r7
 8006ae4:	4935      	ldr	r1, [pc, #212]	; (8006bbc <_dtoa_r+0x64c>)
 8006ae6:	2000      	movs	r0, #0
 8006ae8:	f7f9 fbde 	bl	80002a8 <__aeabi_dsub>
 8006aec:	ec53 2b18 	vmov	r2, r3, d8
 8006af0:	f7fa f804 	bl	8000afc <__aeabi_dcmplt>
 8006af4:	2800      	cmp	r0, #0
 8006af6:	f040 80b9 	bne.w	8006c6c <_dtoa_r+0x6fc>
 8006afa:	9b02      	ldr	r3, [sp, #8]
 8006afc:	429d      	cmp	r5, r3
 8006afe:	f43f af75 	beq.w	80069ec <_dtoa_r+0x47c>
 8006b02:	4b2f      	ldr	r3, [pc, #188]	; (8006bc0 <_dtoa_r+0x650>)
 8006b04:	ec51 0b18 	vmov	r0, r1, d8
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f7f9 fd85 	bl	8000618 <__aeabi_dmul>
 8006b0e:	4b2c      	ldr	r3, [pc, #176]	; (8006bc0 <_dtoa_r+0x650>)
 8006b10:	ec41 0b18 	vmov	d8, r0, r1
 8006b14:	2200      	movs	r2, #0
 8006b16:	4630      	mov	r0, r6
 8006b18:	4639      	mov	r1, r7
 8006b1a:	f7f9 fd7d 	bl	8000618 <__aeabi_dmul>
 8006b1e:	4606      	mov	r6, r0
 8006b20:	460f      	mov	r7, r1
 8006b22:	e7c4      	b.n	8006aae <_dtoa_r+0x53e>
 8006b24:	ec51 0b17 	vmov	r0, r1, d7
 8006b28:	f7f9 fd76 	bl	8000618 <__aeabi_dmul>
 8006b2c:	9b02      	ldr	r3, [sp, #8]
 8006b2e:	9d00      	ldr	r5, [sp, #0]
 8006b30:	930c      	str	r3, [sp, #48]	; 0x30
 8006b32:	ec41 0b18 	vmov	d8, r0, r1
 8006b36:	4639      	mov	r1, r7
 8006b38:	4630      	mov	r0, r6
 8006b3a:	f7fa f81d 	bl	8000b78 <__aeabi_d2iz>
 8006b3e:	9011      	str	r0, [sp, #68]	; 0x44
 8006b40:	f7f9 fd00 	bl	8000544 <__aeabi_i2d>
 8006b44:	4602      	mov	r2, r0
 8006b46:	460b      	mov	r3, r1
 8006b48:	4630      	mov	r0, r6
 8006b4a:	4639      	mov	r1, r7
 8006b4c:	f7f9 fbac 	bl	80002a8 <__aeabi_dsub>
 8006b50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b52:	3330      	adds	r3, #48	; 0x30
 8006b54:	f805 3b01 	strb.w	r3, [r5], #1
 8006b58:	9b02      	ldr	r3, [sp, #8]
 8006b5a:	429d      	cmp	r5, r3
 8006b5c:	4606      	mov	r6, r0
 8006b5e:	460f      	mov	r7, r1
 8006b60:	f04f 0200 	mov.w	r2, #0
 8006b64:	d134      	bne.n	8006bd0 <_dtoa_r+0x660>
 8006b66:	4b19      	ldr	r3, [pc, #100]	; (8006bcc <_dtoa_r+0x65c>)
 8006b68:	ec51 0b18 	vmov	r0, r1, d8
 8006b6c:	f7f9 fb9e 	bl	80002ac <__adddf3>
 8006b70:	4602      	mov	r2, r0
 8006b72:	460b      	mov	r3, r1
 8006b74:	4630      	mov	r0, r6
 8006b76:	4639      	mov	r1, r7
 8006b78:	f7f9 ffde 	bl	8000b38 <__aeabi_dcmpgt>
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	d175      	bne.n	8006c6c <_dtoa_r+0x6fc>
 8006b80:	ec53 2b18 	vmov	r2, r3, d8
 8006b84:	4911      	ldr	r1, [pc, #68]	; (8006bcc <_dtoa_r+0x65c>)
 8006b86:	2000      	movs	r0, #0
 8006b88:	f7f9 fb8e 	bl	80002a8 <__aeabi_dsub>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	460b      	mov	r3, r1
 8006b90:	4630      	mov	r0, r6
 8006b92:	4639      	mov	r1, r7
 8006b94:	f7f9 ffb2 	bl	8000afc <__aeabi_dcmplt>
 8006b98:	2800      	cmp	r0, #0
 8006b9a:	f43f af27 	beq.w	80069ec <_dtoa_r+0x47c>
 8006b9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ba0:	1e6b      	subs	r3, r5, #1
 8006ba2:	930c      	str	r3, [sp, #48]	; 0x30
 8006ba4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ba8:	2b30      	cmp	r3, #48	; 0x30
 8006baa:	d0f8      	beq.n	8006b9e <_dtoa_r+0x62e>
 8006bac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006bb0:	e04a      	b.n	8006c48 <_dtoa_r+0x6d8>
 8006bb2:	bf00      	nop
 8006bb4:	0800a400 	.word	0x0800a400
 8006bb8:	0800a3d8 	.word	0x0800a3d8
 8006bbc:	3ff00000 	.word	0x3ff00000
 8006bc0:	40240000 	.word	0x40240000
 8006bc4:	401c0000 	.word	0x401c0000
 8006bc8:	40140000 	.word	0x40140000
 8006bcc:	3fe00000 	.word	0x3fe00000
 8006bd0:	4baf      	ldr	r3, [pc, #700]	; (8006e90 <_dtoa_r+0x920>)
 8006bd2:	f7f9 fd21 	bl	8000618 <__aeabi_dmul>
 8006bd6:	4606      	mov	r6, r0
 8006bd8:	460f      	mov	r7, r1
 8006bda:	e7ac      	b.n	8006b36 <_dtoa_r+0x5c6>
 8006bdc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006be0:	9d00      	ldr	r5, [sp, #0]
 8006be2:	4642      	mov	r2, r8
 8006be4:	464b      	mov	r3, r9
 8006be6:	4630      	mov	r0, r6
 8006be8:	4639      	mov	r1, r7
 8006bea:	f7f9 fe3f 	bl	800086c <__aeabi_ddiv>
 8006bee:	f7f9 ffc3 	bl	8000b78 <__aeabi_d2iz>
 8006bf2:	9002      	str	r0, [sp, #8]
 8006bf4:	f7f9 fca6 	bl	8000544 <__aeabi_i2d>
 8006bf8:	4642      	mov	r2, r8
 8006bfa:	464b      	mov	r3, r9
 8006bfc:	f7f9 fd0c 	bl	8000618 <__aeabi_dmul>
 8006c00:	4602      	mov	r2, r0
 8006c02:	460b      	mov	r3, r1
 8006c04:	4630      	mov	r0, r6
 8006c06:	4639      	mov	r1, r7
 8006c08:	f7f9 fb4e 	bl	80002a8 <__aeabi_dsub>
 8006c0c:	9e02      	ldr	r6, [sp, #8]
 8006c0e:	9f01      	ldr	r7, [sp, #4]
 8006c10:	3630      	adds	r6, #48	; 0x30
 8006c12:	f805 6b01 	strb.w	r6, [r5], #1
 8006c16:	9e00      	ldr	r6, [sp, #0]
 8006c18:	1bae      	subs	r6, r5, r6
 8006c1a:	42b7      	cmp	r7, r6
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	460b      	mov	r3, r1
 8006c20:	d137      	bne.n	8006c92 <_dtoa_r+0x722>
 8006c22:	f7f9 fb43 	bl	80002ac <__adddf3>
 8006c26:	4642      	mov	r2, r8
 8006c28:	464b      	mov	r3, r9
 8006c2a:	4606      	mov	r6, r0
 8006c2c:	460f      	mov	r7, r1
 8006c2e:	f7f9 ff83 	bl	8000b38 <__aeabi_dcmpgt>
 8006c32:	b9c8      	cbnz	r0, 8006c68 <_dtoa_r+0x6f8>
 8006c34:	4642      	mov	r2, r8
 8006c36:	464b      	mov	r3, r9
 8006c38:	4630      	mov	r0, r6
 8006c3a:	4639      	mov	r1, r7
 8006c3c:	f7f9 ff54 	bl	8000ae8 <__aeabi_dcmpeq>
 8006c40:	b110      	cbz	r0, 8006c48 <_dtoa_r+0x6d8>
 8006c42:	9b02      	ldr	r3, [sp, #8]
 8006c44:	07d9      	lsls	r1, r3, #31
 8006c46:	d40f      	bmi.n	8006c68 <_dtoa_r+0x6f8>
 8006c48:	4620      	mov	r0, r4
 8006c4a:	4659      	mov	r1, fp
 8006c4c:	f001 f87a 	bl	8007d44 <_Bfree>
 8006c50:	2300      	movs	r3, #0
 8006c52:	702b      	strb	r3, [r5, #0]
 8006c54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c56:	f10a 0001 	add.w	r0, sl, #1
 8006c5a:	6018      	str	r0, [r3, #0]
 8006c5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f43f acd8 	beq.w	8006614 <_dtoa_r+0xa4>
 8006c64:	601d      	str	r5, [r3, #0]
 8006c66:	e4d5      	b.n	8006614 <_dtoa_r+0xa4>
 8006c68:	f8cd a01c 	str.w	sl, [sp, #28]
 8006c6c:	462b      	mov	r3, r5
 8006c6e:	461d      	mov	r5, r3
 8006c70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c74:	2a39      	cmp	r2, #57	; 0x39
 8006c76:	d108      	bne.n	8006c8a <_dtoa_r+0x71a>
 8006c78:	9a00      	ldr	r2, [sp, #0]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d1f7      	bne.n	8006c6e <_dtoa_r+0x6fe>
 8006c7e:	9a07      	ldr	r2, [sp, #28]
 8006c80:	9900      	ldr	r1, [sp, #0]
 8006c82:	3201      	adds	r2, #1
 8006c84:	9207      	str	r2, [sp, #28]
 8006c86:	2230      	movs	r2, #48	; 0x30
 8006c88:	700a      	strb	r2, [r1, #0]
 8006c8a:	781a      	ldrb	r2, [r3, #0]
 8006c8c:	3201      	adds	r2, #1
 8006c8e:	701a      	strb	r2, [r3, #0]
 8006c90:	e78c      	b.n	8006bac <_dtoa_r+0x63c>
 8006c92:	4b7f      	ldr	r3, [pc, #508]	; (8006e90 <_dtoa_r+0x920>)
 8006c94:	2200      	movs	r2, #0
 8006c96:	f7f9 fcbf 	bl	8000618 <__aeabi_dmul>
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	4606      	mov	r6, r0
 8006ca0:	460f      	mov	r7, r1
 8006ca2:	f7f9 ff21 	bl	8000ae8 <__aeabi_dcmpeq>
 8006ca6:	2800      	cmp	r0, #0
 8006ca8:	d09b      	beq.n	8006be2 <_dtoa_r+0x672>
 8006caa:	e7cd      	b.n	8006c48 <_dtoa_r+0x6d8>
 8006cac:	9a08      	ldr	r2, [sp, #32]
 8006cae:	2a00      	cmp	r2, #0
 8006cb0:	f000 80c4 	beq.w	8006e3c <_dtoa_r+0x8cc>
 8006cb4:	9a05      	ldr	r2, [sp, #20]
 8006cb6:	2a01      	cmp	r2, #1
 8006cb8:	f300 80a8 	bgt.w	8006e0c <_dtoa_r+0x89c>
 8006cbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006cbe:	2a00      	cmp	r2, #0
 8006cc0:	f000 80a0 	beq.w	8006e04 <_dtoa_r+0x894>
 8006cc4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006cc8:	9e06      	ldr	r6, [sp, #24]
 8006cca:	4645      	mov	r5, r8
 8006ccc:	9a04      	ldr	r2, [sp, #16]
 8006cce:	2101      	movs	r1, #1
 8006cd0:	441a      	add	r2, r3
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	4498      	add	r8, r3
 8006cd6:	9204      	str	r2, [sp, #16]
 8006cd8:	f001 f93a 	bl	8007f50 <__i2b>
 8006cdc:	4607      	mov	r7, r0
 8006cde:	2d00      	cmp	r5, #0
 8006ce0:	dd0b      	ble.n	8006cfa <_dtoa_r+0x78a>
 8006ce2:	9b04      	ldr	r3, [sp, #16]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	dd08      	ble.n	8006cfa <_dtoa_r+0x78a>
 8006ce8:	42ab      	cmp	r3, r5
 8006cea:	9a04      	ldr	r2, [sp, #16]
 8006cec:	bfa8      	it	ge
 8006cee:	462b      	movge	r3, r5
 8006cf0:	eba8 0803 	sub.w	r8, r8, r3
 8006cf4:	1aed      	subs	r5, r5, r3
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	9304      	str	r3, [sp, #16]
 8006cfa:	9b06      	ldr	r3, [sp, #24]
 8006cfc:	b1fb      	cbz	r3, 8006d3e <_dtoa_r+0x7ce>
 8006cfe:	9b08      	ldr	r3, [sp, #32]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f000 809f 	beq.w	8006e44 <_dtoa_r+0x8d4>
 8006d06:	2e00      	cmp	r6, #0
 8006d08:	dd11      	ble.n	8006d2e <_dtoa_r+0x7be>
 8006d0a:	4639      	mov	r1, r7
 8006d0c:	4632      	mov	r2, r6
 8006d0e:	4620      	mov	r0, r4
 8006d10:	f001 f9da 	bl	80080c8 <__pow5mult>
 8006d14:	465a      	mov	r2, fp
 8006d16:	4601      	mov	r1, r0
 8006d18:	4607      	mov	r7, r0
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	f001 f92e 	bl	8007f7c <__multiply>
 8006d20:	4659      	mov	r1, fp
 8006d22:	9007      	str	r0, [sp, #28]
 8006d24:	4620      	mov	r0, r4
 8006d26:	f001 f80d 	bl	8007d44 <_Bfree>
 8006d2a:	9b07      	ldr	r3, [sp, #28]
 8006d2c:	469b      	mov	fp, r3
 8006d2e:	9b06      	ldr	r3, [sp, #24]
 8006d30:	1b9a      	subs	r2, r3, r6
 8006d32:	d004      	beq.n	8006d3e <_dtoa_r+0x7ce>
 8006d34:	4659      	mov	r1, fp
 8006d36:	4620      	mov	r0, r4
 8006d38:	f001 f9c6 	bl	80080c8 <__pow5mult>
 8006d3c:	4683      	mov	fp, r0
 8006d3e:	2101      	movs	r1, #1
 8006d40:	4620      	mov	r0, r4
 8006d42:	f001 f905 	bl	8007f50 <__i2b>
 8006d46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	4606      	mov	r6, r0
 8006d4c:	dd7c      	ble.n	8006e48 <_dtoa_r+0x8d8>
 8006d4e:	461a      	mov	r2, r3
 8006d50:	4601      	mov	r1, r0
 8006d52:	4620      	mov	r0, r4
 8006d54:	f001 f9b8 	bl	80080c8 <__pow5mult>
 8006d58:	9b05      	ldr	r3, [sp, #20]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	4606      	mov	r6, r0
 8006d5e:	dd76      	ble.n	8006e4e <_dtoa_r+0x8de>
 8006d60:	2300      	movs	r3, #0
 8006d62:	9306      	str	r3, [sp, #24]
 8006d64:	6933      	ldr	r3, [r6, #16]
 8006d66:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006d6a:	6918      	ldr	r0, [r3, #16]
 8006d6c:	f001 f8a0 	bl	8007eb0 <__hi0bits>
 8006d70:	f1c0 0020 	rsb	r0, r0, #32
 8006d74:	9b04      	ldr	r3, [sp, #16]
 8006d76:	4418      	add	r0, r3
 8006d78:	f010 001f 	ands.w	r0, r0, #31
 8006d7c:	f000 8086 	beq.w	8006e8c <_dtoa_r+0x91c>
 8006d80:	f1c0 0320 	rsb	r3, r0, #32
 8006d84:	2b04      	cmp	r3, #4
 8006d86:	dd7f      	ble.n	8006e88 <_dtoa_r+0x918>
 8006d88:	f1c0 001c 	rsb	r0, r0, #28
 8006d8c:	9b04      	ldr	r3, [sp, #16]
 8006d8e:	4403      	add	r3, r0
 8006d90:	4480      	add	r8, r0
 8006d92:	4405      	add	r5, r0
 8006d94:	9304      	str	r3, [sp, #16]
 8006d96:	f1b8 0f00 	cmp.w	r8, #0
 8006d9a:	dd05      	ble.n	8006da8 <_dtoa_r+0x838>
 8006d9c:	4659      	mov	r1, fp
 8006d9e:	4642      	mov	r2, r8
 8006da0:	4620      	mov	r0, r4
 8006da2:	f001 f9eb 	bl	800817c <__lshift>
 8006da6:	4683      	mov	fp, r0
 8006da8:	9b04      	ldr	r3, [sp, #16]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	dd05      	ble.n	8006dba <_dtoa_r+0x84a>
 8006dae:	4631      	mov	r1, r6
 8006db0:	461a      	mov	r2, r3
 8006db2:	4620      	mov	r0, r4
 8006db4:	f001 f9e2 	bl	800817c <__lshift>
 8006db8:	4606      	mov	r6, r0
 8006dba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d069      	beq.n	8006e94 <_dtoa_r+0x924>
 8006dc0:	4631      	mov	r1, r6
 8006dc2:	4658      	mov	r0, fp
 8006dc4:	f001 fa46 	bl	8008254 <__mcmp>
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	da63      	bge.n	8006e94 <_dtoa_r+0x924>
 8006dcc:	2300      	movs	r3, #0
 8006dce:	4659      	mov	r1, fp
 8006dd0:	220a      	movs	r2, #10
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	f000 ffd8 	bl	8007d88 <__multadd>
 8006dd8:	9b08      	ldr	r3, [sp, #32]
 8006dda:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006dde:	4683      	mov	fp, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f000 818f 	beq.w	8007104 <_dtoa_r+0xb94>
 8006de6:	4639      	mov	r1, r7
 8006de8:	2300      	movs	r3, #0
 8006dea:	220a      	movs	r2, #10
 8006dec:	4620      	mov	r0, r4
 8006dee:	f000 ffcb 	bl	8007d88 <__multadd>
 8006df2:	f1b9 0f00 	cmp.w	r9, #0
 8006df6:	4607      	mov	r7, r0
 8006df8:	f300 808e 	bgt.w	8006f18 <_dtoa_r+0x9a8>
 8006dfc:	9b05      	ldr	r3, [sp, #20]
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	dc50      	bgt.n	8006ea4 <_dtoa_r+0x934>
 8006e02:	e089      	b.n	8006f18 <_dtoa_r+0x9a8>
 8006e04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006e0a:	e75d      	b.n	8006cc8 <_dtoa_r+0x758>
 8006e0c:	9b01      	ldr	r3, [sp, #4]
 8006e0e:	1e5e      	subs	r6, r3, #1
 8006e10:	9b06      	ldr	r3, [sp, #24]
 8006e12:	42b3      	cmp	r3, r6
 8006e14:	bfbf      	itttt	lt
 8006e16:	9b06      	ldrlt	r3, [sp, #24]
 8006e18:	9606      	strlt	r6, [sp, #24]
 8006e1a:	1af2      	sublt	r2, r6, r3
 8006e1c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006e1e:	bfb6      	itet	lt
 8006e20:	189b      	addlt	r3, r3, r2
 8006e22:	1b9e      	subge	r6, r3, r6
 8006e24:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006e26:	9b01      	ldr	r3, [sp, #4]
 8006e28:	bfb8      	it	lt
 8006e2a:	2600      	movlt	r6, #0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	bfb5      	itete	lt
 8006e30:	eba8 0503 	sublt.w	r5, r8, r3
 8006e34:	9b01      	ldrge	r3, [sp, #4]
 8006e36:	2300      	movlt	r3, #0
 8006e38:	4645      	movge	r5, r8
 8006e3a:	e747      	b.n	8006ccc <_dtoa_r+0x75c>
 8006e3c:	9e06      	ldr	r6, [sp, #24]
 8006e3e:	9f08      	ldr	r7, [sp, #32]
 8006e40:	4645      	mov	r5, r8
 8006e42:	e74c      	b.n	8006cde <_dtoa_r+0x76e>
 8006e44:	9a06      	ldr	r2, [sp, #24]
 8006e46:	e775      	b.n	8006d34 <_dtoa_r+0x7c4>
 8006e48:	9b05      	ldr	r3, [sp, #20]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	dc18      	bgt.n	8006e80 <_dtoa_r+0x910>
 8006e4e:	9b02      	ldr	r3, [sp, #8]
 8006e50:	b9b3      	cbnz	r3, 8006e80 <_dtoa_r+0x910>
 8006e52:	9b03      	ldr	r3, [sp, #12]
 8006e54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e58:	b9a3      	cbnz	r3, 8006e84 <_dtoa_r+0x914>
 8006e5a:	9b03      	ldr	r3, [sp, #12]
 8006e5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e60:	0d1b      	lsrs	r3, r3, #20
 8006e62:	051b      	lsls	r3, r3, #20
 8006e64:	b12b      	cbz	r3, 8006e72 <_dtoa_r+0x902>
 8006e66:	9b04      	ldr	r3, [sp, #16]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	9304      	str	r3, [sp, #16]
 8006e6c:	f108 0801 	add.w	r8, r8, #1
 8006e70:	2301      	movs	r3, #1
 8006e72:	9306      	str	r3, [sp, #24]
 8006e74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	f47f af74 	bne.w	8006d64 <_dtoa_r+0x7f4>
 8006e7c:	2001      	movs	r0, #1
 8006e7e:	e779      	b.n	8006d74 <_dtoa_r+0x804>
 8006e80:	2300      	movs	r3, #0
 8006e82:	e7f6      	b.n	8006e72 <_dtoa_r+0x902>
 8006e84:	9b02      	ldr	r3, [sp, #8]
 8006e86:	e7f4      	b.n	8006e72 <_dtoa_r+0x902>
 8006e88:	d085      	beq.n	8006d96 <_dtoa_r+0x826>
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	301c      	adds	r0, #28
 8006e8e:	e77d      	b.n	8006d8c <_dtoa_r+0x81c>
 8006e90:	40240000 	.word	0x40240000
 8006e94:	9b01      	ldr	r3, [sp, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	dc38      	bgt.n	8006f0c <_dtoa_r+0x99c>
 8006e9a:	9b05      	ldr	r3, [sp, #20]
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	dd35      	ble.n	8006f0c <_dtoa_r+0x99c>
 8006ea0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006ea4:	f1b9 0f00 	cmp.w	r9, #0
 8006ea8:	d10d      	bne.n	8006ec6 <_dtoa_r+0x956>
 8006eaa:	4631      	mov	r1, r6
 8006eac:	464b      	mov	r3, r9
 8006eae:	2205      	movs	r2, #5
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	f000 ff69 	bl	8007d88 <__multadd>
 8006eb6:	4601      	mov	r1, r0
 8006eb8:	4606      	mov	r6, r0
 8006eba:	4658      	mov	r0, fp
 8006ebc:	f001 f9ca 	bl	8008254 <__mcmp>
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	f73f adbd 	bgt.w	8006a40 <_dtoa_r+0x4d0>
 8006ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ec8:	9d00      	ldr	r5, [sp, #0]
 8006eca:	ea6f 0a03 	mvn.w	sl, r3
 8006ece:	f04f 0800 	mov.w	r8, #0
 8006ed2:	4631      	mov	r1, r6
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	f000 ff35 	bl	8007d44 <_Bfree>
 8006eda:	2f00      	cmp	r7, #0
 8006edc:	f43f aeb4 	beq.w	8006c48 <_dtoa_r+0x6d8>
 8006ee0:	f1b8 0f00 	cmp.w	r8, #0
 8006ee4:	d005      	beq.n	8006ef2 <_dtoa_r+0x982>
 8006ee6:	45b8      	cmp	r8, r7
 8006ee8:	d003      	beq.n	8006ef2 <_dtoa_r+0x982>
 8006eea:	4641      	mov	r1, r8
 8006eec:	4620      	mov	r0, r4
 8006eee:	f000 ff29 	bl	8007d44 <_Bfree>
 8006ef2:	4639      	mov	r1, r7
 8006ef4:	4620      	mov	r0, r4
 8006ef6:	f000 ff25 	bl	8007d44 <_Bfree>
 8006efa:	e6a5      	b.n	8006c48 <_dtoa_r+0x6d8>
 8006efc:	2600      	movs	r6, #0
 8006efe:	4637      	mov	r7, r6
 8006f00:	e7e1      	b.n	8006ec6 <_dtoa_r+0x956>
 8006f02:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006f04:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006f08:	4637      	mov	r7, r6
 8006f0a:	e599      	b.n	8006a40 <_dtoa_r+0x4d0>
 8006f0c:	9b08      	ldr	r3, [sp, #32]
 8006f0e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f000 80fd 	beq.w	8007112 <_dtoa_r+0xba2>
 8006f18:	2d00      	cmp	r5, #0
 8006f1a:	dd05      	ble.n	8006f28 <_dtoa_r+0x9b8>
 8006f1c:	4639      	mov	r1, r7
 8006f1e:	462a      	mov	r2, r5
 8006f20:	4620      	mov	r0, r4
 8006f22:	f001 f92b 	bl	800817c <__lshift>
 8006f26:	4607      	mov	r7, r0
 8006f28:	9b06      	ldr	r3, [sp, #24]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d05c      	beq.n	8006fe8 <_dtoa_r+0xa78>
 8006f2e:	6879      	ldr	r1, [r7, #4]
 8006f30:	4620      	mov	r0, r4
 8006f32:	f000 fec7 	bl	8007cc4 <_Balloc>
 8006f36:	4605      	mov	r5, r0
 8006f38:	b928      	cbnz	r0, 8006f46 <_dtoa_r+0x9d6>
 8006f3a:	4b80      	ldr	r3, [pc, #512]	; (800713c <_dtoa_r+0xbcc>)
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006f42:	f7ff bb2e 	b.w	80065a2 <_dtoa_r+0x32>
 8006f46:	693a      	ldr	r2, [r7, #16]
 8006f48:	3202      	adds	r2, #2
 8006f4a:	0092      	lsls	r2, r2, #2
 8006f4c:	f107 010c 	add.w	r1, r7, #12
 8006f50:	300c      	adds	r0, #12
 8006f52:	f7fd fbad 	bl	80046b0 <memcpy>
 8006f56:	2201      	movs	r2, #1
 8006f58:	4629      	mov	r1, r5
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	f001 f90e 	bl	800817c <__lshift>
 8006f60:	9b00      	ldr	r3, [sp, #0]
 8006f62:	3301      	adds	r3, #1
 8006f64:	9301      	str	r3, [sp, #4]
 8006f66:	9b00      	ldr	r3, [sp, #0]
 8006f68:	444b      	add	r3, r9
 8006f6a:	9307      	str	r3, [sp, #28]
 8006f6c:	9b02      	ldr	r3, [sp, #8]
 8006f6e:	f003 0301 	and.w	r3, r3, #1
 8006f72:	46b8      	mov	r8, r7
 8006f74:	9306      	str	r3, [sp, #24]
 8006f76:	4607      	mov	r7, r0
 8006f78:	9b01      	ldr	r3, [sp, #4]
 8006f7a:	4631      	mov	r1, r6
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	4658      	mov	r0, fp
 8006f80:	9302      	str	r3, [sp, #8]
 8006f82:	f7ff fa69 	bl	8006458 <quorem>
 8006f86:	4603      	mov	r3, r0
 8006f88:	3330      	adds	r3, #48	; 0x30
 8006f8a:	9004      	str	r0, [sp, #16]
 8006f8c:	4641      	mov	r1, r8
 8006f8e:	4658      	mov	r0, fp
 8006f90:	9308      	str	r3, [sp, #32]
 8006f92:	f001 f95f 	bl	8008254 <__mcmp>
 8006f96:	463a      	mov	r2, r7
 8006f98:	4681      	mov	r9, r0
 8006f9a:	4631      	mov	r1, r6
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	f001 f975 	bl	800828c <__mdiff>
 8006fa2:	68c2      	ldr	r2, [r0, #12]
 8006fa4:	9b08      	ldr	r3, [sp, #32]
 8006fa6:	4605      	mov	r5, r0
 8006fa8:	bb02      	cbnz	r2, 8006fec <_dtoa_r+0xa7c>
 8006faa:	4601      	mov	r1, r0
 8006fac:	4658      	mov	r0, fp
 8006fae:	f001 f951 	bl	8008254 <__mcmp>
 8006fb2:	9b08      	ldr	r3, [sp, #32]
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	4629      	mov	r1, r5
 8006fb8:	4620      	mov	r0, r4
 8006fba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006fbe:	f000 fec1 	bl	8007d44 <_Bfree>
 8006fc2:	9b05      	ldr	r3, [sp, #20]
 8006fc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fc6:	9d01      	ldr	r5, [sp, #4]
 8006fc8:	ea43 0102 	orr.w	r1, r3, r2
 8006fcc:	9b06      	ldr	r3, [sp, #24]
 8006fce:	430b      	orrs	r3, r1
 8006fd0:	9b08      	ldr	r3, [sp, #32]
 8006fd2:	d10d      	bne.n	8006ff0 <_dtoa_r+0xa80>
 8006fd4:	2b39      	cmp	r3, #57	; 0x39
 8006fd6:	d029      	beq.n	800702c <_dtoa_r+0xabc>
 8006fd8:	f1b9 0f00 	cmp.w	r9, #0
 8006fdc:	dd01      	ble.n	8006fe2 <_dtoa_r+0xa72>
 8006fde:	9b04      	ldr	r3, [sp, #16]
 8006fe0:	3331      	adds	r3, #49	; 0x31
 8006fe2:	9a02      	ldr	r2, [sp, #8]
 8006fe4:	7013      	strb	r3, [r2, #0]
 8006fe6:	e774      	b.n	8006ed2 <_dtoa_r+0x962>
 8006fe8:	4638      	mov	r0, r7
 8006fea:	e7b9      	b.n	8006f60 <_dtoa_r+0x9f0>
 8006fec:	2201      	movs	r2, #1
 8006fee:	e7e2      	b.n	8006fb6 <_dtoa_r+0xa46>
 8006ff0:	f1b9 0f00 	cmp.w	r9, #0
 8006ff4:	db06      	blt.n	8007004 <_dtoa_r+0xa94>
 8006ff6:	9905      	ldr	r1, [sp, #20]
 8006ff8:	ea41 0909 	orr.w	r9, r1, r9
 8006ffc:	9906      	ldr	r1, [sp, #24]
 8006ffe:	ea59 0101 	orrs.w	r1, r9, r1
 8007002:	d120      	bne.n	8007046 <_dtoa_r+0xad6>
 8007004:	2a00      	cmp	r2, #0
 8007006:	ddec      	ble.n	8006fe2 <_dtoa_r+0xa72>
 8007008:	4659      	mov	r1, fp
 800700a:	2201      	movs	r2, #1
 800700c:	4620      	mov	r0, r4
 800700e:	9301      	str	r3, [sp, #4]
 8007010:	f001 f8b4 	bl	800817c <__lshift>
 8007014:	4631      	mov	r1, r6
 8007016:	4683      	mov	fp, r0
 8007018:	f001 f91c 	bl	8008254 <__mcmp>
 800701c:	2800      	cmp	r0, #0
 800701e:	9b01      	ldr	r3, [sp, #4]
 8007020:	dc02      	bgt.n	8007028 <_dtoa_r+0xab8>
 8007022:	d1de      	bne.n	8006fe2 <_dtoa_r+0xa72>
 8007024:	07da      	lsls	r2, r3, #31
 8007026:	d5dc      	bpl.n	8006fe2 <_dtoa_r+0xa72>
 8007028:	2b39      	cmp	r3, #57	; 0x39
 800702a:	d1d8      	bne.n	8006fde <_dtoa_r+0xa6e>
 800702c:	9a02      	ldr	r2, [sp, #8]
 800702e:	2339      	movs	r3, #57	; 0x39
 8007030:	7013      	strb	r3, [r2, #0]
 8007032:	462b      	mov	r3, r5
 8007034:	461d      	mov	r5, r3
 8007036:	3b01      	subs	r3, #1
 8007038:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800703c:	2a39      	cmp	r2, #57	; 0x39
 800703e:	d050      	beq.n	80070e2 <_dtoa_r+0xb72>
 8007040:	3201      	adds	r2, #1
 8007042:	701a      	strb	r2, [r3, #0]
 8007044:	e745      	b.n	8006ed2 <_dtoa_r+0x962>
 8007046:	2a00      	cmp	r2, #0
 8007048:	dd03      	ble.n	8007052 <_dtoa_r+0xae2>
 800704a:	2b39      	cmp	r3, #57	; 0x39
 800704c:	d0ee      	beq.n	800702c <_dtoa_r+0xabc>
 800704e:	3301      	adds	r3, #1
 8007050:	e7c7      	b.n	8006fe2 <_dtoa_r+0xa72>
 8007052:	9a01      	ldr	r2, [sp, #4]
 8007054:	9907      	ldr	r1, [sp, #28]
 8007056:	f802 3c01 	strb.w	r3, [r2, #-1]
 800705a:	428a      	cmp	r2, r1
 800705c:	d02a      	beq.n	80070b4 <_dtoa_r+0xb44>
 800705e:	4659      	mov	r1, fp
 8007060:	2300      	movs	r3, #0
 8007062:	220a      	movs	r2, #10
 8007064:	4620      	mov	r0, r4
 8007066:	f000 fe8f 	bl	8007d88 <__multadd>
 800706a:	45b8      	cmp	r8, r7
 800706c:	4683      	mov	fp, r0
 800706e:	f04f 0300 	mov.w	r3, #0
 8007072:	f04f 020a 	mov.w	r2, #10
 8007076:	4641      	mov	r1, r8
 8007078:	4620      	mov	r0, r4
 800707a:	d107      	bne.n	800708c <_dtoa_r+0xb1c>
 800707c:	f000 fe84 	bl	8007d88 <__multadd>
 8007080:	4680      	mov	r8, r0
 8007082:	4607      	mov	r7, r0
 8007084:	9b01      	ldr	r3, [sp, #4]
 8007086:	3301      	adds	r3, #1
 8007088:	9301      	str	r3, [sp, #4]
 800708a:	e775      	b.n	8006f78 <_dtoa_r+0xa08>
 800708c:	f000 fe7c 	bl	8007d88 <__multadd>
 8007090:	4639      	mov	r1, r7
 8007092:	4680      	mov	r8, r0
 8007094:	2300      	movs	r3, #0
 8007096:	220a      	movs	r2, #10
 8007098:	4620      	mov	r0, r4
 800709a:	f000 fe75 	bl	8007d88 <__multadd>
 800709e:	4607      	mov	r7, r0
 80070a0:	e7f0      	b.n	8007084 <_dtoa_r+0xb14>
 80070a2:	f1b9 0f00 	cmp.w	r9, #0
 80070a6:	9a00      	ldr	r2, [sp, #0]
 80070a8:	bfcc      	ite	gt
 80070aa:	464d      	movgt	r5, r9
 80070ac:	2501      	movle	r5, #1
 80070ae:	4415      	add	r5, r2
 80070b0:	f04f 0800 	mov.w	r8, #0
 80070b4:	4659      	mov	r1, fp
 80070b6:	2201      	movs	r2, #1
 80070b8:	4620      	mov	r0, r4
 80070ba:	9301      	str	r3, [sp, #4]
 80070bc:	f001 f85e 	bl	800817c <__lshift>
 80070c0:	4631      	mov	r1, r6
 80070c2:	4683      	mov	fp, r0
 80070c4:	f001 f8c6 	bl	8008254 <__mcmp>
 80070c8:	2800      	cmp	r0, #0
 80070ca:	dcb2      	bgt.n	8007032 <_dtoa_r+0xac2>
 80070cc:	d102      	bne.n	80070d4 <_dtoa_r+0xb64>
 80070ce:	9b01      	ldr	r3, [sp, #4]
 80070d0:	07db      	lsls	r3, r3, #31
 80070d2:	d4ae      	bmi.n	8007032 <_dtoa_r+0xac2>
 80070d4:	462b      	mov	r3, r5
 80070d6:	461d      	mov	r5, r3
 80070d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070dc:	2a30      	cmp	r2, #48	; 0x30
 80070de:	d0fa      	beq.n	80070d6 <_dtoa_r+0xb66>
 80070e0:	e6f7      	b.n	8006ed2 <_dtoa_r+0x962>
 80070e2:	9a00      	ldr	r2, [sp, #0]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d1a5      	bne.n	8007034 <_dtoa_r+0xac4>
 80070e8:	f10a 0a01 	add.w	sl, sl, #1
 80070ec:	2331      	movs	r3, #49	; 0x31
 80070ee:	e779      	b.n	8006fe4 <_dtoa_r+0xa74>
 80070f0:	4b13      	ldr	r3, [pc, #76]	; (8007140 <_dtoa_r+0xbd0>)
 80070f2:	f7ff baaf 	b.w	8006654 <_dtoa_r+0xe4>
 80070f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f47f aa86 	bne.w	800660a <_dtoa_r+0x9a>
 80070fe:	4b11      	ldr	r3, [pc, #68]	; (8007144 <_dtoa_r+0xbd4>)
 8007100:	f7ff baa8 	b.w	8006654 <_dtoa_r+0xe4>
 8007104:	f1b9 0f00 	cmp.w	r9, #0
 8007108:	dc03      	bgt.n	8007112 <_dtoa_r+0xba2>
 800710a:	9b05      	ldr	r3, [sp, #20]
 800710c:	2b02      	cmp	r3, #2
 800710e:	f73f aec9 	bgt.w	8006ea4 <_dtoa_r+0x934>
 8007112:	9d00      	ldr	r5, [sp, #0]
 8007114:	4631      	mov	r1, r6
 8007116:	4658      	mov	r0, fp
 8007118:	f7ff f99e 	bl	8006458 <quorem>
 800711c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007120:	f805 3b01 	strb.w	r3, [r5], #1
 8007124:	9a00      	ldr	r2, [sp, #0]
 8007126:	1aaa      	subs	r2, r5, r2
 8007128:	4591      	cmp	r9, r2
 800712a:	ddba      	ble.n	80070a2 <_dtoa_r+0xb32>
 800712c:	4659      	mov	r1, fp
 800712e:	2300      	movs	r3, #0
 8007130:	220a      	movs	r2, #10
 8007132:	4620      	mov	r0, r4
 8007134:	f000 fe28 	bl	8007d88 <__multadd>
 8007138:	4683      	mov	fp, r0
 800713a:	e7eb      	b.n	8007114 <_dtoa_r+0xba4>
 800713c:	0800a280 	.word	0x0800a280
 8007140:	0800a040 	.word	0x0800a040
 8007144:	0800a1fd 	.word	0x0800a1fd

08007148 <__sflush_r>:
 8007148:	898a      	ldrh	r2, [r1, #12]
 800714a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800714e:	4605      	mov	r5, r0
 8007150:	0710      	lsls	r0, r2, #28
 8007152:	460c      	mov	r4, r1
 8007154:	d458      	bmi.n	8007208 <__sflush_r+0xc0>
 8007156:	684b      	ldr	r3, [r1, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	dc05      	bgt.n	8007168 <__sflush_r+0x20>
 800715c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800715e:	2b00      	cmp	r3, #0
 8007160:	dc02      	bgt.n	8007168 <__sflush_r+0x20>
 8007162:	2000      	movs	r0, #0
 8007164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007168:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800716a:	2e00      	cmp	r6, #0
 800716c:	d0f9      	beq.n	8007162 <__sflush_r+0x1a>
 800716e:	2300      	movs	r3, #0
 8007170:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007174:	682f      	ldr	r7, [r5, #0]
 8007176:	602b      	str	r3, [r5, #0]
 8007178:	d032      	beq.n	80071e0 <__sflush_r+0x98>
 800717a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800717c:	89a3      	ldrh	r3, [r4, #12]
 800717e:	075a      	lsls	r2, r3, #29
 8007180:	d505      	bpl.n	800718e <__sflush_r+0x46>
 8007182:	6863      	ldr	r3, [r4, #4]
 8007184:	1ac0      	subs	r0, r0, r3
 8007186:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007188:	b10b      	cbz	r3, 800718e <__sflush_r+0x46>
 800718a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800718c:	1ac0      	subs	r0, r0, r3
 800718e:	2300      	movs	r3, #0
 8007190:	4602      	mov	r2, r0
 8007192:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007194:	6a21      	ldr	r1, [r4, #32]
 8007196:	4628      	mov	r0, r5
 8007198:	47b0      	blx	r6
 800719a:	1c43      	adds	r3, r0, #1
 800719c:	89a3      	ldrh	r3, [r4, #12]
 800719e:	d106      	bne.n	80071ae <__sflush_r+0x66>
 80071a0:	6829      	ldr	r1, [r5, #0]
 80071a2:	291d      	cmp	r1, #29
 80071a4:	d82c      	bhi.n	8007200 <__sflush_r+0xb8>
 80071a6:	4a2a      	ldr	r2, [pc, #168]	; (8007250 <__sflush_r+0x108>)
 80071a8:	40ca      	lsrs	r2, r1
 80071aa:	07d6      	lsls	r6, r2, #31
 80071ac:	d528      	bpl.n	8007200 <__sflush_r+0xb8>
 80071ae:	2200      	movs	r2, #0
 80071b0:	6062      	str	r2, [r4, #4]
 80071b2:	04d9      	lsls	r1, r3, #19
 80071b4:	6922      	ldr	r2, [r4, #16]
 80071b6:	6022      	str	r2, [r4, #0]
 80071b8:	d504      	bpl.n	80071c4 <__sflush_r+0x7c>
 80071ba:	1c42      	adds	r2, r0, #1
 80071bc:	d101      	bne.n	80071c2 <__sflush_r+0x7a>
 80071be:	682b      	ldr	r3, [r5, #0]
 80071c0:	b903      	cbnz	r3, 80071c4 <__sflush_r+0x7c>
 80071c2:	6560      	str	r0, [r4, #84]	; 0x54
 80071c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071c6:	602f      	str	r7, [r5, #0]
 80071c8:	2900      	cmp	r1, #0
 80071ca:	d0ca      	beq.n	8007162 <__sflush_r+0x1a>
 80071cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071d0:	4299      	cmp	r1, r3
 80071d2:	d002      	beq.n	80071da <__sflush_r+0x92>
 80071d4:	4628      	mov	r0, r5
 80071d6:	f001 fa3f 	bl	8008658 <_free_r>
 80071da:	2000      	movs	r0, #0
 80071dc:	6360      	str	r0, [r4, #52]	; 0x34
 80071de:	e7c1      	b.n	8007164 <__sflush_r+0x1c>
 80071e0:	6a21      	ldr	r1, [r4, #32]
 80071e2:	2301      	movs	r3, #1
 80071e4:	4628      	mov	r0, r5
 80071e6:	47b0      	blx	r6
 80071e8:	1c41      	adds	r1, r0, #1
 80071ea:	d1c7      	bne.n	800717c <__sflush_r+0x34>
 80071ec:	682b      	ldr	r3, [r5, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d0c4      	beq.n	800717c <__sflush_r+0x34>
 80071f2:	2b1d      	cmp	r3, #29
 80071f4:	d001      	beq.n	80071fa <__sflush_r+0xb2>
 80071f6:	2b16      	cmp	r3, #22
 80071f8:	d101      	bne.n	80071fe <__sflush_r+0xb6>
 80071fa:	602f      	str	r7, [r5, #0]
 80071fc:	e7b1      	b.n	8007162 <__sflush_r+0x1a>
 80071fe:	89a3      	ldrh	r3, [r4, #12]
 8007200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007204:	81a3      	strh	r3, [r4, #12]
 8007206:	e7ad      	b.n	8007164 <__sflush_r+0x1c>
 8007208:	690f      	ldr	r7, [r1, #16]
 800720a:	2f00      	cmp	r7, #0
 800720c:	d0a9      	beq.n	8007162 <__sflush_r+0x1a>
 800720e:	0793      	lsls	r3, r2, #30
 8007210:	680e      	ldr	r6, [r1, #0]
 8007212:	bf08      	it	eq
 8007214:	694b      	ldreq	r3, [r1, #20]
 8007216:	600f      	str	r7, [r1, #0]
 8007218:	bf18      	it	ne
 800721a:	2300      	movne	r3, #0
 800721c:	eba6 0807 	sub.w	r8, r6, r7
 8007220:	608b      	str	r3, [r1, #8]
 8007222:	f1b8 0f00 	cmp.w	r8, #0
 8007226:	dd9c      	ble.n	8007162 <__sflush_r+0x1a>
 8007228:	6a21      	ldr	r1, [r4, #32]
 800722a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800722c:	4643      	mov	r3, r8
 800722e:	463a      	mov	r2, r7
 8007230:	4628      	mov	r0, r5
 8007232:	47b0      	blx	r6
 8007234:	2800      	cmp	r0, #0
 8007236:	dc06      	bgt.n	8007246 <__sflush_r+0xfe>
 8007238:	89a3      	ldrh	r3, [r4, #12]
 800723a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800723e:	81a3      	strh	r3, [r4, #12]
 8007240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007244:	e78e      	b.n	8007164 <__sflush_r+0x1c>
 8007246:	4407      	add	r7, r0
 8007248:	eba8 0800 	sub.w	r8, r8, r0
 800724c:	e7e9      	b.n	8007222 <__sflush_r+0xda>
 800724e:	bf00      	nop
 8007250:	20400001 	.word	0x20400001

08007254 <_fflush_r>:
 8007254:	b538      	push	{r3, r4, r5, lr}
 8007256:	690b      	ldr	r3, [r1, #16]
 8007258:	4605      	mov	r5, r0
 800725a:	460c      	mov	r4, r1
 800725c:	b913      	cbnz	r3, 8007264 <_fflush_r+0x10>
 800725e:	2500      	movs	r5, #0
 8007260:	4628      	mov	r0, r5
 8007262:	bd38      	pop	{r3, r4, r5, pc}
 8007264:	b118      	cbz	r0, 800726e <_fflush_r+0x1a>
 8007266:	6983      	ldr	r3, [r0, #24]
 8007268:	b90b      	cbnz	r3, 800726e <_fflush_r+0x1a>
 800726a:	f000 f887 	bl	800737c <__sinit>
 800726e:	4b14      	ldr	r3, [pc, #80]	; (80072c0 <_fflush_r+0x6c>)
 8007270:	429c      	cmp	r4, r3
 8007272:	d11b      	bne.n	80072ac <_fflush_r+0x58>
 8007274:	686c      	ldr	r4, [r5, #4]
 8007276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d0ef      	beq.n	800725e <_fflush_r+0xa>
 800727e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007280:	07d0      	lsls	r0, r2, #31
 8007282:	d404      	bmi.n	800728e <_fflush_r+0x3a>
 8007284:	0599      	lsls	r1, r3, #22
 8007286:	d402      	bmi.n	800728e <_fflush_r+0x3a>
 8007288:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800728a:	f000 fc9a 	bl	8007bc2 <__retarget_lock_acquire_recursive>
 800728e:	4628      	mov	r0, r5
 8007290:	4621      	mov	r1, r4
 8007292:	f7ff ff59 	bl	8007148 <__sflush_r>
 8007296:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007298:	07da      	lsls	r2, r3, #31
 800729a:	4605      	mov	r5, r0
 800729c:	d4e0      	bmi.n	8007260 <_fflush_r+0xc>
 800729e:	89a3      	ldrh	r3, [r4, #12]
 80072a0:	059b      	lsls	r3, r3, #22
 80072a2:	d4dd      	bmi.n	8007260 <_fflush_r+0xc>
 80072a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072a6:	f000 fc8d 	bl	8007bc4 <__retarget_lock_release_recursive>
 80072aa:	e7d9      	b.n	8007260 <_fflush_r+0xc>
 80072ac:	4b05      	ldr	r3, [pc, #20]	; (80072c4 <_fflush_r+0x70>)
 80072ae:	429c      	cmp	r4, r3
 80072b0:	d101      	bne.n	80072b6 <_fflush_r+0x62>
 80072b2:	68ac      	ldr	r4, [r5, #8]
 80072b4:	e7df      	b.n	8007276 <_fflush_r+0x22>
 80072b6:	4b04      	ldr	r3, [pc, #16]	; (80072c8 <_fflush_r+0x74>)
 80072b8:	429c      	cmp	r4, r3
 80072ba:	bf08      	it	eq
 80072bc:	68ec      	ldreq	r4, [r5, #12]
 80072be:	e7da      	b.n	8007276 <_fflush_r+0x22>
 80072c0:	0800a2b4 	.word	0x0800a2b4
 80072c4:	0800a2d4 	.word	0x0800a2d4
 80072c8:	0800a294 	.word	0x0800a294

080072cc <std>:
 80072cc:	2300      	movs	r3, #0
 80072ce:	b510      	push	{r4, lr}
 80072d0:	4604      	mov	r4, r0
 80072d2:	e9c0 3300 	strd	r3, r3, [r0]
 80072d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80072da:	6083      	str	r3, [r0, #8]
 80072dc:	8181      	strh	r1, [r0, #12]
 80072de:	6643      	str	r3, [r0, #100]	; 0x64
 80072e0:	81c2      	strh	r2, [r0, #14]
 80072e2:	6183      	str	r3, [r0, #24]
 80072e4:	4619      	mov	r1, r3
 80072e6:	2208      	movs	r2, #8
 80072e8:	305c      	adds	r0, #92	; 0x5c
 80072ea:	f7fd f9ef 	bl	80046cc <memset>
 80072ee:	4b05      	ldr	r3, [pc, #20]	; (8007304 <std+0x38>)
 80072f0:	6263      	str	r3, [r4, #36]	; 0x24
 80072f2:	4b05      	ldr	r3, [pc, #20]	; (8007308 <std+0x3c>)
 80072f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80072f6:	4b05      	ldr	r3, [pc, #20]	; (800730c <std+0x40>)
 80072f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80072fa:	4b05      	ldr	r3, [pc, #20]	; (8007310 <std+0x44>)
 80072fc:	6224      	str	r4, [r4, #32]
 80072fe:	6323      	str	r3, [r4, #48]	; 0x30
 8007300:	bd10      	pop	{r4, pc}
 8007302:	bf00      	nop
 8007304:	08008d49 	.word	0x08008d49
 8007308:	08008d6b 	.word	0x08008d6b
 800730c:	08008da3 	.word	0x08008da3
 8007310:	08008dc7 	.word	0x08008dc7

08007314 <_cleanup_r>:
 8007314:	4901      	ldr	r1, [pc, #4]	; (800731c <_cleanup_r+0x8>)
 8007316:	f000 b8c1 	b.w	800749c <_fwalk_reent>
 800731a:	bf00      	nop
 800731c:	08007255 	.word	0x08007255

08007320 <__sfmoreglue>:
 8007320:	b570      	push	{r4, r5, r6, lr}
 8007322:	1e4a      	subs	r2, r1, #1
 8007324:	2568      	movs	r5, #104	; 0x68
 8007326:	4355      	muls	r5, r2
 8007328:	460e      	mov	r6, r1
 800732a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800732e:	f001 f9e3 	bl	80086f8 <_malloc_r>
 8007332:	4604      	mov	r4, r0
 8007334:	b140      	cbz	r0, 8007348 <__sfmoreglue+0x28>
 8007336:	2100      	movs	r1, #0
 8007338:	e9c0 1600 	strd	r1, r6, [r0]
 800733c:	300c      	adds	r0, #12
 800733e:	60a0      	str	r0, [r4, #8]
 8007340:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007344:	f7fd f9c2 	bl	80046cc <memset>
 8007348:	4620      	mov	r0, r4
 800734a:	bd70      	pop	{r4, r5, r6, pc}

0800734c <__sfp_lock_acquire>:
 800734c:	4801      	ldr	r0, [pc, #4]	; (8007354 <__sfp_lock_acquire+0x8>)
 800734e:	f000 bc38 	b.w	8007bc2 <__retarget_lock_acquire_recursive>
 8007352:	bf00      	nop
 8007354:	20000710 	.word	0x20000710

08007358 <__sfp_lock_release>:
 8007358:	4801      	ldr	r0, [pc, #4]	; (8007360 <__sfp_lock_release+0x8>)
 800735a:	f000 bc33 	b.w	8007bc4 <__retarget_lock_release_recursive>
 800735e:	bf00      	nop
 8007360:	20000710 	.word	0x20000710

08007364 <__sinit_lock_acquire>:
 8007364:	4801      	ldr	r0, [pc, #4]	; (800736c <__sinit_lock_acquire+0x8>)
 8007366:	f000 bc2c 	b.w	8007bc2 <__retarget_lock_acquire_recursive>
 800736a:	bf00      	nop
 800736c:	2000070b 	.word	0x2000070b

08007370 <__sinit_lock_release>:
 8007370:	4801      	ldr	r0, [pc, #4]	; (8007378 <__sinit_lock_release+0x8>)
 8007372:	f000 bc27 	b.w	8007bc4 <__retarget_lock_release_recursive>
 8007376:	bf00      	nop
 8007378:	2000070b 	.word	0x2000070b

0800737c <__sinit>:
 800737c:	b510      	push	{r4, lr}
 800737e:	4604      	mov	r4, r0
 8007380:	f7ff fff0 	bl	8007364 <__sinit_lock_acquire>
 8007384:	69a3      	ldr	r3, [r4, #24]
 8007386:	b11b      	cbz	r3, 8007390 <__sinit+0x14>
 8007388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800738c:	f7ff bff0 	b.w	8007370 <__sinit_lock_release>
 8007390:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007394:	6523      	str	r3, [r4, #80]	; 0x50
 8007396:	4b13      	ldr	r3, [pc, #76]	; (80073e4 <__sinit+0x68>)
 8007398:	4a13      	ldr	r2, [pc, #76]	; (80073e8 <__sinit+0x6c>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	62a2      	str	r2, [r4, #40]	; 0x28
 800739e:	42a3      	cmp	r3, r4
 80073a0:	bf04      	itt	eq
 80073a2:	2301      	moveq	r3, #1
 80073a4:	61a3      	streq	r3, [r4, #24]
 80073a6:	4620      	mov	r0, r4
 80073a8:	f000 f820 	bl	80073ec <__sfp>
 80073ac:	6060      	str	r0, [r4, #4]
 80073ae:	4620      	mov	r0, r4
 80073b0:	f000 f81c 	bl	80073ec <__sfp>
 80073b4:	60a0      	str	r0, [r4, #8]
 80073b6:	4620      	mov	r0, r4
 80073b8:	f000 f818 	bl	80073ec <__sfp>
 80073bc:	2200      	movs	r2, #0
 80073be:	60e0      	str	r0, [r4, #12]
 80073c0:	2104      	movs	r1, #4
 80073c2:	6860      	ldr	r0, [r4, #4]
 80073c4:	f7ff ff82 	bl	80072cc <std>
 80073c8:	68a0      	ldr	r0, [r4, #8]
 80073ca:	2201      	movs	r2, #1
 80073cc:	2109      	movs	r1, #9
 80073ce:	f7ff ff7d 	bl	80072cc <std>
 80073d2:	68e0      	ldr	r0, [r4, #12]
 80073d4:	2202      	movs	r2, #2
 80073d6:	2112      	movs	r1, #18
 80073d8:	f7ff ff78 	bl	80072cc <std>
 80073dc:	2301      	movs	r3, #1
 80073de:	61a3      	str	r3, [r4, #24]
 80073e0:	e7d2      	b.n	8007388 <__sinit+0xc>
 80073e2:	bf00      	nop
 80073e4:	0800a02c 	.word	0x0800a02c
 80073e8:	08007315 	.word	0x08007315

080073ec <__sfp>:
 80073ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ee:	4607      	mov	r7, r0
 80073f0:	f7ff ffac 	bl	800734c <__sfp_lock_acquire>
 80073f4:	4b1e      	ldr	r3, [pc, #120]	; (8007470 <__sfp+0x84>)
 80073f6:	681e      	ldr	r6, [r3, #0]
 80073f8:	69b3      	ldr	r3, [r6, #24]
 80073fa:	b913      	cbnz	r3, 8007402 <__sfp+0x16>
 80073fc:	4630      	mov	r0, r6
 80073fe:	f7ff ffbd 	bl	800737c <__sinit>
 8007402:	3648      	adds	r6, #72	; 0x48
 8007404:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007408:	3b01      	subs	r3, #1
 800740a:	d503      	bpl.n	8007414 <__sfp+0x28>
 800740c:	6833      	ldr	r3, [r6, #0]
 800740e:	b30b      	cbz	r3, 8007454 <__sfp+0x68>
 8007410:	6836      	ldr	r6, [r6, #0]
 8007412:	e7f7      	b.n	8007404 <__sfp+0x18>
 8007414:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007418:	b9d5      	cbnz	r5, 8007450 <__sfp+0x64>
 800741a:	4b16      	ldr	r3, [pc, #88]	; (8007474 <__sfp+0x88>)
 800741c:	60e3      	str	r3, [r4, #12]
 800741e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007422:	6665      	str	r5, [r4, #100]	; 0x64
 8007424:	f000 fbcc 	bl	8007bc0 <__retarget_lock_init_recursive>
 8007428:	f7ff ff96 	bl	8007358 <__sfp_lock_release>
 800742c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007430:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007434:	6025      	str	r5, [r4, #0]
 8007436:	61a5      	str	r5, [r4, #24]
 8007438:	2208      	movs	r2, #8
 800743a:	4629      	mov	r1, r5
 800743c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007440:	f7fd f944 	bl	80046cc <memset>
 8007444:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007448:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800744c:	4620      	mov	r0, r4
 800744e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007450:	3468      	adds	r4, #104	; 0x68
 8007452:	e7d9      	b.n	8007408 <__sfp+0x1c>
 8007454:	2104      	movs	r1, #4
 8007456:	4638      	mov	r0, r7
 8007458:	f7ff ff62 	bl	8007320 <__sfmoreglue>
 800745c:	4604      	mov	r4, r0
 800745e:	6030      	str	r0, [r6, #0]
 8007460:	2800      	cmp	r0, #0
 8007462:	d1d5      	bne.n	8007410 <__sfp+0x24>
 8007464:	f7ff ff78 	bl	8007358 <__sfp_lock_release>
 8007468:	230c      	movs	r3, #12
 800746a:	603b      	str	r3, [r7, #0]
 800746c:	e7ee      	b.n	800744c <__sfp+0x60>
 800746e:	bf00      	nop
 8007470:	0800a02c 	.word	0x0800a02c
 8007474:	ffff0001 	.word	0xffff0001

08007478 <fiprintf>:
 8007478:	b40e      	push	{r1, r2, r3}
 800747a:	b503      	push	{r0, r1, lr}
 800747c:	4601      	mov	r1, r0
 800747e:	ab03      	add	r3, sp, #12
 8007480:	4805      	ldr	r0, [pc, #20]	; (8007498 <fiprintf+0x20>)
 8007482:	f853 2b04 	ldr.w	r2, [r3], #4
 8007486:	6800      	ldr	r0, [r0, #0]
 8007488:	9301      	str	r3, [sp, #4]
 800748a:	f001 fb15 	bl	8008ab8 <_vfiprintf_r>
 800748e:	b002      	add	sp, #8
 8007490:	f85d eb04 	ldr.w	lr, [sp], #4
 8007494:	b003      	add	sp, #12
 8007496:	4770      	bx	lr
 8007498:	2000033c 	.word	0x2000033c

0800749c <_fwalk_reent>:
 800749c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074a0:	4606      	mov	r6, r0
 80074a2:	4688      	mov	r8, r1
 80074a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80074a8:	2700      	movs	r7, #0
 80074aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80074ae:	f1b9 0901 	subs.w	r9, r9, #1
 80074b2:	d505      	bpl.n	80074c0 <_fwalk_reent+0x24>
 80074b4:	6824      	ldr	r4, [r4, #0]
 80074b6:	2c00      	cmp	r4, #0
 80074b8:	d1f7      	bne.n	80074aa <_fwalk_reent+0xe>
 80074ba:	4638      	mov	r0, r7
 80074bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074c0:	89ab      	ldrh	r3, [r5, #12]
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d907      	bls.n	80074d6 <_fwalk_reent+0x3a>
 80074c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80074ca:	3301      	adds	r3, #1
 80074cc:	d003      	beq.n	80074d6 <_fwalk_reent+0x3a>
 80074ce:	4629      	mov	r1, r5
 80074d0:	4630      	mov	r0, r6
 80074d2:	47c0      	blx	r8
 80074d4:	4307      	orrs	r7, r0
 80074d6:	3568      	adds	r5, #104	; 0x68
 80074d8:	e7e9      	b.n	80074ae <_fwalk_reent+0x12>

080074da <rshift>:
 80074da:	6903      	ldr	r3, [r0, #16]
 80074dc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80074e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80074e4:	ea4f 1261 	mov.w	r2, r1, asr #5
 80074e8:	f100 0414 	add.w	r4, r0, #20
 80074ec:	dd45      	ble.n	800757a <rshift+0xa0>
 80074ee:	f011 011f 	ands.w	r1, r1, #31
 80074f2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80074f6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80074fa:	d10c      	bne.n	8007516 <rshift+0x3c>
 80074fc:	f100 0710 	add.w	r7, r0, #16
 8007500:	4629      	mov	r1, r5
 8007502:	42b1      	cmp	r1, r6
 8007504:	d334      	bcc.n	8007570 <rshift+0x96>
 8007506:	1a9b      	subs	r3, r3, r2
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	1eea      	subs	r2, r5, #3
 800750c:	4296      	cmp	r6, r2
 800750e:	bf38      	it	cc
 8007510:	2300      	movcc	r3, #0
 8007512:	4423      	add	r3, r4
 8007514:	e015      	b.n	8007542 <rshift+0x68>
 8007516:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800751a:	f1c1 0820 	rsb	r8, r1, #32
 800751e:	40cf      	lsrs	r7, r1
 8007520:	f105 0e04 	add.w	lr, r5, #4
 8007524:	46a1      	mov	r9, r4
 8007526:	4576      	cmp	r6, lr
 8007528:	46f4      	mov	ip, lr
 800752a:	d815      	bhi.n	8007558 <rshift+0x7e>
 800752c:	1a9b      	subs	r3, r3, r2
 800752e:	009a      	lsls	r2, r3, #2
 8007530:	3a04      	subs	r2, #4
 8007532:	3501      	adds	r5, #1
 8007534:	42ae      	cmp	r6, r5
 8007536:	bf38      	it	cc
 8007538:	2200      	movcc	r2, #0
 800753a:	18a3      	adds	r3, r4, r2
 800753c:	50a7      	str	r7, [r4, r2]
 800753e:	b107      	cbz	r7, 8007542 <rshift+0x68>
 8007540:	3304      	adds	r3, #4
 8007542:	1b1a      	subs	r2, r3, r4
 8007544:	42a3      	cmp	r3, r4
 8007546:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800754a:	bf08      	it	eq
 800754c:	2300      	moveq	r3, #0
 800754e:	6102      	str	r2, [r0, #16]
 8007550:	bf08      	it	eq
 8007552:	6143      	streq	r3, [r0, #20]
 8007554:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007558:	f8dc c000 	ldr.w	ip, [ip]
 800755c:	fa0c fc08 	lsl.w	ip, ip, r8
 8007560:	ea4c 0707 	orr.w	r7, ip, r7
 8007564:	f849 7b04 	str.w	r7, [r9], #4
 8007568:	f85e 7b04 	ldr.w	r7, [lr], #4
 800756c:	40cf      	lsrs	r7, r1
 800756e:	e7da      	b.n	8007526 <rshift+0x4c>
 8007570:	f851 cb04 	ldr.w	ip, [r1], #4
 8007574:	f847 cf04 	str.w	ip, [r7, #4]!
 8007578:	e7c3      	b.n	8007502 <rshift+0x28>
 800757a:	4623      	mov	r3, r4
 800757c:	e7e1      	b.n	8007542 <rshift+0x68>

0800757e <__hexdig_fun>:
 800757e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007582:	2b09      	cmp	r3, #9
 8007584:	d802      	bhi.n	800758c <__hexdig_fun+0xe>
 8007586:	3820      	subs	r0, #32
 8007588:	b2c0      	uxtb	r0, r0
 800758a:	4770      	bx	lr
 800758c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007590:	2b05      	cmp	r3, #5
 8007592:	d801      	bhi.n	8007598 <__hexdig_fun+0x1a>
 8007594:	3847      	subs	r0, #71	; 0x47
 8007596:	e7f7      	b.n	8007588 <__hexdig_fun+0xa>
 8007598:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800759c:	2b05      	cmp	r3, #5
 800759e:	d801      	bhi.n	80075a4 <__hexdig_fun+0x26>
 80075a0:	3827      	subs	r0, #39	; 0x27
 80075a2:	e7f1      	b.n	8007588 <__hexdig_fun+0xa>
 80075a4:	2000      	movs	r0, #0
 80075a6:	4770      	bx	lr

080075a8 <__gethex>:
 80075a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ac:	ed2d 8b02 	vpush	{d8}
 80075b0:	b089      	sub	sp, #36	; 0x24
 80075b2:	ee08 0a10 	vmov	s16, r0
 80075b6:	9304      	str	r3, [sp, #16]
 80075b8:	4bbc      	ldr	r3, [pc, #752]	; (80078ac <__gethex+0x304>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	9301      	str	r3, [sp, #4]
 80075be:	4618      	mov	r0, r3
 80075c0:	468b      	mov	fp, r1
 80075c2:	4690      	mov	r8, r2
 80075c4:	f7f8 fe14 	bl	80001f0 <strlen>
 80075c8:	9b01      	ldr	r3, [sp, #4]
 80075ca:	f8db 2000 	ldr.w	r2, [fp]
 80075ce:	4403      	add	r3, r0
 80075d0:	4682      	mov	sl, r0
 80075d2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80075d6:	9305      	str	r3, [sp, #20]
 80075d8:	1c93      	adds	r3, r2, #2
 80075da:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80075de:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80075e2:	32fe      	adds	r2, #254	; 0xfe
 80075e4:	18d1      	adds	r1, r2, r3
 80075e6:	461f      	mov	r7, r3
 80075e8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80075ec:	9100      	str	r1, [sp, #0]
 80075ee:	2830      	cmp	r0, #48	; 0x30
 80075f0:	d0f8      	beq.n	80075e4 <__gethex+0x3c>
 80075f2:	f7ff ffc4 	bl	800757e <__hexdig_fun>
 80075f6:	4604      	mov	r4, r0
 80075f8:	2800      	cmp	r0, #0
 80075fa:	d13a      	bne.n	8007672 <__gethex+0xca>
 80075fc:	9901      	ldr	r1, [sp, #4]
 80075fe:	4652      	mov	r2, sl
 8007600:	4638      	mov	r0, r7
 8007602:	f001 fbe4 	bl	8008dce <strncmp>
 8007606:	4605      	mov	r5, r0
 8007608:	2800      	cmp	r0, #0
 800760a:	d168      	bne.n	80076de <__gethex+0x136>
 800760c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007610:	eb07 060a 	add.w	r6, r7, sl
 8007614:	f7ff ffb3 	bl	800757e <__hexdig_fun>
 8007618:	2800      	cmp	r0, #0
 800761a:	d062      	beq.n	80076e2 <__gethex+0x13a>
 800761c:	4633      	mov	r3, r6
 800761e:	7818      	ldrb	r0, [r3, #0]
 8007620:	2830      	cmp	r0, #48	; 0x30
 8007622:	461f      	mov	r7, r3
 8007624:	f103 0301 	add.w	r3, r3, #1
 8007628:	d0f9      	beq.n	800761e <__gethex+0x76>
 800762a:	f7ff ffa8 	bl	800757e <__hexdig_fun>
 800762e:	2301      	movs	r3, #1
 8007630:	fab0 f480 	clz	r4, r0
 8007634:	0964      	lsrs	r4, r4, #5
 8007636:	4635      	mov	r5, r6
 8007638:	9300      	str	r3, [sp, #0]
 800763a:	463a      	mov	r2, r7
 800763c:	4616      	mov	r6, r2
 800763e:	3201      	adds	r2, #1
 8007640:	7830      	ldrb	r0, [r6, #0]
 8007642:	f7ff ff9c 	bl	800757e <__hexdig_fun>
 8007646:	2800      	cmp	r0, #0
 8007648:	d1f8      	bne.n	800763c <__gethex+0x94>
 800764a:	9901      	ldr	r1, [sp, #4]
 800764c:	4652      	mov	r2, sl
 800764e:	4630      	mov	r0, r6
 8007650:	f001 fbbd 	bl	8008dce <strncmp>
 8007654:	b980      	cbnz	r0, 8007678 <__gethex+0xd0>
 8007656:	b94d      	cbnz	r5, 800766c <__gethex+0xc4>
 8007658:	eb06 050a 	add.w	r5, r6, sl
 800765c:	462a      	mov	r2, r5
 800765e:	4616      	mov	r6, r2
 8007660:	3201      	adds	r2, #1
 8007662:	7830      	ldrb	r0, [r6, #0]
 8007664:	f7ff ff8b 	bl	800757e <__hexdig_fun>
 8007668:	2800      	cmp	r0, #0
 800766a:	d1f8      	bne.n	800765e <__gethex+0xb6>
 800766c:	1bad      	subs	r5, r5, r6
 800766e:	00ad      	lsls	r5, r5, #2
 8007670:	e004      	b.n	800767c <__gethex+0xd4>
 8007672:	2400      	movs	r4, #0
 8007674:	4625      	mov	r5, r4
 8007676:	e7e0      	b.n	800763a <__gethex+0x92>
 8007678:	2d00      	cmp	r5, #0
 800767a:	d1f7      	bne.n	800766c <__gethex+0xc4>
 800767c:	7833      	ldrb	r3, [r6, #0]
 800767e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007682:	2b50      	cmp	r3, #80	; 0x50
 8007684:	d13b      	bne.n	80076fe <__gethex+0x156>
 8007686:	7873      	ldrb	r3, [r6, #1]
 8007688:	2b2b      	cmp	r3, #43	; 0x2b
 800768a:	d02c      	beq.n	80076e6 <__gethex+0x13e>
 800768c:	2b2d      	cmp	r3, #45	; 0x2d
 800768e:	d02e      	beq.n	80076ee <__gethex+0x146>
 8007690:	1c71      	adds	r1, r6, #1
 8007692:	f04f 0900 	mov.w	r9, #0
 8007696:	7808      	ldrb	r0, [r1, #0]
 8007698:	f7ff ff71 	bl	800757e <__hexdig_fun>
 800769c:	1e43      	subs	r3, r0, #1
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	2b18      	cmp	r3, #24
 80076a2:	d82c      	bhi.n	80076fe <__gethex+0x156>
 80076a4:	f1a0 0210 	sub.w	r2, r0, #16
 80076a8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80076ac:	f7ff ff67 	bl	800757e <__hexdig_fun>
 80076b0:	1e43      	subs	r3, r0, #1
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	2b18      	cmp	r3, #24
 80076b6:	d91d      	bls.n	80076f4 <__gethex+0x14c>
 80076b8:	f1b9 0f00 	cmp.w	r9, #0
 80076bc:	d000      	beq.n	80076c0 <__gethex+0x118>
 80076be:	4252      	negs	r2, r2
 80076c0:	4415      	add	r5, r2
 80076c2:	f8cb 1000 	str.w	r1, [fp]
 80076c6:	b1e4      	cbz	r4, 8007702 <__gethex+0x15a>
 80076c8:	9b00      	ldr	r3, [sp, #0]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	bf14      	ite	ne
 80076ce:	2700      	movne	r7, #0
 80076d0:	2706      	moveq	r7, #6
 80076d2:	4638      	mov	r0, r7
 80076d4:	b009      	add	sp, #36	; 0x24
 80076d6:	ecbd 8b02 	vpop	{d8}
 80076da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076de:	463e      	mov	r6, r7
 80076e0:	4625      	mov	r5, r4
 80076e2:	2401      	movs	r4, #1
 80076e4:	e7ca      	b.n	800767c <__gethex+0xd4>
 80076e6:	f04f 0900 	mov.w	r9, #0
 80076ea:	1cb1      	adds	r1, r6, #2
 80076ec:	e7d3      	b.n	8007696 <__gethex+0xee>
 80076ee:	f04f 0901 	mov.w	r9, #1
 80076f2:	e7fa      	b.n	80076ea <__gethex+0x142>
 80076f4:	230a      	movs	r3, #10
 80076f6:	fb03 0202 	mla	r2, r3, r2, r0
 80076fa:	3a10      	subs	r2, #16
 80076fc:	e7d4      	b.n	80076a8 <__gethex+0x100>
 80076fe:	4631      	mov	r1, r6
 8007700:	e7df      	b.n	80076c2 <__gethex+0x11a>
 8007702:	1bf3      	subs	r3, r6, r7
 8007704:	3b01      	subs	r3, #1
 8007706:	4621      	mov	r1, r4
 8007708:	2b07      	cmp	r3, #7
 800770a:	dc0b      	bgt.n	8007724 <__gethex+0x17c>
 800770c:	ee18 0a10 	vmov	r0, s16
 8007710:	f000 fad8 	bl	8007cc4 <_Balloc>
 8007714:	4604      	mov	r4, r0
 8007716:	b940      	cbnz	r0, 800772a <__gethex+0x182>
 8007718:	4b65      	ldr	r3, [pc, #404]	; (80078b0 <__gethex+0x308>)
 800771a:	4602      	mov	r2, r0
 800771c:	21de      	movs	r1, #222	; 0xde
 800771e:	4865      	ldr	r0, [pc, #404]	; (80078b4 <__gethex+0x30c>)
 8007720:	f7fe fe7c 	bl	800641c <__assert_func>
 8007724:	3101      	adds	r1, #1
 8007726:	105b      	asrs	r3, r3, #1
 8007728:	e7ee      	b.n	8007708 <__gethex+0x160>
 800772a:	f100 0914 	add.w	r9, r0, #20
 800772e:	f04f 0b00 	mov.w	fp, #0
 8007732:	f1ca 0301 	rsb	r3, sl, #1
 8007736:	f8cd 9008 	str.w	r9, [sp, #8]
 800773a:	f8cd b000 	str.w	fp, [sp]
 800773e:	9306      	str	r3, [sp, #24]
 8007740:	42b7      	cmp	r7, r6
 8007742:	d340      	bcc.n	80077c6 <__gethex+0x21e>
 8007744:	9802      	ldr	r0, [sp, #8]
 8007746:	9b00      	ldr	r3, [sp, #0]
 8007748:	f840 3b04 	str.w	r3, [r0], #4
 800774c:	eba0 0009 	sub.w	r0, r0, r9
 8007750:	1080      	asrs	r0, r0, #2
 8007752:	0146      	lsls	r6, r0, #5
 8007754:	6120      	str	r0, [r4, #16]
 8007756:	4618      	mov	r0, r3
 8007758:	f000 fbaa 	bl	8007eb0 <__hi0bits>
 800775c:	1a30      	subs	r0, r6, r0
 800775e:	f8d8 6000 	ldr.w	r6, [r8]
 8007762:	42b0      	cmp	r0, r6
 8007764:	dd63      	ble.n	800782e <__gethex+0x286>
 8007766:	1b87      	subs	r7, r0, r6
 8007768:	4639      	mov	r1, r7
 800776a:	4620      	mov	r0, r4
 800776c:	f000 ff44 	bl	80085f8 <__any_on>
 8007770:	4682      	mov	sl, r0
 8007772:	b1a8      	cbz	r0, 80077a0 <__gethex+0x1f8>
 8007774:	1e7b      	subs	r3, r7, #1
 8007776:	1159      	asrs	r1, r3, #5
 8007778:	f003 021f 	and.w	r2, r3, #31
 800777c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007780:	f04f 0a01 	mov.w	sl, #1
 8007784:	fa0a f202 	lsl.w	r2, sl, r2
 8007788:	420a      	tst	r2, r1
 800778a:	d009      	beq.n	80077a0 <__gethex+0x1f8>
 800778c:	4553      	cmp	r3, sl
 800778e:	dd05      	ble.n	800779c <__gethex+0x1f4>
 8007790:	1eb9      	subs	r1, r7, #2
 8007792:	4620      	mov	r0, r4
 8007794:	f000 ff30 	bl	80085f8 <__any_on>
 8007798:	2800      	cmp	r0, #0
 800779a:	d145      	bne.n	8007828 <__gethex+0x280>
 800779c:	f04f 0a02 	mov.w	sl, #2
 80077a0:	4639      	mov	r1, r7
 80077a2:	4620      	mov	r0, r4
 80077a4:	f7ff fe99 	bl	80074da <rshift>
 80077a8:	443d      	add	r5, r7
 80077aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80077ae:	42ab      	cmp	r3, r5
 80077b0:	da4c      	bge.n	800784c <__gethex+0x2a4>
 80077b2:	ee18 0a10 	vmov	r0, s16
 80077b6:	4621      	mov	r1, r4
 80077b8:	f000 fac4 	bl	8007d44 <_Bfree>
 80077bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80077be:	2300      	movs	r3, #0
 80077c0:	6013      	str	r3, [r2, #0]
 80077c2:	27a3      	movs	r7, #163	; 0xa3
 80077c4:	e785      	b.n	80076d2 <__gethex+0x12a>
 80077c6:	1e73      	subs	r3, r6, #1
 80077c8:	9a05      	ldr	r2, [sp, #20]
 80077ca:	9303      	str	r3, [sp, #12]
 80077cc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d019      	beq.n	8007808 <__gethex+0x260>
 80077d4:	f1bb 0f20 	cmp.w	fp, #32
 80077d8:	d107      	bne.n	80077ea <__gethex+0x242>
 80077da:	9b02      	ldr	r3, [sp, #8]
 80077dc:	9a00      	ldr	r2, [sp, #0]
 80077de:	f843 2b04 	str.w	r2, [r3], #4
 80077e2:	9302      	str	r3, [sp, #8]
 80077e4:	2300      	movs	r3, #0
 80077e6:	9300      	str	r3, [sp, #0]
 80077e8:	469b      	mov	fp, r3
 80077ea:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80077ee:	f7ff fec6 	bl	800757e <__hexdig_fun>
 80077f2:	9b00      	ldr	r3, [sp, #0]
 80077f4:	f000 000f 	and.w	r0, r0, #15
 80077f8:	fa00 f00b 	lsl.w	r0, r0, fp
 80077fc:	4303      	orrs	r3, r0
 80077fe:	9300      	str	r3, [sp, #0]
 8007800:	f10b 0b04 	add.w	fp, fp, #4
 8007804:	9b03      	ldr	r3, [sp, #12]
 8007806:	e00d      	b.n	8007824 <__gethex+0x27c>
 8007808:	9b03      	ldr	r3, [sp, #12]
 800780a:	9a06      	ldr	r2, [sp, #24]
 800780c:	4413      	add	r3, r2
 800780e:	42bb      	cmp	r3, r7
 8007810:	d3e0      	bcc.n	80077d4 <__gethex+0x22c>
 8007812:	4618      	mov	r0, r3
 8007814:	9901      	ldr	r1, [sp, #4]
 8007816:	9307      	str	r3, [sp, #28]
 8007818:	4652      	mov	r2, sl
 800781a:	f001 fad8 	bl	8008dce <strncmp>
 800781e:	9b07      	ldr	r3, [sp, #28]
 8007820:	2800      	cmp	r0, #0
 8007822:	d1d7      	bne.n	80077d4 <__gethex+0x22c>
 8007824:	461e      	mov	r6, r3
 8007826:	e78b      	b.n	8007740 <__gethex+0x198>
 8007828:	f04f 0a03 	mov.w	sl, #3
 800782c:	e7b8      	b.n	80077a0 <__gethex+0x1f8>
 800782e:	da0a      	bge.n	8007846 <__gethex+0x29e>
 8007830:	1a37      	subs	r7, r6, r0
 8007832:	4621      	mov	r1, r4
 8007834:	ee18 0a10 	vmov	r0, s16
 8007838:	463a      	mov	r2, r7
 800783a:	f000 fc9f 	bl	800817c <__lshift>
 800783e:	1bed      	subs	r5, r5, r7
 8007840:	4604      	mov	r4, r0
 8007842:	f100 0914 	add.w	r9, r0, #20
 8007846:	f04f 0a00 	mov.w	sl, #0
 800784a:	e7ae      	b.n	80077aa <__gethex+0x202>
 800784c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007850:	42a8      	cmp	r0, r5
 8007852:	dd72      	ble.n	800793a <__gethex+0x392>
 8007854:	1b45      	subs	r5, r0, r5
 8007856:	42ae      	cmp	r6, r5
 8007858:	dc36      	bgt.n	80078c8 <__gethex+0x320>
 800785a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800785e:	2b02      	cmp	r3, #2
 8007860:	d02a      	beq.n	80078b8 <__gethex+0x310>
 8007862:	2b03      	cmp	r3, #3
 8007864:	d02c      	beq.n	80078c0 <__gethex+0x318>
 8007866:	2b01      	cmp	r3, #1
 8007868:	d115      	bne.n	8007896 <__gethex+0x2ee>
 800786a:	42ae      	cmp	r6, r5
 800786c:	d113      	bne.n	8007896 <__gethex+0x2ee>
 800786e:	2e01      	cmp	r6, #1
 8007870:	d10b      	bne.n	800788a <__gethex+0x2e2>
 8007872:	9a04      	ldr	r2, [sp, #16]
 8007874:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007878:	6013      	str	r3, [r2, #0]
 800787a:	2301      	movs	r3, #1
 800787c:	6123      	str	r3, [r4, #16]
 800787e:	f8c9 3000 	str.w	r3, [r9]
 8007882:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007884:	2762      	movs	r7, #98	; 0x62
 8007886:	601c      	str	r4, [r3, #0]
 8007888:	e723      	b.n	80076d2 <__gethex+0x12a>
 800788a:	1e71      	subs	r1, r6, #1
 800788c:	4620      	mov	r0, r4
 800788e:	f000 feb3 	bl	80085f8 <__any_on>
 8007892:	2800      	cmp	r0, #0
 8007894:	d1ed      	bne.n	8007872 <__gethex+0x2ca>
 8007896:	ee18 0a10 	vmov	r0, s16
 800789a:	4621      	mov	r1, r4
 800789c:	f000 fa52 	bl	8007d44 <_Bfree>
 80078a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80078a2:	2300      	movs	r3, #0
 80078a4:	6013      	str	r3, [r2, #0]
 80078a6:	2750      	movs	r7, #80	; 0x50
 80078a8:	e713      	b.n	80076d2 <__gethex+0x12a>
 80078aa:	bf00      	nop
 80078ac:	0800a360 	.word	0x0800a360
 80078b0:	0800a280 	.word	0x0800a280
 80078b4:	0800a2f4 	.word	0x0800a2f4
 80078b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1eb      	bne.n	8007896 <__gethex+0x2ee>
 80078be:	e7d8      	b.n	8007872 <__gethex+0x2ca>
 80078c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d1d5      	bne.n	8007872 <__gethex+0x2ca>
 80078c6:	e7e6      	b.n	8007896 <__gethex+0x2ee>
 80078c8:	1e6f      	subs	r7, r5, #1
 80078ca:	f1ba 0f00 	cmp.w	sl, #0
 80078ce:	d131      	bne.n	8007934 <__gethex+0x38c>
 80078d0:	b127      	cbz	r7, 80078dc <__gethex+0x334>
 80078d2:	4639      	mov	r1, r7
 80078d4:	4620      	mov	r0, r4
 80078d6:	f000 fe8f 	bl	80085f8 <__any_on>
 80078da:	4682      	mov	sl, r0
 80078dc:	117b      	asrs	r3, r7, #5
 80078de:	2101      	movs	r1, #1
 80078e0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80078e4:	f007 071f 	and.w	r7, r7, #31
 80078e8:	fa01 f707 	lsl.w	r7, r1, r7
 80078ec:	421f      	tst	r7, r3
 80078ee:	4629      	mov	r1, r5
 80078f0:	4620      	mov	r0, r4
 80078f2:	bf18      	it	ne
 80078f4:	f04a 0a02 	orrne.w	sl, sl, #2
 80078f8:	1b76      	subs	r6, r6, r5
 80078fa:	f7ff fdee 	bl	80074da <rshift>
 80078fe:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007902:	2702      	movs	r7, #2
 8007904:	f1ba 0f00 	cmp.w	sl, #0
 8007908:	d048      	beq.n	800799c <__gethex+0x3f4>
 800790a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800790e:	2b02      	cmp	r3, #2
 8007910:	d015      	beq.n	800793e <__gethex+0x396>
 8007912:	2b03      	cmp	r3, #3
 8007914:	d017      	beq.n	8007946 <__gethex+0x39e>
 8007916:	2b01      	cmp	r3, #1
 8007918:	d109      	bne.n	800792e <__gethex+0x386>
 800791a:	f01a 0f02 	tst.w	sl, #2
 800791e:	d006      	beq.n	800792e <__gethex+0x386>
 8007920:	f8d9 0000 	ldr.w	r0, [r9]
 8007924:	ea4a 0a00 	orr.w	sl, sl, r0
 8007928:	f01a 0f01 	tst.w	sl, #1
 800792c:	d10e      	bne.n	800794c <__gethex+0x3a4>
 800792e:	f047 0710 	orr.w	r7, r7, #16
 8007932:	e033      	b.n	800799c <__gethex+0x3f4>
 8007934:	f04f 0a01 	mov.w	sl, #1
 8007938:	e7d0      	b.n	80078dc <__gethex+0x334>
 800793a:	2701      	movs	r7, #1
 800793c:	e7e2      	b.n	8007904 <__gethex+0x35c>
 800793e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007940:	f1c3 0301 	rsb	r3, r3, #1
 8007944:	9315      	str	r3, [sp, #84]	; 0x54
 8007946:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007948:	2b00      	cmp	r3, #0
 800794a:	d0f0      	beq.n	800792e <__gethex+0x386>
 800794c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007950:	f104 0314 	add.w	r3, r4, #20
 8007954:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007958:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800795c:	f04f 0c00 	mov.w	ip, #0
 8007960:	4618      	mov	r0, r3
 8007962:	f853 2b04 	ldr.w	r2, [r3], #4
 8007966:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800796a:	d01c      	beq.n	80079a6 <__gethex+0x3fe>
 800796c:	3201      	adds	r2, #1
 800796e:	6002      	str	r2, [r0, #0]
 8007970:	2f02      	cmp	r7, #2
 8007972:	f104 0314 	add.w	r3, r4, #20
 8007976:	d13f      	bne.n	80079f8 <__gethex+0x450>
 8007978:	f8d8 2000 	ldr.w	r2, [r8]
 800797c:	3a01      	subs	r2, #1
 800797e:	42b2      	cmp	r2, r6
 8007980:	d10a      	bne.n	8007998 <__gethex+0x3f0>
 8007982:	1171      	asrs	r1, r6, #5
 8007984:	2201      	movs	r2, #1
 8007986:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800798a:	f006 061f 	and.w	r6, r6, #31
 800798e:	fa02 f606 	lsl.w	r6, r2, r6
 8007992:	421e      	tst	r6, r3
 8007994:	bf18      	it	ne
 8007996:	4617      	movne	r7, r2
 8007998:	f047 0720 	orr.w	r7, r7, #32
 800799c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800799e:	601c      	str	r4, [r3, #0]
 80079a0:	9b04      	ldr	r3, [sp, #16]
 80079a2:	601d      	str	r5, [r3, #0]
 80079a4:	e695      	b.n	80076d2 <__gethex+0x12a>
 80079a6:	4299      	cmp	r1, r3
 80079a8:	f843 cc04 	str.w	ip, [r3, #-4]
 80079ac:	d8d8      	bhi.n	8007960 <__gethex+0x3b8>
 80079ae:	68a3      	ldr	r3, [r4, #8]
 80079b0:	459b      	cmp	fp, r3
 80079b2:	db19      	blt.n	80079e8 <__gethex+0x440>
 80079b4:	6861      	ldr	r1, [r4, #4]
 80079b6:	ee18 0a10 	vmov	r0, s16
 80079ba:	3101      	adds	r1, #1
 80079bc:	f000 f982 	bl	8007cc4 <_Balloc>
 80079c0:	4681      	mov	r9, r0
 80079c2:	b918      	cbnz	r0, 80079cc <__gethex+0x424>
 80079c4:	4b1a      	ldr	r3, [pc, #104]	; (8007a30 <__gethex+0x488>)
 80079c6:	4602      	mov	r2, r0
 80079c8:	2184      	movs	r1, #132	; 0x84
 80079ca:	e6a8      	b.n	800771e <__gethex+0x176>
 80079cc:	6922      	ldr	r2, [r4, #16]
 80079ce:	3202      	adds	r2, #2
 80079d0:	f104 010c 	add.w	r1, r4, #12
 80079d4:	0092      	lsls	r2, r2, #2
 80079d6:	300c      	adds	r0, #12
 80079d8:	f7fc fe6a 	bl	80046b0 <memcpy>
 80079dc:	4621      	mov	r1, r4
 80079de:	ee18 0a10 	vmov	r0, s16
 80079e2:	f000 f9af 	bl	8007d44 <_Bfree>
 80079e6:	464c      	mov	r4, r9
 80079e8:	6923      	ldr	r3, [r4, #16]
 80079ea:	1c5a      	adds	r2, r3, #1
 80079ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80079f0:	6122      	str	r2, [r4, #16]
 80079f2:	2201      	movs	r2, #1
 80079f4:	615a      	str	r2, [r3, #20]
 80079f6:	e7bb      	b.n	8007970 <__gethex+0x3c8>
 80079f8:	6922      	ldr	r2, [r4, #16]
 80079fa:	455a      	cmp	r2, fp
 80079fc:	dd0b      	ble.n	8007a16 <__gethex+0x46e>
 80079fe:	2101      	movs	r1, #1
 8007a00:	4620      	mov	r0, r4
 8007a02:	f7ff fd6a 	bl	80074da <rshift>
 8007a06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007a0a:	3501      	adds	r5, #1
 8007a0c:	42ab      	cmp	r3, r5
 8007a0e:	f6ff aed0 	blt.w	80077b2 <__gethex+0x20a>
 8007a12:	2701      	movs	r7, #1
 8007a14:	e7c0      	b.n	8007998 <__gethex+0x3f0>
 8007a16:	f016 061f 	ands.w	r6, r6, #31
 8007a1a:	d0fa      	beq.n	8007a12 <__gethex+0x46a>
 8007a1c:	449a      	add	sl, r3
 8007a1e:	f1c6 0620 	rsb	r6, r6, #32
 8007a22:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007a26:	f000 fa43 	bl	8007eb0 <__hi0bits>
 8007a2a:	42b0      	cmp	r0, r6
 8007a2c:	dbe7      	blt.n	80079fe <__gethex+0x456>
 8007a2e:	e7f0      	b.n	8007a12 <__gethex+0x46a>
 8007a30:	0800a280 	.word	0x0800a280

08007a34 <L_shift>:
 8007a34:	f1c2 0208 	rsb	r2, r2, #8
 8007a38:	0092      	lsls	r2, r2, #2
 8007a3a:	b570      	push	{r4, r5, r6, lr}
 8007a3c:	f1c2 0620 	rsb	r6, r2, #32
 8007a40:	6843      	ldr	r3, [r0, #4]
 8007a42:	6804      	ldr	r4, [r0, #0]
 8007a44:	fa03 f506 	lsl.w	r5, r3, r6
 8007a48:	432c      	orrs	r4, r5
 8007a4a:	40d3      	lsrs	r3, r2
 8007a4c:	6004      	str	r4, [r0, #0]
 8007a4e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007a52:	4288      	cmp	r0, r1
 8007a54:	d3f4      	bcc.n	8007a40 <L_shift+0xc>
 8007a56:	bd70      	pop	{r4, r5, r6, pc}

08007a58 <__match>:
 8007a58:	b530      	push	{r4, r5, lr}
 8007a5a:	6803      	ldr	r3, [r0, #0]
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a62:	b914      	cbnz	r4, 8007a6a <__match+0x12>
 8007a64:	6003      	str	r3, [r0, #0]
 8007a66:	2001      	movs	r0, #1
 8007a68:	bd30      	pop	{r4, r5, pc}
 8007a6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a6e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007a72:	2d19      	cmp	r5, #25
 8007a74:	bf98      	it	ls
 8007a76:	3220      	addls	r2, #32
 8007a78:	42a2      	cmp	r2, r4
 8007a7a:	d0f0      	beq.n	8007a5e <__match+0x6>
 8007a7c:	2000      	movs	r0, #0
 8007a7e:	e7f3      	b.n	8007a68 <__match+0x10>

08007a80 <__hexnan>:
 8007a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a84:	680b      	ldr	r3, [r1, #0]
 8007a86:	6801      	ldr	r1, [r0, #0]
 8007a88:	115e      	asrs	r6, r3, #5
 8007a8a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007a8e:	f013 031f 	ands.w	r3, r3, #31
 8007a92:	b087      	sub	sp, #28
 8007a94:	bf18      	it	ne
 8007a96:	3604      	addne	r6, #4
 8007a98:	2500      	movs	r5, #0
 8007a9a:	1f37      	subs	r7, r6, #4
 8007a9c:	4682      	mov	sl, r0
 8007a9e:	4690      	mov	r8, r2
 8007aa0:	9301      	str	r3, [sp, #4]
 8007aa2:	f846 5c04 	str.w	r5, [r6, #-4]
 8007aa6:	46b9      	mov	r9, r7
 8007aa8:	463c      	mov	r4, r7
 8007aaa:	9502      	str	r5, [sp, #8]
 8007aac:	46ab      	mov	fp, r5
 8007aae:	784a      	ldrb	r2, [r1, #1]
 8007ab0:	1c4b      	adds	r3, r1, #1
 8007ab2:	9303      	str	r3, [sp, #12]
 8007ab4:	b342      	cbz	r2, 8007b08 <__hexnan+0x88>
 8007ab6:	4610      	mov	r0, r2
 8007ab8:	9105      	str	r1, [sp, #20]
 8007aba:	9204      	str	r2, [sp, #16]
 8007abc:	f7ff fd5f 	bl	800757e <__hexdig_fun>
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	d14f      	bne.n	8007b64 <__hexnan+0xe4>
 8007ac4:	9a04      	ldr	r2, [sp, #16]
 8007ac6:	9905      	ldr	r1, [sp, #20]
 8007ac8:	2a20      	cmp	r2, #32
 8007aca:	d818      	bhi.n	8007afe <__hexnan+0x7e>
 8007acc:	9b02      	ldr	r3, [sp, #8]
 8007ace:	459b      	cmp	fp, r3
 8007ad0:	dd13      	ble.n	8007afa <__hexnan+0x7a>
 8007ad2:	454c      	cmp	r4, r9
 8007ad4:	d206      	bcs.n	8007ae4 <__hexnan+0x64>
 8007ad6:	2d07      	cmp	r5, #7
 8007ad8:	dc04      	bgt.n	8007ae4 <__hexnan+0x64>
 8007ada:	462a      	mov	r2, r5
 8007adc:	4649      	mov	r1, r9
 8007ade:	4620      	mov	r0, r4
 8007ae0:	f7ff ffa8 	bl	8007a34 <L_shift>
 8007ae4:	4544      	cmp	r4, r8
 8007ae6:	d950      	bls.n	8007b8a <__hexnan+0x10a>
 8007ae8:	2300      	movs	r3, #0
 8007aea:	f1a4 0904 	sub.w	r9, r4, #4
 8007aee:	f844 3c04 	str.w	r3, [r4, #-4]
 8007af2:	f8cd b008 	str.w	fp, [sp, #8]
 8007af6:	464c      	mov	r4, r9
 8007af8:	461d      	mov	r5, r3
 8007afa:	9903      	ldr	r1, [sp, #12]
 8007afc:	e7d7      	b.n	8007aae <__hexnan+0x2e>
 8007afe:	2a29      	cmp	r2, #41	; 0x29
 8007b00:	d156      	bne.n	8007bb0 <__hexnan+0x130>
 8007b02:	3102      	adds	r1, #2
 8007b04:	f8ca 1000 	str.w	r1, [sl]
 8007b08:	f1bb 0f00 	cmp.w	fp, #0
 8007b0c:	d050      	beq.n	8007bb0 <__hexnan+0x130>
 8007b0e:	454c      	cmp	r4, r9
 8007b10:	d206      	bcs.n	8007b20 <__hexnan+0xa0>
 8007b12:	2d07      	cmp	r5, #7
 8007b14:	dc04      	bgt.n	8007b20 <__hexnan+0xa0>
 8007b16:	462a      	mov	r2, r5
 8007b18:	4649      	mov	r1, r9
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	f7ff ff8a 	bl	8007a34 <L_shift>
 8007b20:	4544      	cmp	r4, r8
 8007b22:	d934      	bls.n	8007b8e <__hexnan+0x10e>
 8007b24:	f1a8 0204 	sub.w	r2, r8, #4
 8007b28:	4623      	mov	r3, r4
 8007b2a:	f853 1b04 	ldr.w	r1, [r3], #4
 8007b2e:	f842 1f04 	str.w	r1, [r2, #4]!
 8007b32:	429f      	cmp	r7, r3
 8007b34:	d2f9      	bcs.n	8007b2a <__hexnan+0xaa>
 8007b36:	1b3b      	subs	r3, r7, r4
 8007b38:	f023 0303 	bic.w	r3, r3, #3
 8007b3c:	3304      	adds	r3, #4
 8007b3e:	3401      	adds	r4, #1
 8007b40:	3e03      	subs	r6, #3
 8007b42:	42b4      	cmp	r4, r6
 8007b44:	bf88      	it	hi
 8007b46:	2304      	movhi	r3, #4
 8007b48:	4443      	add	r3, r8
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f843 2b04 	str.w	r2, [r3], #4
 8007b50:	429f      	cmp	r7, r3
 8007b52:	d2fb      	bcs.n	8007b4c <__hexnan+0xcc>
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	b91b      	cbnz	r3, 8007b60 <__hexnan+0xe0>
 8007b58:	4547      	cmp	r7, r8
 8007b5a:	d127      	bne.n	8007bac <__hexnan+0x12c>
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	603b      	str	r3, [r7, #0]
 8007b60:	2005      	movs	r0, #5
 8007b62:	e026      	b.n	8007bb2 <__hexnan+0x132>
 8007b64:	3501      	adds	r5, #1
 8007b66:	2d08      	cmp	r5, #8
 8007b68:	f10b 0b01 	add.w	fp, fp, #1
 8007b6c:	dd06      	ble.n	8007b7c <__hexnan+0xfc>
 8007b6e:	4544      	cmp	r4, r8
 8007b70:	d9c3      	bls.n	8007afa <__hexnan+0x7a>
 8007b72:	2300      	movs	r3, #0
 8007b74:	f844 3c04 	str.w	r3, [r4, #-4]
 8007b78:	2501      	movs	r5, #1
 8007b7a:	3c04      	subs	r4, #4
 8007b7c:	6822      	ldr	r2, [r4, #0]
 8007b7e:	f000 000f 	and.w	r0, r0, #15
 8007b82:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007b86:	6022      	str	r2, [r4, #0]
 8007b88:	e7b7      	b.n	8007afa <__hexnan+0x7a>
 8007b8a:	2508      	movs	r5, #8
 8007b8c:	e7b5      	b.n	8007afa <__hexnan+0x7a>
 8007b8e:	9b01      	ldr	r3, [sp, #4]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d0df      	beq.n	8007b54 <__hexnan+0xd4>
 8007b94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b98:	f1c3 0320 	rsb	r3, r3, #32
 8007b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8007ba0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007ba4:	401a      	ands	r2, r3
 8007ba6:	f846 2c04 	str.w	r2, [r6, #-4]
 8007baa:	e7d3      	b.n	8007b54 <__hexnan+0xd4>
 8007bac:	3f04      	subs	r7, #4
 8007bae:	e7d1      	b.n	8007b54 <__hexnan+0xd4>
 8007bb0:	2004      	movs	r0, #4
 8007bb2:	b007      	add	sp, #28
 8007bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007bb8 <_localeconv_r>:
 8007bb8:	4800      	ldr	r0, [pc, #0]	; (8007bbc <_localeconv_r+0x4>)
 8007bba:	4770      	bx	lr
 8007bbc:	20000494 	.word	0x20000494

08007bc0 <__retarget_lock_init_recursive>:
 8007bc0:	4770      	bx	lr

08007bc2 <__retarget_lock_acquire_recursive>:
 8007bc2:	4770      	bx	lr

08007bc4 <__retarget_lock_release_recursive>:
 8007bc4:	4770      	bx	lr

08007bc6 <__swhatbuf_r>:
 8007bc6:	b570      	push	{r4, r5, r6, lr}
 8007bc8:	460e      	mov	r6, r1
 8007bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bce:	2900      	cmp	r1, #0
 8007bd0:	b096      	sub	sp, #88	; 0x58
 8007bd2:	4614      	mov	r4, r2
 8007bd4:	461d      	mov	r5, r3
 8007bd6:	da07      	bge.n	8007be8 <__swhatbuf_r+0x22>
 8007bd8:	2300      	movs	r3, #0
 8007bda:	602b      	str	r3, [r5, #0]
 8007bdc:	89b3      	ldrh	r3, [r6, #12]
 8007bde:	061a      	lsls	r2, r3, #24
 8007be0:	d410      	bmi.n	8007c04 <__swhatbuf_r+0x3e>
 8007be2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007be6:	e00e      	b.n	8007c06 <__swhatbuf_r+0x40>
 8007be8:	466a      	mov	r2, sp
 8007bea:	f001 f939 	bl	8008e60 <_fstat_r>
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	dbf2      	blt.n	8007bd8 <__swhatbuf_r+0x12>
 8007bf2:	9a01      	ldr	r2, [sp, #4]
 8007bf4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007bf8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007bfc:	425a      	negs	r2, r3
 8007bfe:	415a      	adcs	r2, r3
 8007c00:	602a      	str	r2, [r5, #0]
 8007c02:	e7ee      	b.n	8007be2 <__swhatbuf_r+0x1c>
 8007c04:	2340      	movs	r3, #64	; 0x40
 8007c06:	2000      	movs	r0, #0
 8007c08:	6023      	str	r3, [r4, #0]
 8007c0a:	b016      	add	sp, #88	; 0x58
 8007c0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007c10 <__smakebuf_r>:
 8007c10:	898b      	ldrh	r3, [r1, #12]
 8007c12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c14:	079d      	lsls	r5, r3, #30
 8007c16:	4606      	mov	r6, r0
 8007c18:	460c      	mov	r4, r1
 8007c1a:	d507      	bpl.n	8007c2c <__smakebuf_r+0x1c>
 8007c1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007c20:	6023      	str	r3, [r4, #0]
 8007c22:	6123      	str	r3, [r4, #16]
 8007c24:	2301      	movs	r3, #1
 8007c26:	6163      	str	r3, [r4, #20]
 8007c28:	b002      	add	sp, #8
 8007c2a:	bd70      	pop	{r4, r5, r6, pc}
 8007c2c:	ab01      	add	r3, sp, #4
 8007c2e:	466a      	mov	r2, sp
 8007c30:	f7ff ffc9 	bl	8007bc6 <__swhatbuf_r>
 8007c34:	9900      	ldr	r1, [sp, #0]
 8007c36:	4605      	mov	r5, r0
 8007c38:	4630      	mov	r0, r6
 8007c3a:	f000 fd5d 	bl	80086f8 <_malloc_r>
 8007c3e:	b948      	cbnz	r0, 8007c54 <__smakebuf_r+0x44>
 8007c40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c44:	059a      	lsls	r2, r3, #22
 8007c46:	d4ef      	bmi.n	8007c28 <__smakebuf_r+0x18>
 8007c48:	f023 0303 	bic.w	r3, r3, #3
 8007c4c:	f043 0302 	orr.w	r3, r3, #2
 8007c50:	81a3      	strh	r3, [r4, #12]
 8007c52:	e7e3      	b.n	8007c1c <__smakebuf_r+0xc>
 8007c54:	4b0d      	ldr	r3, [pc, #52]	; (8007c8c <__smakebuf_r+0x7c>)
 8007c56:	62b3      	str	r3, [r6, #40]	; 0x28
 8007c58:	89a3      	ldrh	r3, [r4, #12]
 8007c5a:	6020      	str	r0, [r4, #0]
 8007c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c60:	81a3      	strh	r3, [r4, #12]
 8007c62:	9b00      	ldr	r3, [sp, #0]
 8007c64:	6163      	str	r3, [r4, #20]
 8007c66:	9b01      	ldr	r3, [sp, #4]
 8007c68:	6120      	str	r0, [r4, #16]
 8007c6a:	b15b      	cbz	r3, 8007c84 <__smakebuf_r+0x74>
 8007c6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c70:	4630      	mov	r0, r6
 8007c72:	f001 f907 	bl	8008e84 <_isatty_r>
 8007c76:	b128      	cbz	r0, 8007c84 <__smakebuf_r+0x74>
 8007c78:	89a3      	ldrh	r3, [r4, #12]
 8007c7a:	f023 0303 	bic.w	r3, r3, #3
 8007c7e:	f043 0301 	orr.w	r3, r3, #1
 8007c82:	81a3      	strh	r3, [r4, #12]
 8007c84:	89a0      	ldrh	r0, [r4, #12]
 8007c86:	4305      	orrs	r5, r0
 8007c88:	81a5      	strh	r5, [r4, #12]
 8007c8a:	e7cd      	b.n	8007c28 <__smakebuf_r+0x18>
 8007c8c:	08007315 	.word	0x08007315

08007c90 <malloc>:
 8007c90:	4b02      	ldr	r3, [pc, #8]	; (8007c9c <malloc+0xc>)
 8007c92:	4601      	mov	r1, r0
 8007c94:	6818      	ldr	r0, [r3, #0]
 8007c96:	f000 bd2f 	b.w	80086f8 <_malloc_r>
 8007c9a:	bf00      	nop
 8007c9c:	2000033c 	.word	0x2000033c

08007ca0 <__ascii_mbtowc>:
 8007ca0:	b082      	sub	sp, #8
 8007ca2:	b901      	cbnz	r1, 8007ca6 <__ascii_mbtowc+0x6>
 8007ca4:	a901      	add	r1, sp, #4
 8007ca6:	b142      	cbz	r2, 8007cba <__ascii_mbtowc+0x1a>
 8007ca8:	b14b      	cbz	r3, 8007cbe <__ascii_mbtowc+0x1e>
 8007caa:	7813      	ldrb	r3, [r2, #0]
 8007cac:	600b      	str	r3, [r1, #0]
 8007cae:	7812      	ldrb	r2, [r2, #0]
 8007cb0:	1e10      	subs	r0, r2, #0
 8007cb2:	bf18      	it	ne
 8007cb4:	2001      	movne	r0, #1
 8007cb6:	b002      	add	sp, #8
 8007cb8:	4770      	bx	lr
 8007cba:	4610      	mov	r0, r2
 8007cbc:	e7fb      	b.n	8007cb6 <__ascii_mbtowc+0x16>
 8007cbe:	f06f 0001 	mvn.w	r0, #1
 8007cc2:	e7f8      	b.n	8007cb6 <__ascii_mbtowc+0x16>

08007cc4 <_Balloc>:
 8007cc4:	b570      	push	{r4, r5, r6, lr}
 8007cc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007cc8:	4604      	mov	r4, r0
 8007cca:	460d      	mov	r5, r1
 8007ccc:	b976      	cbnz	r6, 8007cec <_Balloc+0x28>
 8007cce:	2010      	movs	r0, #16
 8007cd0:	f7ff ffde 	bl	8007c90 <malloc>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	6260      	str	r0, [r4, #36]	; 0x24
 8007cd8:	b920      	cbnz	r0, 8007ce4 <_Balloc+0x20>
 8007cda:	4b18      	ldr	r3, [pc, #96]	; (8007d3c <_Balloc+0x78>)
 8007cdc:	4818      	ldr	r0, [pc, #96]	; (8007d40 <_Balloc+0x7c>)
 8007cde:	2166      	movs	r1, #102	; 0x66
 8007ce0:	f7fe fb9c 	bl	800641c <__assert_func>
 8007ce4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ce8:	6006      	str	r6, [r0, #0]
 8007cea:	60c6      	str	r6, [r0, #12]
 8007cec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007cee:	68f3      	ldr	r3, [r6, #12]
 8007cf0:	b183      	cbz	r3, 8007d14 <_Balloc+0x50>
 8007cf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007cfa:	b9b8      	cbnz	r0, 8007d2c <_Balloc+0x68>
 8007cfc:	2101      	movs	r1, #1
 8007cfe:	fa01 f605 	lsl.w	r6, r1, r5
 8007d02:	1d72      	adds	r2, r6, #5
 8007d04:	0092      	lsls	r2, r2, #2
 8007d06:	4620      	mov	r0, r4
 8007d08:	f000 fc97 	bl	800863a <_calloc_r>
 8007d0c:	b160      	cbz	r0, 8007d28 <_Balloc+0x64>
 8007d0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007d12:	e00e      	b.n	8007d32 <_Balloc+0x6e>
 8007d14:	2221      	movs	r2, #33	; 0x21
 8007d16:	2104      	movs	r1, #4
 8007d18:	4620      	mov	r0, r4
 8007d1a:	f000 fc8e 	bl	800863a <_calloc_r>
 8007d1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d20:	60f0      	str	r0, [r6, #12]
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d1e4      	bne.n	8007cf2 <_Balloc+0x2e>
 8007d28:	2000      	movs	r0, #0
 8007d2a:	bd70      	pop	{r4, r5, r6, pc}
 8007d2c:	6802      	ldr	r2, [r0, #0]
 8007d2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007d32:	2300      	movs	r3, #0
 8007d34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007d38:	e7f7      	b.n	8007d2a <_Balloc+0x66>
 8007d3a:	bf00      	nop
 8007d3c:	0800a20a 	.word	0x0800a20a
 8007d40:	0800a374 	.word	0x0800a374

08007d44 <_Bfree>:
 8007d44:	b570      	push	{r4, r5, r6, lr}
 8007d46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007d48:	4605      	mov	r5, r0
 8007d4a:	460c      	mov	r4, r1
 8007d4c:	b976      	cbnz	r6, 8007d6c <_Bfree+0x28>
 8007d4e:	2010      	movs	r0, #16
 8007d50:	f7ff ff9e 	bl	8007c90 <malloc>
 8007d54:	4602      	mov	r2, r0
 8007d56:	6268      	str	r0, [r5, #36]	; 0x24
 8007d58:	b920      	cbnz	r0, 8007d64 <_Bfree+0x20>
 8007d5a:	4b09      	ldr	r3, [pc, #36]	; (8007d80 <_Bfree+0x3c>)
 8007d5c:	4809      	ldr	r0, [pc, #36]	; (8007d84 <_Bfree+0x40>)
 8007d5e:	218a      	movs	r1, #138	; 0x8a
 8007d60:	f7fe fb5c 	bl	800641c <__assert_func>
 8007d64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d68:	6006      	str	r6, [r0, #0]
 8007d6a:	60c6      	str	r6, [r0, #12]
 8007d6c:	b13c      	cbz	r4, 8007d7e <_Bfree+0x3a>
 8007d6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007d70:	6862      	ldr	r2, [r4, #4]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d78:	6021      	str	r1, [r4, #0]
 8007d7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007d7e:	bd70      	pop	{r4, r5, r6, pc}
 8007d80:	0800a20a 	.word	0x0800a20a
 8007d84:	0800a374 	.word	0x0800a374

08007d88 <__multadd>:
 8007d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d8c:	690e      	ldr	r6, [r1, #16]
 8007d8e:	4607      	mov	r7, r0
 8007d90:	4698      	mov	r8, r3
 8007d92:	460c      	mov	r4, r1
 8007d94:	f101 0014 	add.w	r0, r1, #20
 8007d98:	2300      	movs	r3, #0
 8007d9a:	6805      	ldr	r5, [r0, #0]
 8007d9c:	b2a9      	uxth	r1, r5
 8007d9e:	fb02 8101 	mla	r1, r2, r1, r8
 8007da2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007da6:	0c2d      	lsrs	r5, r5, #16
 8007da8:	fb02 c505 	mla	r5, r2, r5, ip
 8007dac:	b289      	uxth	r1, r1
 8007dae:	3301      	adds	r3, #1
 8007db0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007db4:	429e      	cmp	r6, r3
 8007db6:	f840 1b04 	str.w	r1, [r0], #4
 8007dba:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007dbe:	dcec      	bgt.n	8007d9a <__multadd+0x12>
 8007dc0:	f1b8 0f00 	cmp.w	r8, #0
 8007dc4:	d022      	beq.n	8007e0c <__multadd+0x84>
 8007dc6:	68a3      	ldr	r3, [r4, #8]
 8007dc8:	42b3      	cmp	r3, r6
 8007dca:	dc19      	bgt.n	8007e00 <__multadd+0x78>
 8007dcc:	6861      	ldr	r1, [r4, #4]
 8007dce:	4638      	mov	r0, r7
 8007dd0:	3101      	adds	r1, #1
 8007dd2:	f7ff ff77 	bl	8007cc4 <_Balloc>
 8007dd6:	4605      	mov	r5, r0
 8007dd8:	b928      	cbnz	r0, 8007de6 <__multadd+0x5e>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	4b0d      	ldr	r3, [pc, #52]	; (8007e14 <__multadd+0x8c>)
 8007dde:	480e      	ldr	r0, [pc, #56]	; (8007e18 <__multadd+0x90>)
 8007de0:	21b5      	movs	r1, #181	; 0xb5
 8007de2:	f7fe fb1b 	bl	800641c <__assert_func>
 8007de6:	6922      	ldr	r2, [r4, #16]
 8007de8:	3202      	adds	r2, #2
 8007dea:	f104 010c 	add.w	r1, r4, #12
 8007dee:	0092      	lsls	r2, r2, #2
 8007df0:	300c      	adds	r0, #12
 8007df2:	f7fc fc5d 	bl	80046b0 <memcpy>
 8007df6:	4621      	mov	r1, r4
 8007df8:	4638      	mov	r0, r7
 8007dfa:	f7ff ffa3 	bl	8007d44 <_Bfree>
 8007dfe:	462c      	mov	r4, r5
 8007e00:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007e04:	3601      	adds	r6, #1
 8007e06:	f8c3 8014 	str.w	r8, [r3, #20]
 8007e0a:	6126      	str	r6, [r4, #16]
 8007e0c:	4620      	mov	r0, r4
 8007e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e12:	bf00      	nop
 8007e14:	0800a280 	.word	0x0800a280
 8007e18:	0800a374 	.word	0x0800a374

08007e1c <__s2b>:
 8007e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e20:	460c      	mov	r4, r1
 8007e22:	4615      	mov	r5, r2
 8007e24:	461f      	mov	r7, r3
 8007e26:	2209      	movs	r2, #9
 8007e28:	3308      	adds	r3, #8
 8007e2a:	4606      	mov	r6, r0
 8007e2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e30:	2100      	movs	r1, #0
 8007e32:	2201      	movs	r2, #1
 8007e34:	429a      	cmp	r2, r3
 8007e36:	db09      	blt.n	8007e4c <__s2b+0x30>
 8007e38:	4630      	mov	r0, r6
 8007e3a:	f7ff ff43 	bl	8007cc4 <_Balloc>
 8007e3e:	b940      	cbnz	r0, 8007e52 <__s2b+0x36>
 8007e40:	4602      	mov	r2, r0
 8007e42:	4b19      	ldr	r3, [pc, #100]	; (8007ea8 <__s2b+0x8c>)
 8007e44:	4819      	ldr	r0, [pc, #100]	; (8007eac <__s2b+0x90>)
 8007e46:	21ce      	movs	r1, #206	; 0xce
 8007e48:	f7fe fae8 	bl	800641c <__assert_func>
 8007e4c:	0052      	lsls	r2, r2, #1
 8007e4e:	3101      	adds	r1, #1
 8007e50:	e7f0      	b.n	8007e34 <__s2b+0x18>
 8007e52:	9b08      	ldr	r3, [sp, #32]
 8007e54:	6143      	str	r3, [r0, #20]
 8007e56:	2d09      	cmp	r5, #9
 8007e58:	f04f 0301 	mov.w	r3, #1
 8007e5c:	6103      	str	r3, [r0, #16]
 8007e5e:	dd16      	ble.n	8007e8e <__s2b+0x72>
 8007e60:	f104 0909 	add.w	r9, r4, #9
 8007e64:	46c8      	mov	r8, r9
 8007e66:	442c      	add	r4, r5
 8007e68:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007e6c:	4601      	mov	r1, r0
 8007e6e:	3b30      	subs	r3, #48	; 0x30
 8007e70:	220a      	movs	r2, #10
 8007e72:	4630      	mov	r0, r6
 8007e74:	f7ff ff88 	bl	8007d88 <__multadd>
 8007e78:	45a0      	cmp	r8, r4
 8007e7a:	d1f5      	bne.n	8007e68 <__s2b+0x4c>
 8007e7c:	f1a5 0408 	sub.w	r4, r5, #8
 8007e80:	444c      	add	r4, r9
 8007e82:	1b2d      	subs	r5, r5, r4
 8007e84:	1963      	adds	r3, r4, r5
 8007e86:	42bb      	cmp	r3, r7
 8007e88:	db04      	blt.n	8007e94 <__s2b+0x78>
 8007e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e8e:	340a      	adds	r4, #10
 8007e90:	2509      	movs	r5, #9
 8007e92:	e7f6      	b.n	8007e82 <__s2b+0x66>
 8007e94:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007e98:	4601      	mov	r1, r0
 8007e9a:	3b30      	subs	r3, #48	; 0x30
 8007e9c:	220a      	movs	r2, #10
 8007e9e:	4630      	mov	r0, r6
 8007ea0:	f7ff ff72 	bl	8007d88 <__multadd>
 8007ea4:	e7ee      	b.n	8007e84 <__s2b+0x68>
 8007ea6:	bf00      	nop
 8007ea8:	0800a280 	.word	0x0800a280
 8007eac:	0800a374 	.word	0x0800a374

08007eb0 <__hi0bits>:
 8007eb0:	0c03      	lsrs	r3, r0, #16
 8007eb2:	041b      	lsls	r3, r3, #16
 8007eb4:	b9d3      	cbnz	r3, 8007eec <__hi0bits+0x3c>
 8007eb6:	0400      	lsls	r0, r0, #16
 8007eb8:	2310      	movs	r3, #16
 8007eba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007ebe:	bf04      	itt	eq
 8007ec0:	0200      	lsleq	r0, r0, #8
 8007ec2:	3308      	addeq	r3, #8
 8007ec4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007ec8:	bf04      	itt	eq
 8007eca:	0100      	lsleq	r0, r0, #4
 8007ecc:	3304      	addeq	r3, #4
 8007ece:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007ed2:	bf04      	itt	eq
 8007ed4:	0080      	lsleq	r0, r0, #2
 8007ed6:	3302      	addeq	r3, #2
 8007ed8:	2800      	cmp	r0, #0
 8007eda:	db05      	blt.n	8007ee8 <__hi0bits+0x38>
 8007edc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007ee0:	f103 0301 	add.w	r3, r3, #1
 8007ee4:	bf08      	it	eq
 8007ee6:	2320      	moveq	r3, #32
 8007ee8:	4618      	mov	r0, r3
 8007eea:	4770      	bx	lr
 8007eec:	2300      	movs	r3, #0
 8007eee:	e7e4      	b.n	8007eba <__hi0bits+0xa>

08007ef0 <__lo0bits>:
 8007ef0:	6803      	ldr	r3, [r0, #0]
 8007ef2:	f013 0207 	ands.w	r2, r3, #7
 8007ef6:	4601      	mov	r1, r0
 8007ef8:	d00b      	beq.n	8007f12 <__lo0bits+0x22>
 8007efa:	07da      	lsls	r2, r3, #31
 8007efc:	d424      	bmi.n	8007f48 <__lo0bits+0x58>
 8007efe:	0798      	lsls	r0, r3, #30
 8007f00:	bf49      	itett	mi
 8007f02:	085b      	lsrmi	r3, r3, #1
 8007f04:	089b      	lsrpl	r3, r3, #2
 8007f06:	2001      	movmi	r0, #1
 8007f08:	600b      	strmi	r3, [r1, #0]
 8007f0a:	bf5c      	itt	pl
 8007f0c:	600b      	strpl	r3, [r1, #0]
 8007f0e:	2002      	movpl	r0, #2
 8007f10:	4770      	bx	lr
 8007f12:	b298      	uxth	r0, r3
 8007f14:	b9b0      	cbnz	r0, 8007f44 <__lo0bits+0x54>
 8007f16:	0c1b      	lsrs	r3, r3, #16
 8007f18:	2010      	movs	r0, #16
 8007f1a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007f1e:	bf04      	itt	eq
 8007f20:	0a1b      	lsreq	r3, r3, #8
 8007f22:	3008      	addeq	r0, #8
 8007f24:	071a      	lsls	r2, r3, #28
 8007f26:	bf04      	itt	eq
 8007f28:	091b      	lsreq	r3, r3, #4
 8007f2a:	3004      	addeq	r0, #4
 8007f2c:	079a      	lsls	r2, r3, #30
 8007f2e:	bf04      	itt	eq
 8007f30:	089b      	lsreq	r3, r3, #2
 8007f32:	3002      	addeq	r0, #2
 8007f34:	07da      	lsls	r2, r3, #31
 8007f36:	d403      	bmi.n	8007f40 <__lo0bits+0x50>
 8007f38:	085b      	lsrs	r3, r3, #1
 8007f3a:	f100 0001 	add.w	r0, r0, #1
 8007f3e:	d005      	beq.n	8007f4c <__lo0bits+0x5c>
 8007f40:	600b      	str	r3, [r1, #0]
 8007f42:	4770      	bx	lr
 8007f44:	4610      	mov	r0, r2
 8007f46:	e7e8      	b.n	8007f1a <__lo0bits+0x2a>
 8007f48:	2000      	movs	r0, #0
 8007f4a:	4770      	bx	lr
 8007f4c:	2020      	movs	r0, #32
 8007f4e:	4770      	bx	lr

08007f50 <__i2b>:
 8007f50:	b510      	push	{r4, lr}
 8007f52:	460c      	mov	r4, r1
 8007f54:	2101      	movs	r1, #1
 8007f56:	f7ff feb5 	bl	8007cc4 <_Balloc>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	b928      	cbnz	r0, 8007f6a <__i2b+0x1a>
 8007f5e:	4b05      	ldr	r3, [pc, #20]	; (8007f74 <__i2b+0x24>)
 8007f60:	4805      	ldr	r0, [pc, #20]	; (8007f78 <__i2b+0x28>)
 8007f62:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007f66:	f7fe fa59 	bl	800641c <__assert_func>
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	6144      	str	r4, [r0, #20]
 8007f6e:	6103      	str	r3, [r0, #16]
 8007f70:	bd10      	pop	{r4, pc}
 8007f72:	bf00      	nop
 8007f74:	0800a280 	.word	0x0800a280
 8007f78:	0800a374 	.word	0x0800a374

08007f7c <__multiply>:
 8007f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f80:	4614      	mov	r4, r2
 8007f82:	690a      	ldr	r2, [r1, #16]
 8007f84:	6923      	ldr	r3, [r4, #16]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	bfb8      	it	lt
 8007f8a:	460b      	movlt	r3, r1
 8007f8c:	460d      	mov	r5, r1
 8007f8e:	bfbc      	itt	lt
 8007f90:	4625      	movlt	r5, r4
 8007f92:	461c      	movlt	r4, r3
 8007f94:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007f98:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007f9c:	68ab      	ldr	r3, [r5, #8]
 8007f9e:	6869      	ldr	r1, [r5, #4]
 8007fa0:	eb0a 0709 	add.w	r7, sl, r9
 8007fa4:	42bb      	cmp	r3, r7
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	bfb8      	it	lt
 8007faa:	3101      	addlt	r1, #1
 8007fac:	f7ff fe8a 	bl	8007cc4 <_Balloc>
 8007fb0:	b930      	cbnz	r0, 8007fc0 <__multiply+0x44>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	4b42      	ldr	r3, [pc, #264]	; (80080c0 <__multiply+0x144>)
 8007fb6:	4843      	ldr	r0, [pc, #268]	; (80080c4 <__multiply+0x148>)
 8007fb8:	f240 115d 	movw	r1, #349	; 0x15d
 8007fbc:	f7fe fa2e 	bl	800641c <__assert_func>
 8007fc0:	f100 0614 	add.w	r6, r0, #20
 8007fc4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007fc8:	4633      	mov	r3, r6
 8007fca:	2200      	movs	r2, #0
 8007fcc:	4543      	cmp	r3, r8
 8007fce:	d31e      	bcc.n	800800e <__multiply+0x92>
 8007fd0:	f105 0c14 	add.w	ip, r5, #20
 8007fd4:	f104 0314 	add.w	r3, r4, #20
 8007fd8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007fdc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007fe0:	9202      	str	r2, [sp, #8]
 8007fe2:	ebac 0205 	sub.w	r2, ip, r5
 8007fe6:	3a15      	subs	r2, #21
 8007fe8:	f022 0203 	bic.w	r2, r2, #3
 8007fec:	3204      	adds	r2, #4
 8007fee:	f105 0115 	add.w	r1, r5, #21
 8007ff2:	458c      	cmp	ip, r1
 8007ff4:	bf38      	it	cc
 8007ff6:	2204      	movcc	r2, #4
 8007ff8:	9201      	str	r2, [sp, #4]
 8007ffa:	9a02      	ldr	r2, [sp, #8]
 8007ffc:	9303      	str	r3, [sp, #12]
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d808      	bhi.n	8008014 <__multiply+0x98>
 8008002:	2f00      	cmp	r7, #0
 8008004:	dc55      	bgt.n	80080b2 <__multiply+0x136>
 8008006:	6107      	str	r7, [r0, #16]
 8008008:	b005      	add	sp, #20
 800800a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800800e:	f843 2b04 	str.w	r2, [r3], #4
 8008012:	e7db      	b.n	8007fcc <__multiply+0x50>
 8008014:	f8b3 a000 	ldrh.w	sl, [r3]
 8008018:	f1ba 0f00 	cmp.w	sl, #0
 800801c:	d020      	beq.n	8008060 <__multiply+0xe4>
 800801e:	f105 0e14 	add.w	lr, r5, #20
 8008022:	46b1      	mov	r9, r6
 8008024:	2200      	movs	r2, #0
 8008026:	f85e 4b04 	ldr.w	r4, [lr], #4
 800802a:	f8d9 b000 	ldr.w	fp, [r9]
 800802e:	b2a1      	uxth	r1, r4
 8008030:	fa1f fb8b 	uxth.w	fp, fp
 8008034:	fb0a b101 	mla	r1, sl, r1, fp
 8008038:	4411      	add	r1, r2
 800803a:	f8d9 2000 	ldr.w	r2, [r9]
 800803e:	0c24      	lsrs	r4, r4, #16
 8008040:	0c12      	lsrs	r2, r2, #16
 8008042:	fb0a 2404 	mla	r4, sl, r4, r2
 8008046:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800804a:	b289      	uxth	r1, r1
 800804c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008050:	45f4      	cmp	ip, lr
 8008052:	f849 1b04 	str.w	r1, [r9], #4
 8008056:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800805a:	d8e4      	bhi.n	8008026 <__multiply+0xaa>
 800805c:	9901      	ldr	r1, [sp, #4]
 800805e:	5072      	str	r2, [r6, r1]
 8008060:	9a03      	ldr	r2, [sp, #12]
 8008062:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008066:	3304      	adds	r3, #4
 8008068:	f1b9 0f00 	cmp.w	r9, #0
 800806c:	d01f      	beq.n	80080ae <__multiply+0x132>
 800806e:	6834      	ldr	r4, [r6, #0]
 8008070:	f105 0114 	add.w	r1, r5, #20
 8008074:	46b6      	mov	lr, r6
 8008076:	f04f 0a00 	mov.w	sl, #0
 800807a:	880a      	ldrh	r2, [r1, #0]
 800807c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008080:	fb09 b202 	mla	r2, r9, r2, fp
 8008084:	4492      	add	sl, r2
 8008086:	b2a4      	uxth	r4, r4
 8008088:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800808c:	f84e 4b04 	str.w	r4, [lr], #4
 8008090:	f851 4b04 	ldr.w	r4, [r1], #4
 8008094:	f8be 2000 	ldrh.w	r2, [lr]
 8008098:	0c24      	lsrs	r4, r4, #16
 800809a:	fb09 2404 	mla	r4, r9, r4, r2
 800809e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80080a2:	458c      	cmp	ip, r1
 80080a4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80080a8:	d8e7      	bhi.n	800807a <__multiply+0xfe>
 80080aa:	9a01      	ldr	r2, [sp, #4]
 80080ac:	50b4      	str	r4, [r6, r2]
 80080ae:	3604      	adds	r6, #4
 80080b0:	e7a3      	b.n	8007ffa <__multiply+0x7e>
 80080b2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1a5      	bne.n	8008006 <__multiply+0x8a>
 80080ba:	3f01      	subs	r7, #1
 80080bc:	e7a1      	b.n	8008002 <__multiply+0x86>
 80080be:	bf00      	nop
 80080c0:	0800a280 	.word	0x0800a280
 80080c4:	0800a374 	.word	0x0800a374

080080c8 <__pow5mult>:
 80080c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080cc:	4615      	mov	r5, r2
 80080ce:	f012 0203 	ands.w	r2, r2, #3
 80080d2:	4606      	mov	r6, r0
 80080d4:	460f      	mov	r7, r1
 80080d6:	d007      	beq.n	80080e8 <__pow5mult+0x20>
 80080d8:	4c25      	ldr	r4, [pc, #148]	; (8008170 <__pow5mult+0xa8>)
 80080da:	3a01      	subs	r2, #1
 80080dc:	2300      	movs	r3, #0
 80080de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80080e2:	f7ff fe51 	bl	8007d88 <__multadd>
 80080e6:	4607      	mov	r7, r0
 80080e8:	10ad      	asrs	r5, r5, #2
 80080ea:	d03d      	beq.n	8008168 <__pow5mult+0xa0>
 80080ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80080ee:	b97c      	cbnz	r4, 8008110 <__pow5mult+0x48>
 80080f0:	2010      	movs	r0, #16
 80080f2:	f7ff fdcd 	bl	8007c90 <malloc>
 80080f6:	4602      	mov	r2, r0
 80080f8:	6270      	str	r0, [r6, #36]	; 0x24
 80080fa:	b928      	cbnz	r0, 8008108 <__pow5mult+0x40>
 80080fc:	4b1d      	ldr	r3, [pc, #116]	; (8008174 <__pow5mult+0xac>)
 80080fe:	481e      	ldr	r0, [pc, #120]	; (8008178 <__pow5mult+0xb0>)
 8008100:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008104:	f7fe f98a 	bl	800641c <__assert_func>
 8008108:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800810c:	6004      	str	r4, [r0, #0]
 800810e:	60c4      	str	r4, [r0, #12]
 8008110:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008114:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008118:	b94c      	cbnz	r4, 800812e <__pow5mult+0x66>
 800811a:	f240 2171 	movw	r1, #625	; 0x271
 800811e:	4630      	mov	r0, r6
 8008120:	f7ff ff16 	bl	8007f50 <__i2b>
 8008124:	2300      	movs	r3, #0
 8008126:	f8c8 0008 	str.w	r0, [r8, #8]
 800812a:	4604      	mov	r4, r0
 800812c:	6003      	str	r3, [r0, #0]
 800812e:	f04f 0900 	mov.w	r9, #0
 8008132:	07eb      	lsls	r3, r5, #31
 8008134:	d50a      	bpl.n	800814c <__pow5mult+0x84>
 8008136:	4639      	mov	r1, r7
 8008138:	4622      	mov	r2, r4
 800813a:	4630      	mov	r0, r6
 800813c:	f7ff ff1e 	bl	8007f7c <__multiply>
 8008140:	4639      	mov	r1, r7
 8008142:	4680      	mov	r8, r0
 8008144:	4630      	mov	r0, r6
 8008146:	f7ff fdfd 	bl	8007d44 <_Bfree>
 800814a:	4647      	mov	r7, r8
 800814c:	106d      	asrs	r5, r5, #1
 800814e:	d00b      	beq.n	8008168 <__pow5mult+0xa0>
 8008150:	6820      	ldr	r0, [r4, #0]
 8008152:	b938      	cbnz	r0, 8008164 <__pow5mult+0x9c>
 8008154:	4622      	mov	r2, r4
 8008156:	4621      	mov	r1, r4
 8008158:	4630      	mov	r0, r6
 800815a:	f7ff ff0f 	bl	8007f7c <__multiply>
 800815e:	6020      	str	r0, [r4, #0]
 8008160:	f8c0 9000 	str.w	r9, [r0]
 8008164:	4604      	mov	r4, r0
 8008166:	e7e4      	b.n	8008132 <__pow5mult+0x6a>
 8008168:	4638      	mov	r0, r7
 800816a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800816e:	bf00      	nop
 8008170:	0800a4c8 	.word	0x0800a4c8
 8008174:	0800a20a 	.word	0x0800a20a
 8008178:	0800a374 	.word	0x0800a374

0800817c <__lshift>:
 800817c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008180:	460c      	mov	r4, r1
 8008182:	6849      	ldr	r1, [r1, #4]
 8008184:	6923      	ldr	r3, [r4, #16]
 8008186:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800818a:	68a3      	ldr	r3, [r4, #8]
 800818c:	4607      	mov	r7, r0
 800818e:	4691      	mov	r9, r2
 8008190:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008194:	f108 0601 	add.w	r6, r8, #1
 8008198:	42b3      	cmp	r3, r6
 800819a:	db0b      	blt.n	80081b4 <__lshift+0x38>
 800819c:	4638      	mov	r0, r7
 800819e:	f7ff fd91 	bl	8007cc4 <_Balloc>
 80081a2:	4605      	mov	r5, r0
 80081a4:	b948      	cbnz	r0, 80081ba <__lshift+0x3e>
 80081a6:	4602      	mov	r2, r0
 80081a8:	4b28      	ldr	r3, [pc, #160]	; (800824c <__lshift+0xd0>)
 80081aa:	4829      	ldr	r0, [pc, #164]	; (8008250 <__lshift+0xd4>)
 80081ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80081b0:	f7fe f934 	bl	800641c <__assert_func>
 80081b4:	3101      	adds	r1, #1
 80081b6:	005b      	lsls	r3, r3, #1
 80081b8:	e7ee      	b.n	8008198 <__lshift+0x1c>
 80081ba:	2300      	movs	r3, #0
 80081bc:	f100 0114 	add.w	r1, r0, #20
 80081c0:	f100 0210 	add.w	r2, r0, #16
 80081c4:	4618      	mov	r0, r3
 80081c6:	4553      	cmp	r3, sl
 80081c8:	db33      	blt.n	8008232 <__lshift+0xb6>
 80081ca:	6920      	ldr	r0, [r4, #16]
 80081cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80081d0:	f104 0314 	add.w	r3, r4, #20
 80081d4:	f019 091f 	ands.w	r9, r9, #31
 80081d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80081dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80081e0:	d02b      	beq.n	800823a <__lshift+0xbe>
 80081e2:	f1c9 0e20 	rsb	lr, r9, #32
 80081e6:	468a      	mov	sl, r1
 80081e8:	2200      	movs	r2, #0
 80081ea:	6818      	ldr	r0, [r3, #0]
 80081ec:	fa00 f009 	lsl.w	r0, r0, r9
 80081f0:	4302      	orrs	r2, r0
 80081f2:	f84a 2b04 	str.w	r2, [sl], #4
 80081f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80081fa:	459c      	cmp	ip, r3
 80081fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8008200:	d8f3      	bhi.n	80081ea <__lshift+0x6e>
 8008202:	ebac 0304 	sub.w	r3, ip, r4
 8008206:	3b15      	subs	r3, #21
 8008208:	f023 0303 	bic.w	r3, r3, #3
 800820c:	3304      	adds	r3, #4
 800820e:	f104 0015 	add.w	r0, r4, #21
 8008212:	4584      	cmp	ip, r0
 8008214:	bf38      	it	cc
 8008216:	2304      	movcc	r3, #4
 8008218:	50ca      	str	r2, [r1, r3]
 800821a:	b10a      	cbz	r2, 8008220 <__lshift+0xa4>
 800821c:	f108 0602 	add.w	r6, r8, #2
 8008220:	3e01      	subs	r6, #1
 8008222:	4638      	mov	r0, r7
 8008224:	612e      	str	r6, [r5, #16]
 8008226:	4621      	mov	r1, r4
 8008228:	f7ff fd8c 	bl	8007d44 <_Bfree>
 800822c:	4628      	mov	r0, r5
 800822e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008232:	f842 0f04 	str.w	r0, [r2, #4]!
 8008236:	3301      	adds	r3, #1
 8008238:	e7c5      	b.n	80081c6 <__lshift+0x4a>
 800823a:	3904      	subs	r1, #4
 800823c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008240:	f841 2f04 	str.w	r2, [r1, #4]!
 8008244:	459c      	cmp	ip, r3
 8008246:	d8f9      	bhi.n	800823c <__lshift+0xc0>
 8008248:	e7ea      	b.n	8008220 <__lshift+0xa4>
 800824a:	bf00      	nop
 800824c:	0800a280 	.word	0x0800a280
 8008250:	0800a374 	.word	0x0800a374

08008254 <__mcmp>:
 8008254:	b530      	push	{r4, r5, lr}
 8008256:	6902      	ldr	r2, [r0, #16]
 8008258:	690c      	ldr	r4, [r1, #16]
 800825a:	1b12      	subs	r2, r2, r4
 800825c:	d10e      	bne.n	800827c <__mcmp+0x28>
 800825e:	f100 0314 	add.w	r3, r0, #20
 8008262:	3114      	adds	r1, #20
 8008264:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008268:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800826c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008270:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008274:	42a5      	cmp	r5, r4
 8008276:	d003      	beq.n	8008280 <__mcmp+0x2c>
 8008278:	d305      	bcc.n	8008286 <__mcmp+0x32>
 800827a:	2201      	movs	r2, #1
 800827c:	4610      	mov	r0, r2
 800827e:	bd30      	pop	{r4, r5, pc}
 8008280:	4283      	cmp	r3, r0
 8008282:	d3f3      	bcc.n	800826c <__mcmp+0x18>
 8008284:	e7fa      	b.n	800827c <__mcmp+0x28>
 8008286:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800828a:	e7f7      	b.n	800827c <__mcmp+0x28>

0800828c <__mdiff>:
 800828c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008290:	460c      	mov	r4, r1
 8008292:	4606      	mov	r6, r0
 8008294:	4611      	mov	r1, r2
 8008296:	4620      	mov	r0, r4
 8008298:	4617      	mov	r7, r2
 800829a:	f7ff ffdb 	bl	8008254 <__mcmp>
 800829e:	1e05      	subs	r5, r0, #0
 80082a0:	d110      	bne.n	80082c4 <__mdiff+0x38>
 80082a2:	4629      	mov	r1, r5
 80082a4:	4630      	mov	r0, r6
 80082a6:	f7ff fd0d 	bl	8007cc4 <_Balloc>
 80082aa:	b930      	cbnz	r0, 80082ba <__mdiff+0x2e>
 80082ac:	4b39      	ldr	r3, [pc, #228]	; (8008394 <__mdiff+0x108>)
 80082ae:	4602      	mov	r2, r0
 80082b0:	f240 2132 	movw	r1, #562	; 0x232
 80082b4:	4838      	ldr	r0, [pc, #224]	; (8008398 <__mdiff+0x10c>)
 80082b6:	f7fe f8b1 	bl	800641c <__assert_func>
 80082ba:	2301      	movs	r3, #1
 80082bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80082c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c4:	bfa4      	itt	ge
 80082c6:	463b      	movge	r3, r7
 80082c8:	4627      	movge	r7, r4
 80082ca:	4630      	mov	r0, r6
 80082cc:	6879      	ldr	r1, [r7, #4]
 80082ce:	bfa6      	itte	ge
 80082d0:	461c      	movge	r4, r3
 80082d2:	2500      	movge	r5, #0
 80082d4:	2501      	movlt	r5, #1
 80082d6:	f7ff fcf5 	bl	8007cc4 <_Balloc>
 80082da:	b920      	cbnz	r0, 80082e6 <__mdiff+0x5a>
 80082dc:	4b2d      	ldr	r3, [pc, #180]	; (8008394 <__mdiff+0x108>)
 80082de:	4602      	mov	r2, r0
 80082e0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80082e4:	e7e6      	b.n	80082b4 <__mdiff+0x28>
 80082e6:	693e      	ldr	r6, [r7, #16]
 80082e8:	60c5      	str	r5, [r0, #12]
 80082ea:	6925      	ldr	r5, [r4, #16]
 80082ec:	f107 0114 	add.w	r1, r7, #20
 80082f0:	f104 0914 	add.w	r9, r4, #20
 80082f4:	f100 0e14 	add.w	lr, r0, #20
 80082f8:	f107 0210 	add.w	r2, r7, #16
 80082fc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008300:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008304:	46f2      	mov	sl, lr
 8008306:	2700      	movs	r7, #0
 8008308:	f859 3b04 	ldr.w	r3, [r9], #4
 800830c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008310:	fa1f f883 	uxth.w	r8, r3
 8008314:	fa17 f78b 	uxtah	r7, r7, fp
 8008318:	0c1b      	lsrs	r3, r3, #16
 800831a:	eba7 0808 	sub.w	r8, r7, r8
 800831e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008322:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008326:	fa1f f888 	uxth.w	r8, r8
 800832a:	141f      	asrs	r7, r3, #16
 800832c:	454d      	cmp	r5, r9
 800832e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008332:	f84a 3b04 	str.w	r3, [sl], #4
 8008336:	d8e7      	bhi.n	8008308 <__mdiff+0x7c>
 8008338:	1b2b      	subs	r3, r5, r4
 800833a:	3b15      	subs	r3, #21
 800833c:	f023 0303 	bic.w	r3, r3, #3
 8008340:	3304      	adds	r3, #4
 8008342:	3415      	adds	r4, #21
 8008344:	42a5      	cmp	r5, r4
 8008346:	bf38      	it	cc
 8008348:	2304      	movcc	r3, #4
 800834a:	4419      	add	r1, r3
 800834c:	4473      	add	r3, lr
 800834e:	469e      	mov	lr, r3
 8008350:	460d      	mov	r5, r1
 8008352:	4565      	cmp	r5, ip
 8008354:	d30e      	bcc.n	8008374 <__mdiff+0xe8>
 8008356:	f10c 0203 	add.w	r2, ip, #3
 800835a:	1a52      	subs	r2, r2, r1
 800835c:	f022 0203 	bic.w	r2, r2, #3
 8008360:	3903      	subs	r1, #3
 8008362:	458c      	cmp	ip, r1
 8008364:	bf38      	it	cc
 8008366:	2200      	movcc	r2, #0
 8008368:	441a      	add	r2, r3
 800836a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800836e:	b17b      	cbz	r3, 8008390 <__mdiff+0x104>
 8008370:	6106      	str	r6, [r0, #16]
 8008372:	e7a5      	b.n	80082c0 <__mdiff+0x34>
 8008374:	f855 8b04 	ldr.w	r8, [r5], #4
 8008378:	fa17 f488 	uxtah	r4, r7, r8
 800837c:	1422      	asrs	r2, r4, #16
 800837e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008382:	b2a4      	uxth	r4, r4
 8008384:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008388:	f84e 4b04 	str.w	r4, [lr], #4
 800838c:	1417      	asrs	r7, r2, #16
 800838e:	e7e0      	b.n	8008352 <__mdiff+0xc6>
 8008390:	3e01      	subs	r6, #1
 8008392:	e7ea      	b.n	800836a <__mdiff+0xde>
 8008394:	0800a280 	.word	0x0800a280
 8008398:	0800a374 	.word	0x0800a374

0800839c <__ulp>:
 800839c:	b082      	sub	sp, #8
 800839e:	ed8d 0b00 	vstr	d0, [sp]
 80083a2:	9b01      	ldr	r3, [sp, #4]
 80083a4:	4912      	ldr	r1, [pc, #72]	; (80083f0 <__ulp+0x54>)
 80083a6:	4019      	ands	r1, r3
 80083a8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80083ac:	2900      	cmp	r1, #0
 80083ae:	dd05      	ble.n	80083bc <__ulp+0x20>
 80083b0:	2200      	movs	r2, #0
 80083b2:	460b      	mov	r3, r1
 80083b4:	ec43 2b10 	vmov	d0, r2, r3
 80083b8:	b002      	add	sp, #8
 80083ba:	4770      	bx	lr
 80083bc:	4249      	negs	r1, r1
 80083be:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80083c2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80083c6:	f04f 0200 	mov.w	r2, #0
 80083ca:	f04f 0300 	mov.w	r3, #0
 80083ce:	da04      	bge.n	80083da <__ulp+0x3e>
 80083d0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80083d4:	fa41 f300 	asr.w	r3, r1, r0
 80083d8:	e7ec      	b.n	80083b4 <__ulp+0x18>
 80083da:	f1a0 0114 	sub.w	r1, r0, #20
 80083de:	291e      	cmp	r1, #30
 80083e0:	bfda      	itte	le
 80083e2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80083e6:	fa20 f101 	lsrle.w	r1, r0, r1
 80083ea:	2101      	movgt	r1, #1
 80083ec:	460a      	mov	r2, r1
 80083ee:	e7e1      	b.n	80083b4 <__ulp+0x18>
 80083f0:	7ff00000 	.word	0x7ff00000

080083f4 <__b2d>:
 80083f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083f6:	6905      	ldr	r5, [r0, #16]
 80083f8:	f100 0714 	add.w	r7, r0, #20
 80083fc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008400:	1f2e      	subs	r6, r5, #4
 8008402:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008406:	4620      	mov	r0, r4
 8008408:	f7ff fd52 	bl	8007eb0 <__hi0bits>
 800840c:	f1c0 0320 	rsb	r3, r0, #32
 8008410:	280a      	cmp	r0, #10
 8008412:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008490 <__b2d+0x9c>
 8008416:	600b      	str	r3, [r1, #0]
 8008418:	dc14      	bgt.n	8008444 <__b2d+0x50>
 800841a:	f1c0 0e0b 	rsb	lr, r0, #11
 800841e:	fa24 f10e 	lsr.w	r1, r4, lr
 8008422:	42b7      	cmp	r7, r6
 8008424:	ea41 030c 	orr.w	r3, r1, ip
 8008428:	bf34      	ite	cc
 800842a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800842e:	2100      	movcs	r1, #0
 8008430:	3015      	adds	r0, #21
 8008432:	fa04 f000 	lsl.w	r0, r4, r0
 8008436:	fa21 f10e 	lsr.w	r1, r1, lr
 800843a:	ea40 0201 	orr.w	r2, r0, r1
 800843e:	ec43 2b10 	vmov	d0, r2, r3
 8008442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008444:	42b7      	cmp	r7, r6
 8008446:	bf3a      	itte	cc
 8008448:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800844c:	f1a5 0608 	subcc.w	r6, r5, #8
 8008450:	2100      	movcs	r1, #0
 8008452:	380b      	subs	r0, #11
 8008454:	d017      	beq.n	8008486 <__b2d+0x92>
 8008456:	f1c0 0c20 	rsb	ip, r0, #32
 800845a:	fa04 f500 	lsl.w	r5, r4, r0
 800845e:	42be      	cmp	r6, r7
 8008460:	fa21 f40c 	lsr.w	r4, r1, ip
 8008464:	ea45 0504 	orr.w	r5, r5, r4
 8008468:	bf8c      	ite	hi
 800846a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800846e:	2400      	movls	r4, #0
 8008470:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008474:	fa01 f000 	lsl.w	r0, r1, r0
 8008478:	fa24 f40c 	lsr.w	r4, r4, ip
 800847c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008480:	ea40 0204 	orr.w	r2, r0, r4
 8008484:	e7db      	b.n	800843e <__b2d+0x4a>
 8008486:	ea44 030c 	orr.w	r3, r4, ip
 800848a:	460a      	mov	r2, r1
 800848c:	e7d7      	b.n	800843e <__b2d+0x4a>
 800848e:	bf00      	nop
 8008490:	3ff00000 	.word	0x3ff00000

08008494 <__d2b>:
 8008494:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008498:	4689      	mov	r9, r1
 800849a:	2101      	movs	r1, #1
 800849c:	ec57 6b10 	vmov	r6, r7, d0
 80084a0:	4690      	mov	r8, r2
 80084a2:	f7ff fc0f 	bl	8007cc4 <_Balloc>
 80084a6:	4604      	mov	r4, r0
 80084a8:	b930      	cbnz	r0, 80084b8 <__d2b+0x24>
 80084aa:	4602      	mov	r2, r0
 80084ac:	4b25      	ldr	r3, [pc, #148]	; (8008544 <__d2b+0xb0>)
 80084ae:	4826      	ldr	r0, [pc, #152]	; (8008548 <__d2b+0xb4>)
 80084b0:	f240 310a 	movw	r1, #778	; 0x30a
 80084b4:	f7fd ffb2 	bl	800641c <__assert_func>
 80084b8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80084bc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80084c0:	bb35      	cbnz	r5, 8008510 <__d2b+0x7c>
 80084c2:	2e00      	cmp	r6, #0
 80084c4:	9301      	str	r3, [sp, #4]
 80084c6:	d028      	beq.n	800851a <__d2b+0x86>
 80084c8:	4668      	mov	r0, sp
 80084ca:	9600      	str	r6, [sp, #0]
 80084cc:	f7ff fd10 	bl	8007ef0 <__lo0bits>
 80084d0:	9900      	ldr	r1, [sp, #0]
 80084d2:	b300      	cbz	r0, 8008516 <__d2b+0x82>
 80084d4:	9a01      	ldr	r2, [sp, #4]
 80084d6:	f1c0 0320 	rsb	r3, r0, #32
 80084da:	fa02 f303 	lsl.w	r3, r2, r3
 80084de:	430b      	orrs	r3, r1
 80084e0:	40c2      	lsrs	r2, r0
 80084e2:	6163      	str	r3, [r4, #20]
 80084e4:	9201      	str	r2, [sp, #4]
 80084e6:	9b01      	ldr	r3, [sp, #4]
 80084e8:	61a3      	str	r3, [r4, #24]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	bf14      	ite	ne
 80084ee:	2202      	movne	r2, #2
 80084f0:	2201      	moveq	r2, #1
 80084f2:	6122      	str	r2, [r4, #16]
 80084f4:	b1d5      	cbz	r5, 800852c <__d2b+0x98>
 80084f6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80084fa:	4405      	add	r5, r0
 80084fc:	f8c9 5000 	str.w	r5, [r9]
 8008500:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008504:	f8c8 0000 	str.w	r0, [r8]
 8008508:	4620      	mov	r0, r4
 800850a:	b003      	add	sp, #12
 800850c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008510:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008514:	e7d5      	b.n	80084c2 <__d2b+0x2e>
 8008516:	6161      	str	r1, [r4, #20]
 8008518:	e7e5      	b.n	80084e6 <__d2b+0x52>
 800851a:	a801      	add	r0, sp, #4
 800851c:	f7ff fce8 	bl	8007ef0 <__lo0bits>
 8008520:	9b01      	ldr	r3, [sp, #4]
 8008522:	6163      	str	r3, [r4, #20]
 8008524:	2201      	movs	r2, #1
 8008526:	6122      	str	r2, [r4, #16]
 8008528:	3020      	adds	r0, #32
 800852a:	e7e3      	b.n	80084f4 <__d2b+0x60>
 800852c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008530:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008534:	f8c9 0000 	str.w	r0, [r9]
 8008538:	6918      	ldr	r0, [r3, #16]
 800853a:	f7ff fcb9 	bl	8007eb0 <__hi0bits>
 800853e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008542:	e7df      	b.n	8008504 <__d2b+0x70>
 8008544:	0800a280 	.word	0x0800a280
 8008548:	0800a374 	.word	0x0800a374

0800854c <__ratio>:
 800854c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008550:	4688      	mov	r8, r1
 8008552:	4669      	mov	r1, sp
 8008554:	4681      	mov	r9, r0
 8008556:	f7ff ff4d 	bl	80083f4 <__b2d>
 800855a:	a901      	add	r1, sp, #4
 800855c:	4640      	mov	r0, r8
 800855e:	ec55 4b10 	vmov	r4, r5, d0
 8008562:	f7ff ff47 	bl	80083f4 <__b2d>
 8008566:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800856a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800856e:	eba3 0c02 	sub.w	ip, r3, r2
 8008572:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008576:	1a9b      	subs	r3, r3, r2
 8008578:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800857c:	ec51 0b10 	vmov	r0, r1, d0
 8008580:	2b00      	cmp	r3, #0
 8008582:	bfd6      	itet	le
 8008584:	460a      	movle	r2, r1
 8008586:	462a      	movgt	r2, r5
 8008588:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800858c:	468b      	mov	fp, r1
 800858e:	462f      	mov	r7, r5
 8008590:	bfd4      	ite	le
 8008592:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008596:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800859a:	4620      	mov	r0, r4
 800859c:	ee10 2a10 	vmov	r2, s0
 80085a0:	465b      	mov	r3, fp
 80085a2:	4639      	mov	r1, r7
 80085a4:	f7f8 f962 	bl	800086c <__aeabi_ddiv>
 80085a8:	ec41 0b10 	vmov	d0, r0, r1
 80085ac:	b003      	add	sp, #12
 80085ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080085b2 <__copybits>:
 80085b2:	3901      	subs	r1, #1
 80085b4:	b570      	push	{r4, r5, r6, lr}
 80085b6:	1149      	asrs	r1, r1, #5
 80085b8:	6914      	ldr	r4, [r2, #16]
 80085ba:	3101      	adds	r1, #1
 80085bc:	f102 0314 	add.w	r3, r2, #20
 80085c0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80085c4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80085c8:	1f05      	subs	r5, r0, #4
 80085ca:	42a3      	cmp	r3, r4
 80085cc:	d30c      	bcc.n	80085e8 <__copybits+0x36>
 80085ce:	1aa3      	subs	r3, r4, r2
 80085d0:	3b11      	subs	r3, #17
 80085d2:	f023 0303 	bic.w	r3, r3, #3
 80085d6:	3211      	adds	r2, #17
 80085d8:	42a2      	cmp	r2, r4
 80085da:	bf88      	it	hi
 80085dc:	2300      	movhi	r3, #0
 80085de:	4418      	add	r0, r3
 80085e0:	2300      	movs	r3, #0
 80085e2:	4288      	cmp	r0, r1
 80085e4:	d305      	bcc.n	80085f2 <__copybits+0x40>
 80085e6:	bd70      	pop	{r4, r5, r6, pc}
 80085e8:	f853 6b04 	ldr.w	r6, [r3], #4
 80085ec:	f845 6f04 	str.w	r6, [r5, #4]!
 80085f0:	e7eb      	b.n	80085ca <__copybits+0x18>
 80085f2:	f840 3b04 	str.w	r3, [r0], #4
 80085f6:	e7f4      	b.n	80085e2 <__copybits+0x30>

080085f8 <__any_on>:
 80085f8:	f100 0214 	add.w	r2, r0, #20
 80085fc:	6900      	ldr	r0, [r0, #16]
 80085fe:	114b      	asrs	r3, r1, #5
 8008600:	4298      	cmp	r0, r3
 8008602:	b510      	push	{r4, lr}
 8008604:	db11      	blt.n	800862a <__any_on+0x32>
 8008606:	dd0a      	ble.n	800861e <__any_on+0x26>
 8008608:	f011 011f 	ands.w	r1, r1, #31
 800860c:	d007      	beq.n	800861e <__any_on+0x26>
 800860e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008612:	fa24 f001 	lsr.w	r0, r4, r1
 8008616:	fa00 f101 	lsl.w	r1, r0, r1
 800861a:	428c      	cmp	r4, r1
 800861c:	d10b      	bne.n	8008636 <__any_on+0x3e>
 800861e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008622:	4293      	cmp	r3, r2
 8008624:	d803      	bhi.n	800862e <__any_on+0x36>
 8008626:	2000      	movs	r0, #0
 8008628:	bd10      	pop	{r4, pc}
 800862a:	4603      	mov	r3, r0
 800862c:	e7f7      	b.n	800861e <__any_on+0x26>
 800862e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008632:	2900      	cmp	r1, #0
 8008634:	d0f5      	beq.n	8008622 <__any_on+0x2a>
 8008636:	2001      	movs	r0, #1
 8008638:	e7f6      	b.n	8008628 <__any_on+0x30>

0800863a <_calloc_r>:
 800863a:	b513      	push	{r0, r1, r4, lr}
 800863c:	434a      	muls	r2, r1
 800863e:	4611      	mov	r1, r2
 8008640:	9201      	str	r2, [sp, #4]
 8008642:	f000 f859 	bl	80086f8 <_malloc_r>
 8008646:	4604      	mov	r4, r0
 8008648:	b118      	cbz	r0, 8008652 <_calloc_r+0x18>
 800864a:	9a01      	ldr	r2, [sp, #4]
 800864c:	2100      	movs	r1, #0
 800864e:	f7fc f83d 	bl	80046cc <memset>
 8008652:	4620      	mov	r0, r4
 8008654:	b002      	add	sp, #8
 8008656:	bd10      	pop	{r4, pc}

08008658 <_free_r>:
 8008658:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800865a:	2900      	cmp	r1, #0
 800865c:	d048      	beq.n	80086f0 <_free_r+0x98>
 800865e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008662:	9001      	str	r0, [sp, #4]
 8008664:	2b00      	cmp	r3, #0
 8008666:	f1a1 0404 	sub.w	r4, r1, #4
 800866a:	bfb8      	it	lt
 800866c:	18e4      	addlt	r4, r4, r3
 800866e:	f000 fc45 	bl	8008efc <__malloc_lock>
 8008672:	4a20      	ldr	r2, [pc, #128]	; (80086f4 <_free_r+0x9c>)
 8008674:	9801      	ldr	r0, [sp, #4]
 8008676:	6813      	ldr	r3, [r2, #0]
 8008678:	4615      	mov	r5, r2
 800867a:	b933      	cbnz	r3, 800868a <_free_r+0x32>
 800867c:	6063      	str	r3, [r4, #4]
 800867e:	6014      	str	r4, [r2, #0]
 8008680:	b003      	add	sp, #12
 8008682:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008686:	f000 bc3f 	b.w	8008f08 <__malloc_unlock>
 800868a:	42a3      	cmp	r3, r4
 800868c:	d90b      	bls.n	80086a6 <_free_r+0x4e>
 800868e:	6821      	ldr	r1, [r4, #0]
 8008690:	1862      	adds	r2, r4, r1
 8008692:	4293      	cmp	r3, r2
 8008694:	bf04      	itt	eq
 8008696:	681a      	ldreq	r2, [r3, #0]
 8008698:	685b      	ldreq	r3, [r3, #4]
 800869a:	6063      	str	r3, [r4, #4]
 800869c:	bf04      	itt	eq
 800869e:	1852      	addeq	r2, r2, r1
 80086a0:	6022      	streq	r2, [r4, #0]
 80086a2:	602c      	str	r4, [r5, #0]
 80086a4:	e7ec      	b.n	8008680 <_free_r+0x28>
 80086a6:	461a      	mov	r2, r3
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	b10b      	cbz	r3, 80086b0 <_free_r+0x58>
 80086ac:	42a3      	cmp	r3, r4
 80086ae:	d9fa      	bls.n	80086a6 <_free_r+0x4e>
 80086b0:	6811      	ldr	r1, [r2, #0]
 80086b2:	1855      	adds	r5, r2, r1
 80086b4:	42a5      	cmp	r5, r4
 80086b6:	d10b      	bne.n	80086d0 <_free_r+0x78>
 80086b8:	6824      	ldr	r4, [r4, #0]
 80086ba:	4421      	add	r1, r4
 80086bc:	1854      	adds	r4, r2, r1
 80086be:	42a3      	cmp	r3, r4
 80086c0:	6011      	str	r1, [r2, #0]
 80086c2:	d1dd      	bne.n	8008680 <_free_r+0x28>
 80086c4:	681c      	ldr	r4, [r3, #0]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	6053      	str	r3, [r2, #4]
 80086ca:	4421      	add	r1, r4
 80086cc:	6011      	str	r1, [r2, #0]
 80086ce:	e7d7      	b.n	8008680 <_free_r+0x28>
 80086d0:	d902      	bls.n	80086d8 <_free_r+0x80>
 80086d2:	230c      	movs	r3, #12
 80086d4:	6003      	str	r3, [r0, #0]
 80086d6:	e7d3      	b.n	8008680 <_free_r+0x28>
 80086d8:	6825      	ldr	r5, [r4, #0]
 80086da:	1961      	adds	r1, r4, r5
 80086dc:	428b      	cmp	r3, r1
 80086de:	bf04      	itt	eq
 80086e0:	6819      	ldreq	r1, [r3, #0]
 80086e2:	685b      	ldreq	r3, [r3, #4]
 80086e4:	6063      	str	r3, [r4, #4]
 80086e6:	bf04      	itt	eq
 80086e8:	1949      	addeq	r1, r1, r5
 80086ea:	6021      	streq	r1, [r4, #0]
 80086ec:	6054      	str	r4, [r2, #4]
 80086ee:	e7c7      	b.n	8008680 <_free_r+0x28>
 80086f0:	b003      	add	sp, #12
 80086f2:	bd30      	pop	{r4, r5, pc}
 80086f4:	200005b0 	.word	0x200005b0

080086f8 <_malloc_r>:
 80086f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086fa:	1ccd      	adds	r5, r1, #3
 80086fc:	f025 0503 	bic.w	r5, r5, #3
 8008700:	3508      	adds	r5, #8
 8008702:	2d0c      	cmp	r5, #12
 8008704:	bf38      	it	cc
 8008706:	250c      	movcc	r5, #12
 8008708:	2d00      	cmp	r5, #0
 800870a:	4606      	mov	r6, r0
 800870c:	db01      	blt.n	8008712 <_malloc_r+0x1a>
 800870e:	42a9      	cmp	r1, r5
 8008710:	d903      	bls.n	800871a <_malloc_r+0x22>
 8008712:	230c      	movs	r3, #12
 8008714:	6033      	str	r3, [r6, #0]
 8008716:	2000      	movs	r0, #0
 8008718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800871a:	f000 fbef 	bl	8008efc <__malloc_lock>
 800871e:	4921      	ldr	r1, [pc, #132]	; (80087a4 <_malloc_r+0xac>)
 8008720:	680a      	ldr	r2, [r1, #0]
 8008722:	4614      	mov	r4, r2
 8008724:	b99c      	cbnz	r4, 800874e <_malloc_r+0x56>
 8008726:	4f20      	ldr	r7, [pc, #128]	; (80087a8 <_malloc_r+0xb0>)
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	b923      	cbnz	r3, 8008736 <_malloc_r+0x3e>
 800872c:	4621      	mov	r1, r4
 800872e:	4630      	mov	r0, r6
 8008730:	f000 fafa 	bl	8008d28 <_sbrk_r>
 8008734:	6038      	str	r0, [r7, #0]
 8008736:	4629      	mov	r1, r5
 8008738:	4630      	mov	r0, r6
 800873a:	f000 faf5 	bl	8008d28 <_sbrk_r>
 800873e:	1c43      	adds	r3, r0, #1
 8008740:	d123      	bne.n	800878a <_malloc_r+0x92>
 8008742:	230c      	movs	r3, #12
 8008744:	6033      	str	r3, [r6, #0]
 8008746:	4630      	mov	r0, r6
 8008748:	f000 fbde 	bl	8008f08 <__malloc_unlock>
 800874c:	e7e3      	b.n	8008716 <_malloc_r+0x1e>
 800874e:	6823      	ldr	r3, [r4, #0]
 8008750:	1b5b      	subs	r3, r3, r5
 8008752:	d417      	bmi.n	8008784 <_malloc_r+0x8c>
 8008754:	2b0b      	cmp	r3, #11
 8008756:	d903      	bls.n	8008760 <_malloc_r+0x68>
 8008758:	6023      	str	r3, [r4, #0]
 800875a:	441c      	add	r4, r3
 800875c:	6025      	str	r5, [r4, #0]
 800875e:	e004      	b.n	800876a <_malloc_r+0x72>
 8008760:	6863      	ldr	r3, [r4, #4]
 8008762:	42a2      	cmp	r2, r4
 8008764:	bf0c      	ite	eq
 8008766:	600b      	streq	r3, [r1, #0]
 8008768:	6053      	strne	r3, [r2, #4]
 800876a:	4630      	mov	r0, r6
 800876c:	f000 fbcc 	bl	8008f08 <__malloc_unlock>
 8008770:	f104 000b 	add.w	r0, r4, #11
 8008774:	1d23      	adds	r3, r4, #4
 8008776:	f020 0007 	bic.w	r0, r0, #7
 800877a:	1ac2      	subs	r2, r0, r3
 800877c:	d0cc      	beq.n	8008718 <_malloc_r+0x20>
 800877e:	1a1b      	subs	r3, r3, r0
 8008780:	50a3      	str	r3, [r4, r2]
 8008782:	e7c9      	b.n	8008718 <_malloc_r+0x20>
 8008784:	4622      	mov	r2, r4
 8008786:	6864      	ldr	r4, [r4, #4]
 8008788:	e7cc      	b.n	8008724 <_malloc_r+0x2c>
 800878a:	1cc4      	adds	r4, r0, #3
 800878c:	f024 0403 	bic.w	r4, r4, #3
 8008790:	42a0      	cmp	r0, r4
 8008792:	d0e3      	beq.n	800875c <_malloc_r+0x64>
 8008794:	1a21      	subs	r1, r4, r0
 8008796:	4630      	mov	r0, r6
 8008798:	f000 fac6 	bl	8008d28 <_sbrk_r>
 800879c:	3001      	adds	r0, #1
 800879e:	d1dd      	bne.n	800875c <_malloc_r+0x64>
 80087a0:	e7cf      	b.n	8008742 <_malloc_r+0x4a>
 80087a2:	bf00      	nop
 80087a4:	200005b0 	.word	0x200005b0
 80087a8:	200005b4 	.word	0x200005b4

080087ac <__ssputs_r>:
 80087ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087b0:	688e      	ldr	r6, [r1, #8]
 80087b2:	429e      	cmp	r6, r3
 80087b4:	4682      	mov	sl, r0
 80087b6:	460c      	mov	r4, r1
 80087b8:	4690      	mov	r8, r2
 80087ba:	461f      	mov	r7, r3
 80087bc:	d838      	bhi.n	8008830 <__ssputs_r+0x84>
 80087be:	898a      	ldrh	r2, [r1, #12]
 80087c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80087c4:	d032      	beq.n	800882c <__ssputs_r+0x80>
 80087c6:	6825      	ldr	r5, [r4, #0]
 80087c8:	6909      	ldr	r1, [r1, #16]
 80087ca:	eba5 0901 	sub.w	r9, r5, r1
 80087ce:	6965      	ldr	r5, [r4, #20]
 80087d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80087d8:	3301      	adds	r3, #1
 80087da:	444b      	add	r3, r9
 80087dc:	106d      	asrs	r5, r5, #1
 80087de:	429d      	cmp	r5, r3
 80087e0:	bf38      	it	cc
 80087e2:	461d      	movcc	r5, r3
 80087e4:	0553      	lsls	r3, r2, #21
 80087e6:	d531      	bpl.n	800884c <__ssputs_r+0xa0>
 80087e8:	4629      	mov	r1, r5
 80087ea:	f7ff ff85 	bl	80086f8 <_malloc_r>
 80087ee:	4606      	mov	r6, r0
 80087f0:	b950      	cbnz	r0, 8008808 <__ssputs_r+0x5c>
 80087f2:	230c      	movs	r3, #12
 80087f4:	f8ca 3000 	str.w	r3, [sl]
 80087f8:	89a3      	ldrh	r3, [r4, #12]
 80087fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087fe:	81a3      	strh	r3, [r4, #12]
 8008800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008808:	6921      	ldr	r1, [r4, #16]
 800880a:	464a      	mov	r2, r9
 800880c:	f7fb ff50 	bl	80046b0 <memcpy>
 8008810:	89a3      	ldrh	r3, [r4, #12]
 8008812:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800881a:	81a3      	strh	r3, [r4, #12]
 800881c:	6126      	str	r6, [r4, #16]
 800881e:	6165      	str	r5, [r4, #20]
 8008820:	444e      	add	r6, r9
 8008822:	eba5 0509 	sub.w	r5, r5, r9
 8008826:	6026      	str	r6, [r4, #0]
 8008828:	60a5      	str	r5, [r4, #8]
 800882a:	463e      	mov	r6, r7
 800882c:	42be      	cmp	r6, r7
 800882e:	d900      	bls.n	8008832 <__ssputs_r+0x86>
 8008830:	463e      	mov	r6, r7
 8008832:	4632      	mov	r2, r6
 8008834:	6820      	ldr	r0, [r4, #0]
 8008836:	4641      	mov	r1, r8
 8008838:	f000 fb46 	bl	8008ec8 <memmove>
 800883c:	68a3      	ldr	r3, [r4, #8]
 800883e:	6822      	ldr	r2, [r4, #0]
 8008840:	1b9b      	subs	r3, r3, r6
 8008842:	4432      	add	r2, r6
 8008844:	60a3      	str	r3, [r4, #8]
 8008846:	6022      	str	r2, [r4, #0]
 8008848:	2000      	movs	r0, #0
 800884a:	e7db      	b.n	8008804 <__ssputs_r+0x58>
 800884c:	462a      	mov	r2, r5
 800884e:	f000 fb61 	bl	8008f14 <_realloc_r>
 8008852:	4606      	mov	r6, r0
 8008854:	2800      	cmp	r0, #0
 8008856:	d1e1      	bne.n	800881c <__ssputs_r+0x70>
 8008858:	6921      	ldr	r1, [r4, #16]
 800885a:	4650      	mov	r0, sl
 800885c:	f7ff fefc 	bl	8008658 <_free_r>
 8008860:	e7c7      	b.n	80087f2 <__ssputs_r+0x46>
	...

08008864 <_svfiprintf_r>:
 8008864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008868:	4698      	mov	r8, r3
 800886a:	898b      	ldrh	r3, [r1, #12]
 800886c:	061b      	lsls	r3, r3, #24
 800886e:	b09d      	sub	sp, #116	; 0x74
 8008870:	4607      	mov	r7, r0
 8008872:	460d      	mov	r5, r1
 8008874:	4614      	mov	r4, r2
 8008876:	d50e      	bpl.n	8008896 <_svfiprintf_r+0x32>
 8008878:	690b      	ldr	r3, [r1, #16]
 800887a:	b963      	cbnz	r3, 8008896 <_svfiprintf_r+0x32>
 800887c:	2140      	movs	r1, #64	; 0x40
 800887e:	f7ff ff3b 	bl	80086f8 <_malloc_r>
 8008882:	6028      	str	r0, [r5, #0]
 8008884:	6128      	str	r0, [r5, #16]
 8008886:	b920      	cbnz	r0, 8008892 <_svfiprintf_r+0x2e>
 8008888:	230c      	movs	r3, #12
 800888a:	603b      	str	r3, [r7, #0]
 800888c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008890:	e0d1      	b.n	8008a36 <_svfiprintf_r+0x1d2>
 8008892:	2340      	movs	r3, #64	; 0x40
 8008894:	616b      	str	r3, [r5, #20]
 8008896:	2300      	movs	r3, #0
 8008898:	9309      	str	r3, [sp, #36]	; 0x24
 800889a:	2320      	movs	r3, #32
 800889c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80088a4:	2330      	movs	r3, #48	; 0x30
 80088a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008a50 <_svfiprintf_r+0x1ec>
 80088aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088ae:	f04f 0901 	mov.w	r9, #1
 80088b2:	4623      	mov	r3, r4
 80088b4:	469a      	mov	sl, r3
 80088b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088ba:	b10a      	cbz	r2, 80088c0 <_svfiprintf_r+0x5c>
 80088bc:	2a25      	cmp	r2, #37	; 0x25
 80088be:	d1f9      	bne.n	80088b4 <_svfiprintf_r+0x50>
 80088c0:	ebba 0b04 	subs.w	fp, sl, r4
 80088c4:	d00b      	beq.n	80088de <_svfiprintf_r+0x7a>
 80088c6:	465b      	mov	r3, fp
 80088c8:	4622      	mov	r2, r4
 80088ca:	4629      	mov	r1, r5
 80088cc:	4638      	mov	r0, r7
 80088ce:	f7ff ff6d 	bl	80087ac <__ssputs_r>
 80088d2:	3001      	adds	r0, #1
 80088d4:	f000 80aa 	beq.w	8008a2c <_svfiprintf_r+0x1c8>
 80088d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088da:	445a      	add	r2, fp
 80088dc:	9209      	str	r2, [sp, #36]	; 0x24
 80088de:	f89a 3000 	ldrb.w	r3, [sl]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	f000 80a2 	beq.w	8008a2c <_svfiprintf_r+0x1c8>
 80088e8:	2300      	movs	r3, #0
 80088ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088f2:	f10a 0a01 	add.w	sl, sl, #1
 80088f6:	9304      	str	r3, [sp, #16]
 80088f8:	9307      	str	r3, [sp, #28]
 80088fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088fe:	931a      	str	r3, [sp, #104]	; 0x68
 8008900:	4654      	mov	r4, sl
 8008902:	2205      	movs	r2, #5
 8008904:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008908:	4851      	ldr	r0, [pc, #324]	; (8008a50 <_svfiprintf_r+0x1ec>)
 800890a:	f7f7 fc79 	bl	8000200 <memchr>
 800890e:	9a04      	ldr	r2, [sp, #16]
 8008910:	b9d8      	cbnz	r0, 800894a <_svfiprintf_r+0xe6>
 8008912:	06d0      	lsls	r0, r2, #27
 8008914:	bf44      	itt	mi
 8008916:	2320      	movmi	r3, #32
 8008918:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800891c:	0711      	lsls	r1, r2, #28
 800891e:	bf44      	itt	mi
 8008920:	232b      	movmi	r3, #43	; 0x2b
 8008922:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008926:	f89a 3000 	ldrb.w	r3, [sl]
 800892a:	2b2a      	cmp	r3, #42	; 0x2a
 800892c:	d015      	beq.n	800895a <_svfiprintf_r+0xf6>
 800892e:	9a07      	ldr	r2, [sp, #28]
 8008930:	4654      	mov	r4, sl
 8008932:	2000      	movs	r0, #0
 8008934:	f04f 0c0a 	mov.w	ip, #10
 8008938:	4621      	mov	r1, r4
 800893a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800893e:	3b30      	subs	r3, #48	; 0x30
 8008940:	2b09      	cmp	r3, #9
 8008942:	d94e      	bls.n	80089e2 <_svfiprintf_r+0x17e>
 8008944:	b1b0      	cbz	r0, 8008974 <_svfiprintf_r+0x110>
 8008946:	9207      	str	r2, [sp, #28]
 8008948:	e014      	b.n	8008974 <_svfiprintf_r+0x110>
 800894a:	eba0 0308 	sub.w	r3, r0, r8
 800894e:	fa09 f303 	lsl.w	r3, r9, r3
 8008952:	4313      	orrs	r3, r2
 8008954:	9304      	str	r3, [sp, #16]
 8008956:	46a2      	mov	sl, r4
 8008958:	e7d2      	b.n	8008900 <_svfiprintf_r+0x9c>
 800895a:	9b03      	ldr	r3, [sp, #12]
 800895c:	1d19      	adds	r1, r3, #4
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	9103      	str	r1, [sp, #12]
 8008962:	2b00      	cmp	r3, #0
 8008964:	bfbb      	ittet	lt
 8008966:	425b      	neglt	r3, r3
 8008968:	f042 0202 	orrlt.w	r2, r2, #2
 800896c:	9307      	strge	r3, [sp, #28]
 800896e:	9307      	strlt	r3, [sp, #28]
 8008970:	bfb8      	it	lt
 8008972:	9204      	strlt	r2, [sp, #16]
 8008974:	7823      	ldrb	r3, [r4, #0]
 8008976:	2b2e      	cmp	r3, #46	; 0x2e
 8008978:	d10c      	bne.n	8008994 <_svfiprintf_r+0x130>
 800897a:	7863      	ldrb	r3, [r4, #1]
 800897c:	2b2a      	cmp	r3, #42	; 0x2a
 800897e:	d135      	bne.n	80089ec <_svfiprintf_r+0x188>
 8008980:	9b03      	ldr	r3, [sp, #12]
 8008982:	1d1a      	adds	r2, r3, #4
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	9203      	str	r2, [sp, #12]
 8008988:	2b00      	cmp	r3, #0
 800898a:	bfb8      	it	lt
 800898c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008990:	3402      	adds	r4, #2
 8008992:	9305      	str	r3, [sp, #20]
 8008994:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008a60 <_svfiprintf_r+0x1fc>
 8008998:	7821      	ldrb	r1, [r4, #0]
 800899a:	2203      	movs	r2, #3
 800899c:	4650      	mov	r0, sl
 800899e:	f7f7 fc2f 	bl	8000200 <memchr>
 80089a2:	b140      	cbz	r0, 80089b6 <_svfiprintf_r+0x152>
 80089a4:	2340      	movs	r3, #64	; 0x40
 80089a6:	eba0 000a 	sub.w	r0, r0, sl
 80089aa:	fa03 f000 	lsl.w	r0, r3, r0
 80089ae:	9b04      	ldr	r3, [sp, #16]
 80089b0:	4303      	orrs	r3, r0
 80089b2:	3401      	adds	r4, #1
 80089b4:	9304      	str	r3, [sp, #16]
 80089b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089ba:	4826      	ldr	r0, [pc, #152]	; (8008a54 <_svfiprintf_r+0x1f0>)
 80089bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089c0:	2206      	movs	r2, #6
 80089c2:	f7f7 fc1d 	bl	8000200 <memchr>
 80089c6:	2800      	cmp	r0, #0
 80089c8:	d038      	beq.n	8008a3c <_svfiprintf_r+0x1d8>
 80089ca:	4b23      	ldr	r3, [pc, #140]	; (8008a58 <_svfiprintf_r+0x1f4>)
 80089cc:	bb1b      	cbnz	r3, 8008a16 <_svfiprintf_r+0x1b2>
 80089ce:	9b03      	ldr	r3, [sp, #12]
 80089d0:	3307      	adds	r3, #7
 80089d2:	f023 0307 	bic.w	r3, r3, #7
 80089d6:	3308      	adds	r3, #8
 80089d8:	9303      	str	r3, [sp, #12]
 80089da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089dc:	4433      	add	r3, r6
 80089de:	9309      	str	r3, [sp, #36]	; 0x24
 80089e0:	e767      	b.n	80088b2 <_svfiprintf_r+0x4e>
 80089e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80089e6:	460c      	mov	r4, r1
 80089e8:	2001      	movs	r0, #1
 80089ea:	e7a5      	b.n	8008938 <_svfiprintf_r+0xd4>
 80089ec:	2300      	movs	r3, #0
 80089ee:	3401      	adds	r4, #1
 80089f0:	9305      	str	r3, [sp, #20]
 80089f2:	4619      	mov	r1, r3
 80089f4:	f04f 0c0a 	mov.w	ip, #10
 80089f8:	4620      	mov	r0, r4
 80089fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089fe:	3a30      	subs	r2, #48	; 0x30
 8008a00:	2a09      	cmp	r2, #9
 8008a02:	d903      	bls.n	8008a0c <_svfiprintf_r+0x1a8>
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d0c5      	beq.n	8008994 <_svfiprintf_r+0x130>
 8008a08:	9105      	str	r1, [sp, #20]
 8008a0a:	e7c3      	b.n	8008994 <_svfiprintf_r+0x130>
 8008a0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a10:	4604      	mov	r4, r0
 8008a12:	2301      	movs	r3, #1
 8008a14:	e7f0      	b.n	80089f8 <_svfiprintf_r+0x194>
 8008a16:	ab03      	add	r3, sp, #12
 8008a18:	9300      	str	r3, [sp, #0]
 8008a1a:	462a      	mov	r2, r5
 8008a1c:	4b0f      	ldr	r3, [pc, #60]	; (8008a5c <_svfiprintf_r+0x1f8>)
 8008a1e:	a904      	add	r1, sp, #16
 8008a20:	4638      	mov	r0, r7
 8008a22:	f7fb fefb 	bl	800481c <_printf_float>
 8008a26:	1c42      	adds	r2, r0, #1
 8008a28:	4606      	mov	r6, r0
 8008a2a:	d1d6      	bne.n	80089da <_svfiprintf_r+0x176>
 8008a2c:	89ab      	ldrh	r3, [r5, #12]
 8008a2e:	065b      	lsls	r3, r3, #25
 8008a30:	f53f af2c 	bmi.w	800888c <_svfiprintf_r+0x28>
 8008a34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a36:	b01d      	add	sp, #116	; 0x74
 8008a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a3c:	ab03      	add	r3, sp, #12
 8008a3e:	9300      	str	r3, [sp, #0]
 8008a40:	462a      	mov	r2, r5
 8008a42:	4b06      	ldr	r3, [pc, #24]	; (8008a5c <_svfiprintf_r+0x1f8>)
 8008a44:	a904      	add	r1, sp, #16
 8008a46:	4638      	mov	r0, r7
 8008a48:	f7fc f98c 	bl	8004d64 <_printf_i>
 8008a4c:	e7eb      	b.n	8008a26 <_svfiprintf_r+0x1c2>
 8008a4e:	bf00      	nop
 8008a50:	0800a4d4 	.word	0x0800a4d4
 8008a54:	0800a4de 	.word	0x0800a4de
 8008a58:	0800481d 	.word	0x0800481d
 8008a5c:	080087ad 	.word	0x080087ad
 8008a60:	0800a4da 	.word	0x0800a4da

08008a64 <__sfputc_r>:
 8008a64:	6893      	ldr	r3, [r2, #8]
 8008a66:	3b01      	subs	r3, #1
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	b410      	push	{r4}
 8008a6c:	6093      	str	r3, [r2, #8]
 8008a6e:	da08      	bge.n	8008a82 <__sfputc_r+0x1e>
 8008a70:	6994      	ldr	r4, [r2, #24]
 8008a72:	42a3      	cmp	r3, r4
 8008a74:	db01      	blt.n	8008a7a <__sfputc_r+0x16>
 8008a76:	290a      	cmp	r1, #10
 8008a78:	d103      	bne.n	8008a82 <__sfputc_r+0x1e>
 8008a7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a7e:	f7fd bc0d 	b.w	800629c <__swbuf_r>
 8008a82:	6813      	ldr	r3, [r2, #0]
 8008a84:	1c58      	adds	r0, r3, #1
 8008a86:	6010      	str	r0, [r2, #0]
 8008a88:	7019      	strb	r1, [r3, #0]
 8008a8a:	4608      	mov	r0, r1
 8008a8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a90:	4770      	bx	lr

08008a92 <__sfputs_r>:
 8008a92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a94:	4606      	mov	r6, r0
 8008a96:	460f      	mov	r7, r1
 8008a98:	4614      	mov	r4, r2
 8008a9a:	18d5      	adds	r5, r2, r3
 8008a9c:	42ac      	cmp	r4, r5
 8008a9e:	d101      	bne.n	8008aa4 <__sfputs_r+0x12>
 8008aa0:	2000      	movs	r0, #0
 8008aa2:	e007      	b.n	8008ab4 <__sfputs_r+0x22>
 8008aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aa8:	463a      	mov	r2, r7
 8008aaa:	4630      	mov	r0, r6
 8008aac:	f7ff ffda 	bl	8008a64 <__sfputc_r>
 8008ab0:	1c43      	adds	r3, r0, #1
 8008ab2:	d1f3      	bne.n	8008a9c <__sfputs_r+0xa>
 8008ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ab8 <_vfiprintf_r>:
 8008ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008abc:	460d      	mov	r5, r1
 8008abe:	b09d      	sub	sp, #116	; 0x74
 8008ac0:	4614      	mov	r4, r2
 8008ac2:	4698      	mov	r8, r3
 8008ac4:	4606      	mov	r6, r0
 8008ac6:	b118      	cbz	r0, 8008ad0 <_vfiprintf_r+0x18>
 8008ac8:	6983      	ldr	r3, [r0, #24]
 8008aca:	b90b      	cbnz	r3, 8008ad0 <_vfiprintf_r+0x18>
 8008acc:	f7fe fc56 	bl	800737c <__sinit>
 8008ad0:	4b89      	ldr	r3, [pc, #548]	; (8008cf8 <_vfiprintf_r+0x240>)
 8008ad2:	429d      	cmp	r5, r3
 8008ad4:	d11b      	bne.n	8008b0e <_vfiprintf_r+0x56>
 8008ad6:	6875      	ldr	r5, [r6, #4]
 8008ad8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ada:	07d9      	lsls	r1, r3, #31
 8008adc:	d405      	bmi.n	8008aea <_vfiprintf_r+0x32>
 8008ade:	89ab      	ldrh	r3, [r5, #12]
 8008ae0:	059a      	lsls	r2, r3, #22
 8008ae2:	d402      	bmi.n	8008aea <_vfiprintf_r+0x32>
 8008ae4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ae6:	f7ff f86c 	bl	8007bc2 <__retarget_lock_acquire_recursive>
 8008aea:	89ab      	ldrh	r3, [r5, #12]
 8008aec:	071b      	lsls	r3, r3, #28
 8008aee:	d501      	bpl.n	8008af4 <_vfiprintf_r+0x3c>
 8008af0:	692b      	ldr	r3, [r5, #16]
 8008af2:	b9eb      	cbnz	r3, 8008b30 <_vfiprintf_r+0x78>
 8008af4:	4629      	mov	r1, r5
 8008af6:	4630      	mov	r0, r6
 8008af8:	f7fd fc22 	bl	8006340 <__swsetup_r>
 8008afc:	b1c0      	cbz	r0, 8008b30 <_vfiprintf_r+0x78>
 8008afe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b00:	07dc      	lsls	r4, r3, #31
 8008b02:	d50e      	bpl.n	8008b22 <_vfiprintf_r+0x6a>
 8008b04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b08:	b01d      	add	sp, #116	; 0x74
 8008b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b0e:	4b7b      	ldr	r3, [pc, #492]	; (8008cfc <_vfiprintf_r+0x244>)
 8008b10:	429d      	cmp	r5, r3
 8008b12:	d101      	bne.n	8008b18 <_vfiprintf_r+0x60>
 8008b14:	68b5      	ldr	r5, [r6, #8]
 8008b16:	e7df      	b.n	8008ad8 <_vfiprintf_r+0x20>
 8008b18:	4b79      	ldr	r3, [pc, #484]	; (8008d00 <_vfiprintf_r+0x248>)
 8008b1a:	429d      	cmp	r5, r3
 8008b1c:	bf08      	it	eq
 8008b1e:	68f5      	ldreq	r5, [r6, #12]
 8008b20:	e7da      	b.n	8008ad8 <_vfiprintf_r+0x20>
 8008b22:	89ab      	ldrh	r3, [r5, #12]
 8008b24:	0598      	lsls	r0, r3, #22
 8008b26:	d4ed      	bmi.n	8008b04 <_vfiprintf_r+0x4c>
 8008b28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b2a:	f7ff f84b 	bl	8007bc4 <__retarget_lock_release_recursive>
 8008b2e:	e7e9      	b.n	8008b04 <_vfiprintf_r+0x4c>
 8008b30:	2300      	movs	r3, #0
 8008b32:	9309      	str	r3, [sp, #36]	; 0x24
 8008b34:	2320      	movs	r3, #32
 8008b36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b3e:	2330      	movs	r3, #48	; 0x30
 8008b40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008d04 <_vfiprintf_r+0x24c>
 8008b44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b48:	f04f 0901 	mov.w	r9, #1
 8008b4c:	4623      	mov	r3, r4
 8008b4e:	469a      	mov	sl, r3
 8008b50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b54:	b10a      	cbz	r2, 8008b5a <_vfiprintf_r+0xa2>
 8008b56:	2a25      	cmp	r2, #37	; 0x25
 8008b58:	d1f9      	bne.n	8008b4e <_vfiprintf_r+0x96>
 8008b5a:	ebba 0b04 	subs.w	fp, sl, r4
 8008b5e:	d00b      	beq.n	8008b78 <_vfiprintf_r+0xc0>
 8008b60:	465b      	mov	r3, fp
 8008b62:	4622      	mov	r2, r4
 8008b64:	4629      	mov	r1, r5
 8008b66:	4630      	mov	r0, r6
 8008b68:	f7ff ff93 	bl	8008a92 <__sfputs_r>
 8008b6c:	3001      	adds	r0, #1
 8008b6e:	f000 80aa 	beq.w	8008cc6 <_vfiprintf_r+0x20e>
 8008b72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b74:	445a      	add	r2, fp
 8008b76:	9209      	str	r2, [sp, #36]	; 0x24
 8008b78:	f89a 3000 	ldrb.w	r3, [sl]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	f000 80a2 	beq.w	8008cc6 <_vfiprintf_r+0x20e>
 8008b82:	2300      	movs	r3, #0
 8008b84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b8c:	f10a 0a01 	add.w	sl, sl, #1
 8008b90:	9304      	str	r3, [sp, #16]
 8008b92:	9307      	str	r3, [sp, #28]
 8008b94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b98:	931a      	str	r3, [sp, #104]	; 0x68
 8008b9a:	4654      	mov	r4, sl
 8008b9c:	2205      	movs	r2, #5
 8008b9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ba2:	4858      	ldr	r0, [pc, #352]	; (8008d04 <_vfiprintf_r+0x24c>)
 8008ba4:	f7f7 fb2c 	bl	8000200 <memchr>
 8008ba8:	9a04      	ldr	r2, [sp, #16]
 8008baa:	b9d8      	cbnz	r0, 8008be4 <_vfiprintf_r+0x12c>
 8008bac:	06d1      	lsls	r1, r2, #27
 8008bae:	bf44      	itt	mi
 8008bb0:	2320      	movmi	r3, #32
 8008bb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bb6:	0713      	lsls	r3, r2, #28
 8008bb8:	bf44      	itt	mi
 8008bba:	232b      	movmi	r3, #43	; 0x2b
 8008bbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bc0:	f89a 3000 	ldrb.w	r3, [sl]
 8008bc4:	2b2a      	cmp	r3, #42	; 0x2a
 8008bc6:	d015      	beq.n	8008bf4 <_vfiprintf_r+0x13c>
 8008bc8:	9a07      	ldr	r2, [sp, #28]
 8008bca:	4654      	mov	r4, sl
 8008bcc:	2000      	movs	r0, #0
 8008bce:	f04f 0c0a 	mov.w	ip, #10
 8008bd2:	4621      	mov	r1, r4
 8008bd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bd8:	3b30      	subs	r3, #48	; 0x30
 8008bda:	2b09      	cmp	r3, #9
 8008bdc:	d94e      	bls.n	8008c7c <_vfiprintf_r+0x1c4>
 8008bde:	b1b0      	cbz	r0, 8008c0e <_vfiprintf_r+0x156>
 8008be0:	9207      	str	r2, [sp, #28]
 8008be2:	e014      	b.n	8008c0e <_vfiprintf_r+0x156>
 8008be4:	eba0 0308 	sub.w	r3, r0, r8
 8008be8:	fa09 f303 	lsl.w	r3, r9, r3
 8008bec:	4313      	orrs	r3, r2
 8008bee:	9304      	str	r3, [sp, #16]
 8008bf0:	46a2      	mov	sl, r4
 8008bf2:	e7d2      	b.n	8008b9a <_vfiprintf_r+0xe2>
 8008bf4:	9b03      	ldr	r3, [sp, #12]
 8008bf6:	1d19      	adds	r1, r3, #4
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	9103      	str	r1, [sp, #12]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	bfbb      	ittet	lt
 8008c00:	425b      	neglt	r3, r3
 8008c02:	f042 0202 	orrlt.w	r2, r2, #2
 8008c06:	9307      	strge	r3, [sp, #28]
 8008c08:	9307      	strlt	r3, [sp, #28]
 8008c0a:	bfb8      	it	lt
 8008c0c:	9204      	strlt	r2, [sp, #16]
 8008c0e:	7823      	ldrb	r3, [r4, #0]
 8008c10:	2b2e      	cmp	r3, #46	; 0x2e
 8008c12:	d10c      	bne.n	8008c2e <_vfiprintf_r+0x176>
 8008c14:	7863      	ldrb	r3, [r4, #1]
 8008c16:	2b2a      	cmp	r3, #42	; 0x2a
 8008c18:	d135      	bne.n	8008c86 <_vfiprintf_r+0x1ce>
 8008c1a:	9b03      	ldr	r3, [sp, #12]
 8008c1c:	1d1a      	adds	r2, r3, #4
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	9203      	str	r2, [sp, #12]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	bfb8      	it	lt
 8008c26:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008c2a:	3402      	adds	r4, #2
 8008c2c:	9305      	str	r3, [sp, #20]
 8008c2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008d14 <_vfiprintf_r+0x25c>
 8008c32:	7821      	ldrb	r1, [r4, #0]
 8008c34:	2203      	movs	r2, #3
 8008c36:	4650      	mov	r0, sl
 8008c38:	f7f7 fae2 	bl	8000200 <memchr>
 8008c3c:	b140      	cbz	r0, 8008c50 <_vfiprintf_r+0x198>
 8008c3e:	2340      	movs	r3, #64	; 0x40
 8008c40:	eba0 000a 	sub.w	r0, r0, sl
 8008c44:	fa03 f000 	lsl.w	r0, r3, r0
 8008c48:	9b04      	ldr	r3, [sp, #16]
 8008c4a:	4303      	orrs	r3, r0
 8008c4c:	3401      	adds	r4, #1
 8008c4e:	9304      	str	r3, [sp, #16]
 8008c50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c54:	482c      	ldr	r0, [pc, #176]	; (8008d08 <_vfiprintf_r+0x250>)
 8008c56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c5a:	2206      	movs	r2, #6
 8008c5c:	f7f7 fad0 	bl	8000200 <memchr>
 8008c60:	2800      	cmp	r0, #0
 8008c62:	d03f      	beq.n	8008ce4 <_vfiprintf_r+0x22c>
 8008c64:	4b29      	ldr	r3, [pc, #164]	; (8008d0c <_vfiprintf_r+0x254>)
 8008c66:	bb1b      	cbnz	r3, 8008cb0 <_vfiprintf_r+0x1f8>
 8008c68:	9b03      	ldr	r3, [sp, #12]
 8008c6a:	3307      	adds	r3, #7
 8008c6c:	f023 0307 	bic.w	r3, r3, #7
 8008c70:	3308      	adds	r3, #8
 8008c72:	9303      	str	r3, [sp, #12]
 8008c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c76:	443b      	add	r3, r7
 8008c78:	9309      	str	r3, [sp, #36]	; 0x24
 8008c7a:	e767      	b.n	8008b4c <_vfiprintf_r+0x94>
 8008c7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c80:	460c      	mov	r4, r1
 8008c82:	2001      	movs	r0, #1
 8008c84:	e7a5      	b.n	8008bd2 <_vfiprintf_r+0x11a>
 8008c86:	2300      	movs	r3, #0
 8008c88:	3401      	adds	r4, #1
 8008c8a:	9305      	str	r3, [sp, #20]
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	f04f 0c0a 	mov.w	ip, #10
 8008c92:	4620      	mov	r0, r4
 8008c94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c98:	3a30      	subs	r2, #48	; 0x30
 8008c9a:	2a09      	cmp	r2, #9
 8008c9c:	d903      	bls.n	8008ca6 <_vfiprintf_r+0x1ee>
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d0c5      	beq.n	8008c2e <_vfiprintf_r+0x176>
 8008ca2:	9105      	str	r1, [sp, #20]
 8008ca4:	e7c3      	b.n	8008c2e <_vfiprintf_r+0x176>
 8008ca6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008caa:	4604      	mov	r4, r0
 8008cac:	2301      	movs	r3, #1
 8008cae:	e7f0      	b.n	8008c92 <_vfiprintf_r+0x1da>
 8008cb0:	ab03      	add	r3, sp, #12
 8008cb2:	9300      	str	r3, [sp, #0]
 8008cb4:	462a      	mov	r2, r5
 8008cb6:	4b16      	ldr	r3, [pc, #88]	; (8008d10 <_vfiprintf_r+0x258>)
 8008cb8:	a904      	add	r1, sp, #16
 8008cba:	4630      	mov	r0, r6
 8008cbc:	f7fb fdae 	bl	800481c <_printf_float>
 8008cc0:	4607      	mov	r7, r0
 8008cc2:	1c78      	adds	r0, r7, #1
 8008cc4:	d1d6      	bne.n	8008c74 <_vfiprintf_r+0x1bc>
 8008cc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cc8:	07d9      	lsls	r1, r3, #31
 8008cca:	d405      	bmi.n	8008cd8 <_vfiprintf_r+0x220>
 8008ccc:	89ab      	ldrh	r3, [r5, #12]
 8008cce:	059a      	lsls	r2, r3, #22
 8008cd0:	d402      	bmi.n	8008cd8 <_vfiprintf_r+0x220>
 8008cd2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cd4:	f7fe ff76 	bl	8007bc4 <__retarget_lock_release_recursive>
 8008cd8:	89ab      	ldrh	r3, [r5, #12]
 8008cda:	065b      	lsls	r3, r3, #25
 8008cdc:	f53f af12 	bmi.w	8008b04 <_vfiprintf_r+0x4c>
 8008ce0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ce2:	e711      	b.n	8008b08 <_vfiprintf_r+0x50>
 8008ce4:	ab03      	add	r3, sp, #12
 8008ce6:	9300      	str	r3, [sp, #0]
 8008ce8:	462a      	mov	r2, r5
 8008cea:	4b09      	ldr	r3, [pc, #36]	; (8008d10 <_vfiprintf_r+0x258>)
 8008cec:	a904      	add	r1, sp, #16
 8008cee:	4630      	mov	r0, r6
 8008cf0:	f7fc f838 	bl	8004d64 <_printf_i>
 8008cf4:	e7e4      	b.n	8008cc0 <_vfiprintf_r+0x208>
 8008cf6:	bf00      	nop
 8008cf8:	0800a2b4 	.word	0x0800a2b4
 8008cfc:	0800a2d4 	.word	0x0800a2d4
 8008d00:	0800a294 	.word	0x0800a294
 8008d04:	0800a4d4 	.word	0x0800a4d4
 8008d08:	0800a4de 	.word	0x0800a4de
 8008d0c:	0800481d 	.word	0x0800481d
 8008d10:	08008a93 	.word	0x08008a93
 8008d14:	0800a4da 	.word	0x0800a4da

08008d18 <nan>:
 8008d18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008d20 <nan+0x8>
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop
 8008d20:	00000000 	.word	0x00000000
 8008d24:	7ff80000 	.word	0x7ff80000

08008d28 <_sbrk_r>:
 8008d28:	b538      	push	{r3, r4, r5, lr}
 8008d2a:	4d06      	ldr	r5, [pc, #24]	; (8008d44 <_sbrk_r+0x1c>)
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	4604      	mov	r4, r0
 8008d30:	4608      	mov	r0, r1
 8008d32:	602b      	str	r3, [r5, #0]
 8008d34:	f7f9 fbe4 	bl	8002500 <_sbrk>
 8008d38:	1c43      	adds	r3, r0, #1
 8008d3a:	d102      	bne.n	8008d42 <_sbrk_r+0x1a>
 8008d3c:	682b      	ldr	r3, [r5, #0]
 8008d3e:	b103      	cbz	r3, 8008d42 <_sbrk_r+0x1a>
 8008d40:	6023      	str	r3, [r4, #0]
 8008d42:	bd38      	pop	{r3, r4, r5, pc}
 8008d44:	20000714 	.word	0x20000714

08008d48 <__sread>:
 8008d48:	b510      	push	{r4, lr}
 8008d4a:	460c      	mov	r4, r1
 8008d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d50:	f000 f906 	bl	8008f60 <_read_r>
 8008d54:	2800      	cmp	r0, #0
 8008d56:	bfab      	itete	ge
 8008d58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d5a:	89a3      	ldrhlt	r3, [r4, #12]
 8008d5c:	181b      	addge	r3, r3, r0
 8008d5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d62:	bfac      	ite	ge
 8008d64:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d66:	81a3      	strhlt	r3, [r4, #12]
 8008d68:	bd10      	pop	{r4, pc}

08008d6a <__swrite>:
 8008d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d6e:	461f      	mov	r7, r3
 8008d70:	898b      	ldrh	r3, [r1, #12]
 8008d72:	05db      	lsls	r3, r3, #23
 8008d74:	4605      	mov	r5, r0
 8008d76:	460c      	mov	r4, r1
 8008d78:	4616      	mov	r6, r2
 8008d7a:	d505      	bpl.n	8008d88 <__swrite+0x1e>
 8008d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d80:	2302      	movs	r3, #2
 8008d82:	2200      	movs	r2, #0
 8008d84:	f000 f88e 	bl	8008ea4 <_lseek_r>
 8008d88:	89a3      	ldrh	r3, [r4, #12]
 8008d8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d92:	81a3      	strh	r3, [r4, #12]
 8008d94:	4632      	mov	r2, r6
 8008d96:	463b      	mov	r3, r7
 8008d98:	4628      	mov	r0, r5
 8008d9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d9e:	f000 b835 	b.w	8008e0c <_write_r>

08008da2 <__sseek>:
 8008da2:	b510      	push	{r4, lr}
 8008da4:	460c      	mov	r4, r1
 8008da6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008daa:	f000 f87b 	bl	8008ea4 <_lseek_r>
 8008dae:	1c43      	adds	r3, r0, #1
 8008db0:	89a3      	ldrh	r3, [r4, #12]
 8008db2:	bf15      	itete	ne
 8008db4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008db6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008dba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008dbe:	81a3      	strheq	r3, [r4, #12]
 8008dc0:	bf18      	it	ne
 8008dc2:	81a3      	strhne	r3, [r4, #12]
 8008dc4:	bd10      	pop	{r4, pc}

08008dc6 <__sclose>:
 8008dc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dca:	f000 b839 	b.w	8008e40 <_close_r>

08008dce <strncmp>:
 8008dce:	b510      	push	{r4, lr}
 8008dd0:	b16a      	cbz	r2, 8008dee <strncmp+0x20>
 8008dd2:	3901      	subs	r1, #1
 8008dd4:	1884      	adds	r4, r0, r2
 8008dd6:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008dda:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d103      	bne.n	8008dea <strncmp+0x1c>
 8008de2:	42a0      	cmp	r0, r4
 8008de4:	d001      	beq.n	8008dea <strncmp+0x1c>
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d1f5      	bne.n	8008dd6 <strncmp+0x8>
 8008dea:	1a98      	subs	r0, r3, r2
 8008dec:	bd10      	pop	{r4, pc}
 8008dee:	4610      	mov	r0, r2
 8008df0:	e7fc      	b.n	8008dec <strncmp+0x1e>

08008df2 <__ascii_wctomb>:
 8008df2:	b149      	cbz	r1, 8008e08 <__ascii_wctomb+0x16>
 8008df4:	2aff      	cmp	r2, #255	; 0xff
 8008df6:	bf85      	ittet	hi
 8008df8:	238a      	movhi	r3, #138	; 0x8a
 8008dfa:	6003      	strhi	r3, [r0, #0]
 8008dfc:	700a      	strbls	r2, [r1, #0]
 8008dfe:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008e02:	bf98      	it	ls
 8008e04:	2001      	movls	r0, #1
 8008e06:	4770      	bx	lr
 8008e08:	4608      	mov	r0, r1
 8008e0a:	4770      	bx	lr

08008e0c <_write_r>:
 8008e0c:	b538      	push	{r3, r4, r5, lr}
 8008e0e:	4d07      	ldr	r5, [pc, #28]	; (8008e2c <_write_r+0x20>)
 8008e10:	4604      	mov	r4, r0
 8008e12:	4608      	mov	r0, r1
 8008e14:	4611      	mov	r1, r2
 8008e16:	2200      	movs	r2, #0
 8008e18:	602a      	str	r2, [r5, #0]
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	f7f9 fb1f 	bl	800245e <_write>
 8008e20:	1c43      	adds	r3, r0, #1
 8008e22:	d102      	bne.n	8008e2a <_write_r+0x1e>
 8008e24:	682b      	ldr	r3, [r5, #0]
 8008e26:	b103      	cbz	r3, 8008e2a <_write_r+0x1e>
 8008e28:	6023      	str	r3, [r4, #0]
 8008e2a:	bd38      	pop	{r3, r4, r5, pc}
 8008e2c:	20000714 	.word	0x20000714

08008e30 <abort>:
 8008e30:	b508      	push	{r3, lr}
 8008e32:	2006      	movs	r0, #6
 8008e34:	f000 f8ce 	bl	8008fd4 <raise>
 8008e38:	2001      	movs	r0, #1
 8008e3a:	f7f9 fae9 	bl	8002410 <_exit>
	...

08008e40 <_close_r>:
 8008e40:	b538      	push	{r3, r4, r5, lr}
 8008e42:	4d06      	ldr	r5, [pc, #24]	; (8008e5c <_close_r+0x1c>)
 8008e44:	2300      	movs	r3, #0
 8008e46:	4604      	mov	r4, r0
 8008e48:	4608      	mov	r0, r1
 8008e4a:	602b      	str	r3, [r5, #0]
 8008e4c:	f7f9 fb23 	bl	8002496 <_close>
 8008e50:	1c43      	adds	r3, r0, #1
 8008e52:	d102      	bne.n	8008e5a <_close_r+0x1a>
 8008e54:	682b      	ldr	r3, [r5, #0]
 8008e56:	b103      	cbz	r3, 8008e5a <_close_r+0x1a>
 8008e58:	6023      	str	r3, [r4, #0]
 8008e5a:	bd38      	pop	{r3, r4, r5, pc}
 8008e5c:	20000714 	.word	0x20000714

08008e60 <_fstat_r>:
 8008e60:	b538      	push	{r3, r4, r5, lr}
 8008e62:	4d07      	ldr	r5, [pc, #28]	; (8008e80 <_fstat_r+0x20>)
 8008e64:	2300      	movs	r3, #0
 8008e66:	4604      	mov	r4, r0
 8008e68:	4608      	mov	r0, r1
 8008e6a:	4611      	mov	r1, r2
 8008e6c:	602b      	str	r3, [r5, #0]
 8008e6e:	f7f9 fb1e 	bl	80024ae <_fstat>
 8008e72:	1c43      	adds	r3, r0, #1
 8008e74:	d102      	bne.n	8008e7c <_fstat_r+0x1c>
 8008e76:	682b      	ldr	r3, [r5, #0]
 8008e78:	b103      	cbz	r3, 8008e7c <_fstat_r+0x1c>
 8008e7a:	6023      	str	r3, [r4, #0]
 8008e7c:	bd38      	pop	{r3, r4, r5, pc}
 8008e7e:	bf00      	nop
 8008e80:	20000714 	.word	0x20000714

08008e84 <_isatty_r>:
 8008e84:	b538      	push	{r3, r4, r5, lr}
 8008e86:	4d06      	ldr	r5, [pc, #24]	; (8008ea0 <_isatty_r+0x1c>)
 8008e88:	2300      	movs	r3, #0
 8008e8a:	4604      	mov	r4, r0
 8008e8c:	4608      	mov	r0, r1
 8008e8e:	602b      	str	r3, [r5, #0]
 8008e90:	f7f9 fb1d 	bl	80024ce <_isatty>
 8008e94:	1c43      	adds	r3, r0, #1
 8008e96:	d102      	bne.n	8008e9e <_isatty_r+0x1a>
 8008e98:	682b      	ldr	r3, [r5, #0]
 8008e9a:	b103      	cbz	r3, 8008e9e <_isatty_r+0x1a>
 8008e9c:	6023      	str	r3, [r4, #0]
 8008e9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ea0:	20000714 	.word	0x20000714

08008ea4 <_lseek_r>:
 8008ea4:	b538      	push	{r3, r4, r5, lr}
 8008ea6:	4d07      	ldr	r5, [pc, #28]	; (8008ec4 <_lseek_r+0x20>)
 8008ea8:	4604      	mov	r4, r0
 8008eaa:	4608      	mov	r0, r1
 8008eac:	4611      	mov	r1, r2
 8008eae:	2200      	movs	r2, #0
 8008eb0:	602a      	str	r2, [r5, #0]
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	f7f9 fb16 	bl	80024e4 <_lseek>
 8008eb8:	1c43      	adds	r3, r0, #1
 8008eba:	d102      	bne.n	8008ec2 <_lseek_r+0x1e>
 8008ebc:	682b      	ldr	r3, [r5, #0]
 8008ebe:	b103      	cbz	r3, 8008ec2 <_lseek_r+0x1e>
 8008ec0:	6023      	str	r3, [r4, #0]
 8008ec2:	bd38      	pop	{r3, r4, r5, pc}
 8008ec4:	20000714 	.word	0x20000714

08008ec8 <memmove>:
 8008ec8:	4288      	cmp	r0, r1
 8008eca:	b510      	push	{r4, lr}
 8008ecc:	eb01 0402 	add.w	r4, r1, r2
 8008ed0:	d902      	bls.n	8008ed8 <memmove+0x10>
 8008ed2:	4284      	cmp	r4, r0
 8008ed4:	4623      	mov	r3, r4
 8008ed6:	d807      	bhi.n	8008ee8 <memmove+0x20>
 8008ed8:	1e43      	subs	r3, r0, #1
 8008eda:	42a1      	cmp	r1, r4
 8008edc:	d008      	beq.n	8008ef0 <memmove+0x28>
 8008ede:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ee2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ee6:	e7f8      	b.n	8008eda <memmove+0x12>
 8008ee8:	4402      	add	r2, r0
 8008eea:	4601      	mov	r1, r0
 8008eec:	428a      	cmp	r2, r1
 8008eee:	d100      	bne.n	8008ef2 <memmove+0x2a>
 8008ef0:	bd10      	pop	{r4, pc}
 8008ef2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ef6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008efa:	e7f7      	b.n	8008eec <memmove+0x24>

08008efc <__malloc_lock>:
 8008efc:	4801      	ldr	r0, [pc, #4]	; (8008f04 <__malloc_lock+0x8>)
 8008efe:	f7fe be60 	b.w	8007bc2 <__retarget_lock_acquire_recursive>
 8008f02:	bf00      	nop
 8008f04:	2000070c 	.word	0x2000070c

08008f08 <__malloc_unlock>:
 8008f08:	4801      	ldr	r0, [pc, #4]	; (8008f10 <__malloc_unlock+0x8>)
 8008f0a:	f7fe be5b 	b.w	8007bc4 <__retarget_lock_release_recursive>
 8008f0e:	bf00      	nop
 8008f10:	2000070c 	.word	0x2000070c

08008f14 <_realloc_r>:
 8008f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f16:	4607      	mov	r7, r0
 8008f18:	4614      	mov	r4, r2
 8008f1a:	460e      	mov	r6, r1
 8008f1c:	b921      	cbnz	r1, 8008f28 <_realloc_r+0x14>
 8008f1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008f22:	4611      	mov	r1, r2
 8008f24:	f7ff bbe8 	b.w	80086f8 <_malloc_r>
 8008f28:	b922      	cbnz	r2, 8008f34 <_realloc_r+0x20>
 8008f2a:	f7ff fb95 	bl	8008658 <_free_r>
 8008f2e:	4625      	mov	r5, r4
 8008f30:	4628      	mov	r0, r5
 8008f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f34:	f000 f86a 	bl	800900c <_malloc_usable_size_r>
 8008f38:	42a0      	cmp	r0, r4
 8008f3a:	d20f      	bcs.n	8008f5c <_realloc_r+0x48>
 8008f3c:	4621      	mov	r1, r4
 8008f3e:	4638      	mov	r0, r7
 8008f40:	f7ff fbda 	bl	80086f8 <_malloc_r>
 8008f44:	4605      	mov	r5, r0
 8008f46:	2800      	cmp	r0, #0
 8008f48:	d0f2      	beq.n	8008f30 <_realloc_r+0x1c>
 8008f4a:	4631      	mov	r1, r6
 8008f4c:	4622      	mov	r2, r4
 8008f4e:	f7fb fbaf 	bl	80046b0 <memcpy>
 8008f52:	4631      	mov	r1, r6
 8008f54:	4638      	mov	r0, r7
 8008f56:	f7ff fb7f 	bl	8008658 <_free_r>
 8008f5a:	e7e9      	b.n	8008f30 <_realloc_r+0x1c>
 8008f5c:	4635      	mov	r5, r6
 8008f5e:	e7e7      	b.n	8008f30 <_realloc_r+0x1c>

08008f60 <_read_r>:
 8008f60:	b538      	push	{r3, r4, r5, lr}
 8008f62:	4d07      	ldr	r5, [pc, #28]	; (8008f80 <_read_r+0x20>)
 8008f64:	4604      	mov	r4, r0
 8008f66:	4608      	mov	r0, r1
 8008f68:	4611      	mov	r1, r2
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	602a      	str	r2, [r5, #0]
 8008f6e:	461a      	mov	r2, r3
 8008f70:	f7f9 fa58 	bl	8002424 <_read>
 8008f74:	1c43      	adds	r3, r0, #1
 8008f76:	d102      	bne.n	8008f7e <_read_r+0x1e>
 8008f78:	682b      	ldr	r3, [r5, #0]
 8008f7a:	b103      	cbz	r3, 8008f7e <_read_r+0x1e>
 8008f7c:	6023      	str	r3, [r4, #0]
 8008f7e:	bd38      	pop	{r3, r4, r5, pc}
 8008f80:	20000714 	.word	0x20000714

08008f84 <_raise_r>:
 8008f84:	291f      	cmp	r1, #31
 8008f86:	b538      	push	{r3, r4, r5, lr}
 8008f88:	4604      	mov	r4, r0
 8008f8a:	460d      	mov	r5, r1
 8008f8c:	d904      	bls.n	8008f98 <_raise_r+0x14>
 8008f8e:	2316      	movs	r3, #22
 8008f90:	6003      	str	r3, [r0, #0]
 8008f92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f96:	bd38      	pop	{r3, r4, r5, pc}
 8008f98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008f9a:	b112      	cbz	r2, 8008fa2 <_raise_r+0x1e>
 8008f9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008fa0:	b94b      	cbnz	r3, 8008fb6 <_raise_r+0x32>
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f000 f830 	bl	8009008 <_getpid_r>
 8008fa8:	462a      	mov	r2, r5
 8008faa:	4601      	mov	r1, r0
 8008fac:	4620      	mov	r0, r4
 8008fae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fb2:	f000 b817 	b.w	8008fe4 <_kill_r>
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d00a      	beq.n	8008fd0 <_raise_r+0x4c>
 8008fba:	1c59      	adds	r1, r3, #1
 8008fbc:	d103      	bne.n	8008fc6 <_raise_r+0x42>
 8008fbe:	2316      	movs	r3, #22
 8008fc0:	6003      	str	r3, [r0, #0]
 8008fc2:	2001      	movs	r0, #1
 8008fc4:	e7e7      	b.n	8008f96 <_raise_r+0x12>
 8008fc6:	2400      	movs	r4, #0
 8008fc8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008fcc:	4628      	mov	r0, r5
 8008fce:	4798      	blx	r3
 8008fd0:	2000      	movs	r0, #0
 8008fd2:	e7e0      	b.n	8008f96 <_raise_r+0x12>

08008fd4 <raise>:
 8008fd4:	4b02      	ldr	r3, [pc, #8]	; (8008fe0 <raise+0xc>)
 8008fd6:	4601      	mov	r1, r0
 8008fd8:	6818      	ldr	r0, [r3, #0]
 8008fda:	f7ff bfd3 	b.w	8008f84 <_raise_r>
 8008fde:	bf00      	nop
 8008fe0:	2000033c 	.word	0x2000033c

08008fe4 <_kill_r>:
 8008fe4:	b538      	push	{r3, r4, r5, lr}
 8008fe6:	4d07      	ldr	r5, [pc, #28]	; (8009004 <_kill_r+0x20>)
 8008fe8:	2300      	movs	r3, #0
 8008fea:	4604      	mov	r4, r0
 8008fec:	4608      	mov	r0, r1
 8008fee:	4611      	mov	r1, r2
 8008ff0:	602b      	str	r3, [r5, #0]
 8008ff2:	f7f9 f9fd 	bl	80023f0 <_kill>
 8008ff6:	1c43      	adds	r3, r0, #1
 8008ff8:	d102      	bne.n	8009000 <_kill_r+0x1c>
 8008ffa:	682b      	ldr	r3, [r5, #0]
 8008ffc:	b103      	cbz	r3, 8009000 <_kill_r+0x1c>
 8008ffe:	6023      	str	r3, [r4, #0]
 8009000:	bd38      	pop	{r3, r4, r5, pc}
 8009002:	bf00      	nop
 8009004:	20000714 	.word	0x20000714

08009008 <_getpid_r>:
 8009008:	f7f9 b9ea 	b.w	80023e0 <_getpid>

0800900c <_malloc_usable_size_r>:
 800900c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009010:	1f18      	subs	r0, r3, #4
 8009012:	2b00      	cmp	r3, #0
 8009014:	bfbc      	itt	lt
 8009016:	580b      	ldrlt	r3, [r1, r0]
 8009018:	18c0      	addlt	r0, r0, r3
 800901a:	4770      	bx	lr

0800901c <pow>:
 800901c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009020:	ec59 8b10 	vmov	r8, r9, d0
 8009024:	ec57 6b11 	vmov	r6, r7, d1
 8009028:	f000 f8a6 	bl	8009178 <__ieee754_pow>
 800902c:	4b4e      	ldr	r3, [pc, #312]	; (8009168 <pow+0x14c>)
 800902e:	f993 3000 	ldrsb.w	r3, [r3]
 8009032:	3301      	adds	r3, #1
 8009034:	ec55 4b10 	vmov	r4, r5, d0
 8009038:	d015      	beq.n	8009066 <pow+0x4a>
 800903a:	4632      	mov	r2, r6
 800903c:	463b      	mov	r3, r7
 800903e:	4630      	mov	r0, r6
 8009040:	4639      	mov	r1, r7
 8009042:	f7f7 fd83 	bl	8000b4c <__aeabi_dcmpun>
 8009046:	b970      	cbnz	r0, 8009066 <pow+0x4a>
 8009048:	4642      	mov	r2, r8
 800904a:	464b      	mov	r3, r9
 800904c:	4640      	mov	r0, r8
 800904e:	4649      	mov	r1, r9
 8009050:	f7f7 fd7c 	bl	8000b4c <__aeabi_dcmpun>
 8009054:	2200      	movs	r2, #0
 8009056:	2300      	movs	r3, #0
 8009058:	b148      	cbz	r0, 800906e <pow+0x52>
 800905a:	4630      	mov	r0, r6
 800905c:	4639      	mov	r1, r7
 800905e:	f7f7 fd43 	bl	8000ae8 <__aeabi_dcmpeq>
 8009062:	2800      	cmp	r0, #0
 8009064:	d17d      	bne.n	8009162 <pow+0x146>
 8009066:	ec45 4b10 	vmov	d0, r4, r5
 800906a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800906e:	4640      	mov	r0, r8
 8009070:	4649      	mov	r1, r9
 8009072:	f7f7 fd39 	bl	8000ae8 <__aeabi_dcmpeq>
 8009076:	b1e0      	cbz	r0, 80090b2 <pow+0x96>
 8009078:	2200      	movs	r2, #0
 800907a:	2300      	movs	r3, #0
 800907c:	4630      	mov	r0, r6
 800907e:	4639      	mov	r1, r7
 8009080:	f7f7 fd32 	bl	8000ae8 <__aeabi_dcmpeq>
 8009084:	2800      	cmp	r0, #0
 8009086:	d16c      	bne.n	8009162 <pow+0x146>
 8009088:	ec47 6b10 	vmov	d0, r6, r7
 800908c:	f000 fe53 	bl	8009d36 <finite>
 8009090:	2800      	cmp	r0, #0
 8009092:	d0e8      	beq.n	8009066 <pow+0x4a>
 8009094:	2200      	movs	r2, #0
 8009096:	2300      	movs	r3, #0
 8009098:	4630      	mov	r0, r6
 800909a:	4639      	mov	r1, r7
 800909c:	f7f7 fd2e 	bl	8000afc <__aeabi_dcmplt>
 80090a0:	2800      	cmp	r0, #0
 80090a2:	d0e0      	beq.n	8009066 <pow+0x4a>
 80090a4:	f7fb fada 	bl	800465c <__errno>
 80090a8:	2321      	movs	r3, #33	; 0x21
 80090aa:	6003      	str	r3, [r0, #0]
 80090ac:	2400      	movs	r4, #0
 80090ae:	4d2f      	ldr	r5, [pc, #188]	; (800916c <pow+0x150>)
 80090b0:	e7d9      	b.n	8009066 <pow+0x4a>
 80090b2:	ec45 4b10 	vmov	d0, r4, r5
 80090b6:	f000 fe3e 	bl	8009d36 <finite>
 80090ba:	bbb8      	cbnz	r0, 800912c <pow+0x110>
 80090bc:	ec49 8b10 	vmov	d0, r8, r9
 80090c0:	f000 fe39 	bl	8009d36 <finite>
 80090c4:	b390      	cbz	r0, 800912c <pow+0x110>
 80090c6:	ec47 6b10 	vmov	d0, r6, r7
 80090ca:	f000 fe34 	bl	8009d36 <finite>
 80090ce:	b368      	cbz	r0, 800912c <pow+0x110>
 80090d0:	4622      	mov	r2, r4
 80090d2:	462b      	mov	r3, r5
 80090d4:	4620      	mov	r0, r4
 80090d6:	4629      	mov	r1, r5
 80090d8:	f7f7 fd38 	bl	8000b4c <__aeabi_dcmpun>
 80090dc:	b160      	cbz	r0, 80090f8 <pow+0xdc>
 80090de:	f7fb fabd 	bl	800465c <__errno>
 80090e2:	2321      	movs	r3, #33	; 0x21
 80090e4:	6003      	str	r3, [r0, #0]
 80090e6:	2200      	movs	r2, #0
 80090e8:	2300      	movs	r3, #0
 80090ea:	4610      	mov	r0, r2
 80090ec:	4619      	mov	r1, r3
 80090ee:	f7f7 fbbd 	bl	800086c <__aeabi_ddiv>
 80090f2:	4604      	mov	r4, r0
 80090f4:	460d      	mov	r5, r1
 80090f6:	e7b6      	b.n	8009066 <pow+0x4a>
 80090f8:	f7fb fab0 	bl	800465c <__errno>
 80090fc:	2322      	movs	r3, #34	; 0x22
 80090fe:	6003      	str	r3, [r0, #0]
 8009100:	2200      	movs	r2, #0
 8009102:	2300      	movs	r3, #0
 8009104:	4640      	mov	r0, r8
 8009106:	4649      	mov	r1, r9
 8009108:	f7f7 fcf8 	bl	8000afc <__aeabi_dcmplt>
 800910c:	2400      	movs	r4, #0
 800910e:	b158      	cbz	r0, 8009128 <pow+0x10c>
 8009110:	ec47 6b10 	vmov	d0, r6, r7
 8009114:	f000 fe1a 	bl	8009d4c <rint>
 8009118:	4632      	mov	r2, r6
 800911a:	ec51 0b10 	vmov	r0, r1, d0
 800911e:	463b      	mov	r3, r7
 8009120:	f7f7 fce2 	bl	8000ae8 <__aeabi_dcmpeq>
 8009124:	2800      	cmp	r0, #0
 8009126:	d0c2      	beq.n	80090ae <pow+0x92>
 8009128:	4d11      	ldr	r5, [pc, #68]	; (8009170 <pow+0x154>)
 800912a:	e79c      	b.n	8009066 <pow+0x4a>
 800912c:	2200      	movs	r2, #0
 800912e:	2300      	movs	r3, #0
 8009130:	4620      	mov	r0, r4
 8009132:	4629      	mov	r1, r5
 8009134:	f7f7 fcd8 	bl	8000ae8 <__aeabi_dcmpeq>
 8009138:	2800      	cmp	r0, #0
 800913a:	d094      	beq.n	8009066 <pow+0x4a>
 800913c:	ec49 8b10 	vmov	d0, r8, r9
 8009140:	f000 fdf9 	bl	8009d36 <finite>
 8009144:	2800      	cmp	r0, #0
 8009146:	d08e      	beq.n	8009066 <pow+0x4a>
 8009148:	ec47 6b10 	vmov	d0, r6, r7
 800914c:	f000 fdf3 	bl	8009d36 <finite>
 8009150:	2800      	cmp	r0, #0
 8009152:	d088      	beq.n	8009066 <pow+0x4a>
 8009154:	f7fb fa82 	bl	800465c <__errno>
 8009158:	2322      	movs	r3, #34	; 0x22
 800915a:	6003      	str	r3, [r0, #0]
 800915c:	2400      	movs	r4, #0
 800915e:	2500      	movs	r5, #0
 8009160:	e781      	b.n	8009066 <pow+0x4a>
 8009162:	4d04      	ldr	r5, [pc, #16]	; (8009174 <pow+0x158>)
 8009164:	2400      	movs	r4, #0
 8009166:	e77e      	b.n	8009066 <pow+0x4a>
 8009168:	20000510 	.word	0x20000510
 800916c:	fff00000 	.word	0xfff00000
 8009170:	7ff00000 	.word	0x7ff00000
 8009174:	3ff00000 	.word	0x3ff00000

08009178 <__ieee754_pow>:
 8009178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800917c:	ed2d 8b06 	vpush	{d8-d10}
 8009180:	b08d      	sub	sp, #52	; 0x34
 8009182:	ed8d 1b02 	vstr	d1, [sp, #8]
 8009186:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800918a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800918e:	ea56 0100 	orrs.w	r1, r6, r0
 8009192:	ec53 2b10 	vmov	r2, r3, d0
 8009196:	f000 84d1 	beq.w	8009b3c <__ieee754_pow+0x9c4>
 800919a:	497f      	ldr	r1, [pc, #508]	; (8009398 <__ieee754_pow+0x220>)
 800919c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80091a0:	428c      	cmp	r4, r1
 80091a2:	ee10 8a10 	vmov	r8, s0
 80091a6:	4699      	mov	r9, r3
 80091a8:	dc09      	bgt.n	80091be <__ieee754_pow+0x46>
 80091aa:	d103      	bne.n	80091b4 <__ieee754_pow+0x3c>
 80091ac:	b97a      	cbnz	r2, 80091ce <__ieee754_pow+0x56>
 80091ae:	42a6      	cmp	r6, r4
 80091b0:	dd02      	ble.n	80091b8 <__ieee754_pow+0x40>
 80091b2:	e00c      	b.n	80091ce <__ieee754_pow+0x56>
 80091b4:	428e      	cmp	r6, r1
 80091b6:	dc02      	bgt.n	80091be <__ieee754_pow+0x46>
 80091b8:	428e      	cmp	r6, r1
 80091ba:	d110      	bne.n	80091de <__ieee754_pow+0x66>
 80091bc:	b178      	cbz	r0, 80091de <__ieee754_pow+0x66>
 80091be:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80091c2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80091c6:	ea54 0308 	orrs.w	r3, r4, r8
 80091ca:	f000 84b7 	beq.w	8009b3c <__ieee754_pow+0x9c4>
 80091ce:	4873      	ldr	r0, [pc, #460]	; (800939c <__ieee754_pow+0x224>)
 80091d0:	b00d      	add	sp, #52	; 0x34
 80091d2:	ecbd 8b06 	vpop	{d8-d10}
 80091d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091da:	f7ff bd9d 	b.w	8008d18 <nan>
 80091de:	f1b9 0f00 	cmp.w	r9, #0
 80091e2:	da36      	bge.n	8009252 <__ieee754_pow+0xda>
 80091e4:	496e      	ldr	r1, [pc, #440]	; (80093a0 <__ieee754_pow+0x228>)
 80091e6:	428e      	cmp	r6, r1
 80091e8:	dc51      	bgt.n	800928e <__ieee754_pow+0x116>
 80091ea:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80091ee:	428e      	cmp	r6, r1
 80091f0:	f340 84af 	ble.w	8009b52 <__ieee754_pow+0x9da>
 80091f4:	1531      	asrs	r1, r6, #20
 80091f6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80091fa:	2914      	cmp	r1, #20
 80091fc:	dd0f      	ble.n	800921e <__ieee754_pow+0xa6>
 80091fe:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8009202:	fa20 fc01 	lsr.w	ip, r0, r1
 8009206:	fa0c f101 	lsl.w	r1, ip, r1
 800920a:	4281      	cmp	r1, r0
 800920c:	f040 84a1 	bne.w	8009b52 <__ieee754_pow+0x9da>
 8009210:	f00c 0c01 	and.w	ip, ip, #1
 8009214:	f1cc 0102 	rsb	r1, ip, #2
 8009218:	9100      	str	r1, [sp, #0]
 800921a:	b180      	cbz	r0, 800923e <__ieee754_pow+0xc6>
 800921c:	e059      	b.n	80092d2 <__ieee754_pow+0x15a>
 800921e:	2800      	cmp	r0, #0
 8009220:	d155      	bne.n	80092ce <__ieee754_pow+0x156>
 8009222:	f1c1 0114 	rsb	r1, r1, #20
 8009226:	fa46 fc01 	asr.w	ip, r6, r1
 800922a:	fa0c f101 	lsl.w	r1, ip, r1
 800922e:	42b1      	cmp	r1, r6
 8009230:	f040 848c 	bne.w	8009b4c <__ieee754_pow+0x9d4>
 8009234:	f00c 0c01 	and.w	ip, ip, #1
 8009238:	f1cc 0102 	rsb	r1, ip, #2
 800923c:	9100      	str	r1, [sp, #0]
 800923e:	4959      	ldr	r1, [pc, #356]	; (80093a4 <__ieee754_pow+0x22c>)
 8009240:	428e      	cmp	r6, r1
 8009242:	d12d      	bne.n	80092a0 <__ieee754_pow+0x128>
 8009244:	2f00      	cmp	r7, #0
 8009246:	da79      	bge.n	800933c <__ieee754_pow+0x1c4>
 8009248:	4956      	ldr	r1, [pc, #344]	; (80093a4 <__ieee754_pow+0x22c>)
 800924a:	2000      	movs	r0, #0
 800924c:	f7f7 fb0e 	bl	800086c <__aeabi_ddiv>
 8009250:	e016      	b.n	8009280 <__ieee754_pow+0x108>
 8009252:	2100      	movs	r1, #0
 8009254:	9100      	str	r1, [sp, #0]
 8009256:	2800      	cmp	r0, #0
 8009258:	d13b      	bne.n	80092d2 <__ieee754_pow+0x15a>
 800925a:	494f      	ldr	r1, [pc, #316]	; (8009398 <__ieee754_pow+0x220>)
 800925c:	428e      	cmp	r6, r1
 800925e:	d1ee      	bne.n	800923e <__ieee754_pow+0xc6>
 8009260:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009264:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009268:	ea53 0308 	orrs.w	r3, r3, r8
 800926c:	f000 8466 	beq.w	8009b3c <__ieee754_pow+0x9c4>
 8009270:	4b4d      	ldr	r3, [pc, #308]	; (80093a8 <__ieee754_pow+0x230>)
 8009272:	429c      	cmp	r4, r3
 8009274:	dd0d      	ble.n	8009292 <__ieee754_pow+0x11a>
 8009276:	2f00      	cmp	r7, #0
 8009278:	f280 8464 	bge.w	8009b44 <__ieee754_pow+0x9cc>
 800927c:	2000      	movs	r0, #0
 800927e:	2100      	movs	r1, #0
 8009280:	ec41 0b10 	vmov	d0, r0, r1
 8009284:	b00d      	add	sp, #52	; 0x34
 8009286:	ecbd 8b06 	vpop	{d8-d10}
 800928a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800928e:	2102      	movs	r1, #2
 8009290:	e7e0      	b.n	8009254 <__ieee754_pow+0xdc>
 8009292:	2f00      	cmp	r7, #0
 8009294:	daf2      	bge.n	800927c <__ieee754_pow+0x104>
 8009296:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800929a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800929e:	e7ef      	b.n	8009280 <__ieee754_pow+0x108>
 80092a0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80092a4:	d104      	bne.n	80092b0 <__ieee754_pow+0x138>
 80092a6:	4610      	mov	r0, r2
 80092a8:	4619      	mov	r1, r3
 80092aa:	f7f7 f9b5 	bl	8000618 <__aeabi_dmul>
 80092ae:	e7e7      	b.n	8009280 <__ieee754_pow+0x108>
 80092b0:	493e      	ldr	r1, [pc, #248]	; (80093ac <__ieee754_pow+0x234>)
 80092b2:	428f      	cmp	r7, r1
 80092b4:	d10d      	bne.n	80092d2 <__ieee754_pow+0x15a>
 80092b6:	f1b9 0f00 	cmp.w	r9, #0
 80092ba:	db0a      	blt.n	80092d2 <__ieee754_pow+0x15a>
 80092bc:	ec43 2b10 	vmov	d0, r2, r3
 80092c0:	b00d      	add	sp, #52	; 0x34
 80092c2:	ecbd 8b06 	vpop	{d8-d10}
 80092c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ca:	f000 bc77 	b.w	8009bbc <__ieee754_sqrt>
 80092ce:	2100      	movs	r1, #0
 80092d0:	9100      	str	r1, [sp, #0]
 80092d2:	ec43 2b10 	vmov	d0, r2, r3
 80092d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80092da:	f000 fd23 	bl	8009d24 <fabs>
 80092de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092e2:	ec51 0b10 	vmov	r0, r1, d0
 80092e6:	f1b8 0f00 	cmp.w	r8, #0
 80092ea:	d12a      	bne.n	8009342 <__ieee754_pow+0x1ca>
 80092ec:	b12c      	cbz	r4, 80092fa <__ieee754_pow+0x182>
 80092ee:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80093a4 <__ieee754_pow+0x22c>
 80092f2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 80092f6:	45e6      	cmp	lr, ip
 80092f8:	d123      	bne.n	8009342 <__ieee754_pow+0x1ca>
 80092fa:	2f00      	cmp	r7, #0
 80092fc:	da05      	bge.n	800930a <__ieee754_pow+0x192>
 80092fe:	4602      	mov	r2, r0
 8009300:	460b      	mov	r3, r1
 8009302:	2000      	movs	r0, #0
 8009304:	4927      	ldr	r1, [pc, #156]	; (80093a4 <__ieee754_pow+0x22c>)
 8009306:	f7f7 fab1 	bl	800086c <__aeabi_ddiv>
 800930a:	f1b9 0f00 	cmp.w	r9, #0
 800930e:	dab7      	bge.n	8009280 <__ieee754_pow+0x108>
 8009310:	9b00      	ldr	r3, [sp, #0]
 8009312:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009316:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800931a:	4323      	orrs	r3, r4
 800931c:	d108      	bne.n	8009330 <__ieee754_pow+0x1b8>
 800931e:	4602      	mov	r2, r0
 8009320:	460b      	mov	r3, r1
 8009322:	4610      	mov	r0, r2
 8009324:	4619      	mov	r1, r3
 8009326:	f7f6 ffbf 	bl	80002a8 <__aeabi_dsub>
 800932a:	4602      	mov	r2, r0
 800932c:	460b      	mov	r3, r1
 800932e:	e78d      	b.n	800924c <__ieee754_pow+0xd4>
 8009330:	9b00      	ldr	r3, [sp, #0]
 8009332:	2b01      	cmp	r3, #1
 8009334:	d1a4      	bne.n	8009280 <__ieee754_pow+0x108>
 8009336:	4602      	mov	r2, r0
 8009338:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800933c:	4610      	mov	r0, r2
 800933e:	4619      	mov	r1, r3
 8009340:	e79e      	b.n	8009280 <__ieee754_pow+0x108>
 8009342:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8009346:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 800934a:	950a      	str	r5, [sp, #40]	; 0x28
 800934c:	9d00      	ldr	r5, [sp, #0]
 800934e:	46ac      	mov	ip, r5
 8009350:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009352:	ea5c 0505 	orrs.w	r5, ip, r5
 8009356:	d0e4      	beq.n	8009322 <__ieee754_pow+0x1aa>
 8009358:	4b15      	ldr	r3, [pc, #84]	; (80093b0 <__ieee754_pow+0x238>)
 800935a:	429e      	cmp	r6, r3
 800935c:	f340 80fc 	ble.w	8009558 <__ieee754_pow+0x3e0>
 8009360:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009364:	429e      	cmp	r6, r3
 8009366:	4b10      	ldr	r3, [pc, #64]	; (80093a8 <__ieee754_pow+0x230>)
 8009368:	dd07      	ble.n	800937a <__ieee754_pow+0x202>
 800936a:	429c      	cmp	r4, r3
 800936c:	dc0a      	bgt.n	8009384 <__ieee754_pow+0x20c>
 800936e:	2f00      	cmp	r7, #0
 8009370:	da84      	bge.n	800927c <__ieee754_pow+0x104>
 8009372:	a307      	add	r3, pc, #28	; (adr r3, 8009390 <__ieee754_pow+0x218>)
 8009374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009378:	e795      	b.n	80092a6 <__ieee754_pow+0x12e>
 800937a:	429c      	cmp	r4, r3
 800937c:	dbf7      	blt.n	800936e <__ieee754_pow+0x1f6>
 800937e:	4b09      	ldr	r3, [pc, #36]	; (80093a4 <__ieee754_pow+0x22c>)
 8009380:	429c      	cmp	r4, r3
 8009382:	dd17      	ble.n	80093b4 <__ieee754_pow+0x23c>
 8009384:	2f00      	cmp	r7, #0
 8009386:	dcf4      	bgt.n	8009372 <__ieee754_pow+0x1fa>
 8009388:	e778      	b.n	800927c <__ieee754_pow+0x104>
 800938a:	bf00      	nop
 800938c:	f3af 8000 	nop.w
 8009390:	8800759c 	.word	0x8800759c
 8009394:	7e37e43c 	.word	0x7e37e43c
 8009398:	7ff00000 	.word	0x7ff00000
 800939c:	0800a0fb 	.word	0x0800a0fb
 80093a0:	433fffff 	.word	0x433fffff
 80093a4:	3ff00000 	.word	0x3ff00000
 80093a8:	3fefffff 	.word	0x3fefffff
 80093ac:	3fe00000 	.word	0x3fe00000
 80093b0:	41e00000 	.word	0x41e00000
 80093b4:	4b64      	ldr	r3, [pc, #400]	; (8009548 <__ieee754_pow+0x3d0>)
 80093b6:	2200      	movs	r2, #0
 80093b8:	f7f6 ff76 	bl	80002a8 <__aeabi_dsub>
 80093bc:	a356      	add	r3, pc, #344	; (adr r3, 8009518 <__ieee754_pow+0x3a0>)
 80093be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c2:	4604      	mov	r4, r0
 80093c4:	460d      	mov	r5, r1
 80093c6:	f7f7 f927 	bl	8000618 <__aeabi_dmul>
 80093ca:	a355      	add	r3, pc, #340	; (adr r3, 8009520 <__ieee754_pow+0x3a8>)
 80093cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d0:	4606      	mov	r6, r0
 80093d2:	460f      	mov	r7, r1
 80093d4:	4620      	mov	r0, r4
 80093d6:	4629      	mov	r1, r5
 80093d8:	f7f7 f91e 	bl	8000618 <__aeabi_dmul>
 80093dc:	4b5b      	ldr	r3, [pc, #364]	; (800954c <__ieee754_pow+0x3d4>)
 80093de:	4682      	mov	sl, r0
 80093e0:	468b      	mov	fp, r1
 80093e2:	2200      	movs	r2, #0
 80093e4:	4620      	mov	r0, r4
 80093e6:	4629      	mov	r1, r5
 80093e8:	f7f7 f916 	bl	8000618 <__aeabi_dmul>
 80093ec:	4602      	mov	r2, r0
 80093ee:	460b      	mov	r3, r1
 80093f0:	a14d      	add	r1, pc, #308	; (adr r1, 8009528 <__ieee754_pow+0x3b0>)
 80093f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093f6:	f7f6 ff57 	bl	80002a8 <__aeabi_dsub>
 80093fa:	4622      	mov	r2, r4
 80093fc:	462b      	mov	r3, r5
 80093fe:	f7f7 f90b 	bl	8000618 <__aeabi_dmul>
 8009402:	4602      	mov	r2, r0
 8009404:	460b      	mov	r3, r1
 8009406:	2000      	movs	r0, #0
 8009408:	4951      	ldr	r1, [pc, #324]	; (8009550 <__ieee754_pow+0x3d8>)
 800940a:	f7f6 ff4d 	bl	80002a8 <__aeabi_dsub>
 800940e:	4622      	mov	r2, r4
 8009410:	4680      	mov	r8, r0
 8009412:	4689      	mov	r9, r1
 8009414:	462b      	mov	r3, r5
 8009416:	4620      	mov	r0, r4
 8009418:	4629      	mov	r1, r5
 800941a:	f7f7 f8fd 	bl	8000618 <__aeabi_dmul>
 800941e:	4602      	mov	r2, r0
 8009420:	460b      	mov	r3, r1
 8009422:	4640      	mov	r0, r8
 8009424:	4649      	mov	r1, r9
 8009426:	f7f7 f8f7 	bl	8000618 <__aeabi_dmul>
 800942a:	a341      	add	r3, pc, #260	; (adr r3, 8009530 <__ieee754_pow+0x3b8>)
 800942c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009430:	f7f7 f8f2 	bl	8000618 <__aeabi_dmul>
 8009434:	4602      	mov	r2, r0
 8009436:	460b      	mov	r3, r1
 8009438:	4650      	mov	r0, sl
 800943a:	4659      	mov	r1, fp
 800943c:	f7f6 ff34 	bl	80002a8 <__aeabi_dsub>
 8009440:	4602      	mov	r2, r0
 8009442:	460b      	mov	r3, r1
 8009444:	4680      	mov	r8, r0
 8009446:	4689      	mov	r9, r1
 8009448:	4630      	mov	r0, r6
 800944a:	4639      	mov	r1, r7
 800944c:	f7f6 ff2e 	bl	80002ac <__adddf3>
 8009450:	2400      	movs	r4, #0
 8009452:	4632      	mov	r2, r6
 8009454:	463b      	mov	r3, r7
 8009456:	4620      	mov	r0, r4
 8009458:	460d      	mov	r5, r1
 800945a:	f7f6 ff25 	bl	80002a8 <__aeabi_dsub>
 800945e:	4602      	mov	r2, r0
 8009460:	460b      	mov	r3, r1
 8009462:	4640      	mov	r0, r8
 8009464:	4649      	mov	r1, r9
 8009466:	f7f6 ff1f 	bl	80002a8 <__aeabi_dsub>
 800946a:	9b00      	ldr	r3, [sp, #0]
 800946c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800946e:	3b01      	subs	r3, #1
 8009470:	4313      	orrs	r3, r2
 8009472:	4682      	mov	sl, r0
 8009474:	468b      	mov	fp, r1
 8009476:	f040 81f1 	bne.w	800985c <__ieee754_pow+0x6e4>
 800947a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8009538 <__ieee754_pow+0x3c0>
 800947e:	eeb0 8a47 	vmov.f32	s16, s14
 8009482:	eef0 8a67 	vmov.f32	s17, s15
 8009486:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800948a:	2600      	movs	r6, #0
 800948c:	4632      	mov	r2, r6
 800948e:	463b      	mov	r3, r7
 8009490:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009494:	f7f6 ff08 	bl	80002a8 <__aeabi_dsub>
 8009498:	4622      	mov	r2, r4
 800949a:	462b      	mov	r3, r5
 800949c:	f7f7 f8bc 	bl	8000618 <__aeabi_dmul>
 80094a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094a4:	4680      	mov	r8, r0
 80094a6:	4689      	mov	r9, r1
 80094a8:	4650      	mov	r0, sl
 80094aa:	4659      	mov	r1, fp
 80094ac:	f7f7 f8b4 	bl	8000618 <__aeabi_dmul>
 80094b0:	4602      	mov	r2, r0
 80094b2:	460b      	mov	r3, r1
 80094b4:	4640      	mov	r0, r8
 80094b6:	4649      	mov	r1, r9
 80094b8:	f7f6 fef8 	bl	80002ac <__adddf3>
 80094bc:	4632      	mov	r2, r6
 80094be:	463b      	mov	r3, r7
 80094c0:	4680      	mov	r8, r0
 80094c2:	4689      	mov	r9, r1
 80094c4:	4620      	mov	r0, r4
 80094c6:	4629      	mov	r1, r5
 80094c8:	f7f7 f8a6 	bl	8000618 <__aeabi_dmul>
 80094cc:	460b      	mov	r3, r1
 80094ce:	4604      	mov	r4, r0
 80094d0:	460d      	mov	r5, r1
 80094d2:	4602      	mov	r2, r0
 80094d4:	4649      	mov	r1, r9
 80094d6:	4640      	mov	r0, r8
 80094d8:	f7f6 fee8 	bl	80002ac <__adddf3>
 80094dc:	4b1d      	ldr	r3, [pc, #116]	; (8009554 <__ieee754_pow+0x3dc>)
 80094de:	4299      	cmp	r1, r3
 80094e0:	ec45 4b19 	vmov	d9, r4, r5
 80094e4:	4606      	mov	r6, r0
 80094e6:	460f      	mov	r7, r1
 80094e8:	468b      	mov	fp, r1
 80094ea:	f340 82fe 	ble.w	8009aea <__ieee754_pow+0x972>
 80094ee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80094f2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80094f6:	4303      	orrs	r3, r0
 80094f8:	f000 81f0 	beq.w	80098dc <__ieee754_pow+0x764>
 80094fc:	a310      	add	r3, pc, #64	; (adr r3, 8009540 <__ieee754_pow+0x3c8>)
 80094fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009502:	ec51 0b18 	vmov	r0, r1, d8
 8009506:	f7f7 f887 	bl	8000618 <__aeabi_dmul>
 800950a:	a30d      	add	r3, pc, #52	; (adr r3, 8009540 <__ieee754_pow+0x3c8>)
 800950c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009510:	e6cb      	b.n	80092aa <__ieee754_pow+0x132>
 8009512:	bf00      	nop
 8009514:	f3af 8000 	nop.w
 8009518:	60000000 	.word	0x60000000
 800951c:	3ff71547 	.word	0x3ff71547
 8009520:	f85ddf44 	.word	0xf85ddf44
 8009524:	3e54ae0b 	.word	0x3e54ae0b
 8009528:	55555555 	.word	0x55555555
 800952c:	3fd55555 	.word	0x3fd55555
 8009530:	652b82fe 	.word	0x652b82fe
 8009534:	3ff71547 	.word	0x3ff71547
 8009538:	00000000 	.word	0x00000000
 800953c:	bff00000 	.word	0xbff00000
 8009540:	8800759c 	.word	0x8800759c
 8009544:	7e37e43c 	.word	0x7e37e43c
 8009548:	3ff00000 	.word	0x3ff00000
 800954c:	3fd00000 	.word	0x3fd00000
 8009550:	3fe00000 	.word	0x3fe00000
 8009554:	408fffff 	.word	0x408fffff
 8009558:	4bd7      	ldr	r3, [pc, #860]	; (80098b8 <__ieee754_pow+0x740>)
 800955a:	ea03 0309 	and.w	r3, r3, r9
 800955e:	2200      	movs	r2, #0
 8009560:	b92b      	cbnz	r3, 800956e <__ieee754_pow+0x3f6>
 8009562:	4bd6      	ldr	r3, [pc, #856]	; (80098bc <__ieee754_pow+0x744>)
 8009564:	f7f7 f858 	bl	8000618 <__aeabi_dmul>
 8009568:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800956c:	460c      	mov	r4, r1
 800956e:	1523      	asrs	r3, r4, #20
 8009570:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009574:	4413      	add	r3, r2
 8009576:	9309      	str	r3, [sp, #36]	; 0x24
 8009578:	4bd1      	ldr	r3, [pc, #836]	; (80098c0 <__ieee754_pow+0x748>)
 800957a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800957e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009582:	429c      	cmp	r4, r3
 8009584:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009588:	dd08      	ble.n	800959c <__ieee754_pow+0x424>
 800958a:	4bce      	ldr	r3, [pc, #824]	; (80098c4 <__ieee754_pow+0x74c>)
 800958c:	429c      	cmp	r4, r3
 800958e:	f340 8163 	ble.w	8009858 <__ieee754_pow+0x6e0>
 8009592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009594:	3301      	adds	r3, #1
 8009596:	9309      	str	r3, [sp, #36]	; 0x24
 8009598:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800959c:	2400      	movs	r4, #0
 800959e:	00e3      	lsls	r3, r4, #3
 80095a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80095a2:	4bc9      	ldr	r3, [pc, #804]	; (80098c8 <__ieee754_pow+0x750>)
 80095a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80095a8:	ed93 7b00 	vldr	d7, [r3]
 80095ac:	4629      	mov	r1, r5
 80095ae:	ec53 2b17 	vmov	r2, r3, d7
 80095b2:	eeb0 8a47 	vmov.f32	s16, s14
 80095b6:	eef0 8a67 	vmov.f32	s17, s15
 80095ba:	4682      	mov	sl, r0
 80095bc:	f7f6 fe74 	bl	80002a8 <__aeabi_dsub>
 80095c0:	4652      	mov	r2, sl
 80095c2:	4606      	mov	r6, r0
 80095c4:	460f      	mov	r7, r1
 80095c6:	462b      	mov	r3, r5
 80095c8:	ec51 0b18 	vmov	r0, r1, d8
 80095cc:	f7f6 fe6e 	bl	80002ac <__adddf3>
 80095d0:	4602      	mov	r2, r0
 80095d2:	460b      	mov	r3, r1
 80095d4:	2000      	movs	r0, #0
 80095d6:	49bd      	ldr	r1, [pc, #756]	; (80098cc <__ieee754_pow+0x754>)
 80095d8:	f7f7 f948 	bl	800086c <__aeabi_ddiv>
 80095dc:	ec41 0b19 	vmov	d9, r0, r1
 80095e0:	4602      	mov	r2, r0
 80095e2:	460b      	mov	r3, r1
 80095e4:	4630      	mov	r0, r6
 80095e6:	4639      	mov	r1, r7
 80095e8:	f7f7 f816 	bl	8000618 <__aeabi_dmul>
 80095ec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80095f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80095f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80095f8:	2300      	movs	r3, #0
 80095fa:	9304      	str	r3, [sp, #16]
 80095fc:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009600:	46ab      	mov	fp, r5
 8009602:	106d      	asrs	r5, r5, #1
 8009604:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009608:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800960c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009610:	2200      	movs	r2, #0
 8009612:	4640      	mov	r0, r8
 8009614:	4649      	mov	r1, r9
 8009616:	4614      	mov	r4, r2
 8009618:	461d      	mov	r5, r3
 800961a:	f7f6 fffd 	bl	8000618 <__aeabi_dmul>
 800961e:	4602      	mov	r2, r0
 8009620:	460b      	mov	r3, r1
 8009622:	4630      	mov	r0, r6
 8009624:	4639      	mov	r1, r7
 8009626:	f7f6 fe3f 	bl	80002a8 <__aeabi_dsub>
 800962a:	ec53 2b18 	vmov	r2, r3, d8
 800962e:	4606      	mov	r6, r0
 8009630:	460f      	mov	r7, r1
 8009632:	4620      	mov	r0, r4
 8009634:	4629      	mov	r1, r5
 8009636:	f7f6 fe37 	bl	80002a8 <__aeabi_dsub>
 800963a:	4602      	mov	r2, r0
 800963c:	460b      	mov	r3, r1
 800963e:	4650      	mov	r0, sl
 8009640:	4659      	mov	r1, fp
 8009642:	f7f6 fe31 	bl	80002a8 <__aeabi_dsub>
 8009646:	4642      	mov	r2, r8
 8009648:	464b      	mov	r3, r9
 800964a:	f7f6 ffe5 	bl	8000618 <__aeabi_dmul>
 800964e:	4602      	mov	r2, r0
 8009650:	460b      	mov	r3, r1
 8009652:	4630      	mov	r0, r6
 8009654:	4639      	mov	r1, r7
 8009656:	f7f6 fe27 	bl	80002a8 <__aeabi_dsub>
 800965a:	ec53 2b19 	vmov	r2, r3, d9
 800965e:	f7f6 ffdb 	bl	8000618 <__aeabi_dmul>
 8009662:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009666:	ec41 0b18 	vmov	d8, r0, r1
 800966a:	4610      	mov	r0, r2
 800966c:	4619      	mov	r1, r3
 800966e:	f7f6 ffd3 	bl	8000618 <__aeabi_dmul>
 8009672:	a37d      	add	r3, pc, #500	; (adr r3, 8009868 <__ieee754_pow+0x6f0>)
 8009674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009678:	4604      	mov	r4, r0
 800967a:	460d      	mov	r5, r1
 800967c:	f7f6 ffcc 	bl	8000618 <__aeabi_dmul>
 8009680:	a37b      	add	r3, pc, #492	; (adr r3, 8009870 <__ieee754_pow+0x6f8>)
 8009682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009686:	f7f6 fe11 	bl	80002ac <__adddf3>
 800968a:	4622      	mov	r2, r4
 800968c:	462b      	mov	r3, r5
 800968e:	f7f6 ffc3 	bl	8000618 <__aeabi_dmul>
 8009692:	a379      	add	r3, pc, #484	; (adr r3, 8009878 <__ieee754_pow+0x700>)
 8009694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009698:	f7f6 fe08 	bl	80002ac <__adddf3>
 800969c:	4622      	mov	r2, r4
 800969e:	462b      	mov	r3, r5
 80096a0:	f7f6 ffba 	bl	8000618 <__aeabi_dmul>
 80096a4:	a376      	add	r3, pc, #472	; (adr r3, 8009880 <__ieee754_pow+0x708>)
 80096a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096aa:	f7f6 fdff 	bl	80002ac <__adddf3>
 80096ae:	4622      	mov	r2, r4
 80096b0:	462b      	mov	r3, r5
 80096b2:	f7f6 ffb1 	bl	8000618 <__aeabi_dmul>
 80096b6:	a374      	add	r3, pc, #464	; (adr r3, 8009888 <__ieee754_pow+0x710>)
 80096b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096bc:	f7f6 fdf6 	bl	80002ac <__adddf3>
 80096c0:	4622      	mov	r2, r4
 80096c2:	462b      	mov	r3, r5
 80096c4:	f7f6 ffa8 	bl	8000618 <__aeabi_dmul>
 80096c8:	a371      	add	r3, pc, #452	; (adr r3, 8009890 <__ieee754_pow+0x718>)
 80096ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ce:	f7f6 fded 	bl	80002ac <__adddf3>
 80096d2:	4622      	mov	r2, r4
 80096d4:	4606      	mov	r6, r0
 80096d6:	460f      	mov	r7, r1
 80096d8:	462b      	mov	r3, r5
 80096da:	4620      	mov	r0, r4
 80096dc:	4629      	mov	r1, r5
 80096de:	f7f6 ff9b 	bl	8000618 <__aeabi_dmul>
 80096e2:	4602      	mov	r2, r0
 80096e4:	460b      	mov	r3, r1
 80096e6:	4630      	mov	r0, r6
 80096e8:	4639      	mov	r1, r7
 80096ea:	f7f6 ff95 	bl	8000618 <__aeabi_dmul>
 80096ee:	4642      	mov	r2, r8
 80096f0:	4604      	mov	r4, r0
 80096f2:	460d      	mov	r5, r1
 80096f4:	464b      	mov	r3, r9
 80096f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096fa:	f7f6 fdd7 	bl	80002ac <__adddf3>
 80096fe:	ec53 2b18 	vmov	r2, r3, d8
 8009702:	f7f6 ff89 	bl	8000618 <__aeabi_dmul>
 8009706:	4622      	mov	r2, r4
 8009708:	462b      	mov	r3, r5
 800970a:	f7f6 fdcf 	bl	80002ac <__adddf3>
 800970e:	4642      	mov	r2, r8
 8009710:	4682      	mov	sl, r0
 8009712:	468b      	mov	fp, r1
 8009714:	464b      	mov	r3, r9
 8009716:	4640      	mov	r0, r8
 8009718:	4649      	mov	r1, r9
 800971a:	f7f6 ff7d 	bl	8000618 <__aeabi_dmul>
 800971e:	4b6c      	ldr	r3, [pc, #432]	; (80098d0 <__ieee754_pow+0x758>)
 8009720:	2200      	movs	r2, #0
 8009722:	4606      	mov	r6, r0
 8009724:	460f      	mov	r7, r1
 8009726:	f7f6 fdc1 	bl	80002ac <__adddf3>
 800972a:	4652      	mov	r2, sl
 800972c:	465b      	mov	r3, fp
 800972e:	f7f6 fdbd 	bl	80002ac <__adddf3>
 8009732:	9c04      	ldr	r4, [sp, #16]
 8009734:	460d      	mov	r5, r1
 8009736:	4622      	mov	r2, r4
 8009738:	460b      	mov	r3, r1
 800973a:	4640      	mov	r0, r8
 800973c:	4649      	mov	r1, r9
 800973e:	f7f6 ff6b 	bl	8000618 <__aeabi_dmul>
 8009742:	4b63      	ldr	r3, [pc, #396]	; (80098d0 <__ieee754_pow+0x758>)
 8009744:	4680      	mov	r8, r0
 8009746:	4689      	mov	r9, r1
 8009748:	2200      	movs	r2, #0
 800974a:	4620      	mov	r0, r4
 800974c:	4629      	mov	r1, r5
 800974e:	f7f6 fdab 	bl	80002a8 <__aeabi_dsub>
 8009752:	4632      	mov	r2, r6
 8009754:	463b      	mov	r3, r7
 8009756:	f7f6 fda7 	bl	80002a8 <__aeabi_dsub>
 800975a:	4602      	mov	r2, r0
 800975c:	460b      	mov	r3, r1
 800975e:	4650      	mov	r0, sl
 8009760:	4659      	mov	r1, fp
 8009762:	f7f6 fda1 	bl	80002a8 <__aeabi_dsub>
 8009766:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800976a:	f7f6 ff55 	bl	8000618 <__aeabi_dmul>
 800976e:	4622      	mov	r2, r4
 8009770:	4606      	mov	r6, r0
 8009772:	460f      	mov	r7, r1
 8009774:	462b      	mov	r3, r5
 8009776:	ec51 0b18 	vmov	r0, r1, d8
 800977a:	f7f6 ff4d 	bl	8000618 <__aeabi_dmul>
 800977e:	4602      	mov	r2, r0
 8009780:	460b      	mov	r3, r1
 8009782:	4630      	mov	r0, r6
 8009784:	4639      	mov	r1, r7
 8009786:	f7f6 fd91 	bl	80002ac <__adddf3>
 800978a:	4606      	mov	r6, r0
 800978c:	460f      	mov	r7, r1
 800978e:	4602      	mov	r2, r0
 8009790:	460b      	mov	r3, r1
 8009792:	4640      	mov	r0, r8
 8009794:	4649      	mov	r1, r9
 8009796:	f7f6 fd89 	bl	80002ac <__adddf3>
 800979a:	9c04      	ldr	r4, [sp, #16]
 800979c:	a33e      	add	r3, pc, #248	; (adr r3, 8009898 <__ieee754_pow+0x720>)
 800979e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a2:	4620      	mov	r0, r4
 80097a4:	460d      	mov	r5, r1
 80097a6:	f7f6 ff37 	bl	8000618 <__aeabi_dmul>
 80097aa:	4642      	mov	r2, r8
 80097ac:	ec41 0b18 	vmov	d8, r0, r1
 80097b0:	464b      	mov	r3, r9
 80097b2:	4620      	mov	r0, r4
 80097b4:	4629      	mov	r1, r5
 80097b6:	f7f6 fd77 	bl	80002a8 <__aeabi_dsub>
 80097ba:	4602      	mov	r2, r0
 80097bc:	460b      	mov	r3, r1
 80097be:	4630      	mov	r0, r6
 80097c0:	4639      	mov	r1, r7
 80097c2:	f7f6 fd71 	bl	80002a8 <__aeabi_dsub>
 80097c6:	a336      	add	r3, pc, #216	; (adr r3, 80098a0 <__ieee754_pow+0x728>)
 80097c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097cc:	f7f6 ff24 	bl	8000618 <__aeabi_dmul>
 80097d0:	a335      	add	r3, pc, #212	; (adr r3, 80098a8 <__ieee754_pow+0x730>)
 80097d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d6:	4606      	mov	r6, r0
 80097d8:	460f      	mov	r7, r1
 80097da:	4620      	mov	r0, r4
 80097dc:	4629      	mov	r1, r5
 80097de:	f7f6 ff1b 	bl	8000618 <__aeabi_dmul>
 80097e2:	4602      	mov	r2, r0
 80097e4:	460b      	mov	r3, r1
 80097e6:	4630      	mov	r0, r6
 80097e8:	4639      	mov	r1, r7
 80097ea:	f7f6 fd5f 	bl	80002ac <__adddf3>
 80097ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80097f0:	4b38      	ldr	r3, [pc, #224]	; (80098d4 <__ieee754_pow+0x75c>)
 80097f2:	4413      	add	r3, r2
 80097f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f8:	f7f6 fd58 	bl	80002ac <__adddf3>
 80097fc:	4682      	mov	sl, r0
 80097fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009800:	468b      	mov	fp, r1
 8009802:	f7f6 fe9f 	bl	8000544 <__aeabi_i2d>
 8009806:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009808:	4b33      	ldr	r3, [pc, #204]	; (80098d8 <__ieee754_pow+0x760>)
 800980a:	4413      	add	r3, r2
 800980c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009810:	4606      	mov	r6, r0
 8009812:	460f      	mov	r7, r1
 8009814:	4652      	mov	r2, sl
 8009816:	465b      	mov	r3, fp
 8009818:	ec51 0b18 	vmov	r0, r1, d8
 800981c:	f7f6 fd46 	bl	80002ac <__adddf3>
 8009820:	4642      	mov	r2, r8
 8009822:	464b      	mov	r3, r9
 8009824:	f7f6 fd42 	bl	80002ac <__adddf3>
 8009828:	4632      	mov	r2, r6
 800982a:	463b      	mov	r3, r7
 800982c:	f7f6 fd3e 	bl	80002ac <__adddf3>
 8009830:	9c04      	ldr	r4, [sp, #16]
 8009832:	4632      	mov	r2, r6
 8009834:	463b      	mov	r3, r7
 8009836:	4620      	mov	r0, r4
 8009838:	460d      	mov	r5, r1
 800983a:	f7f6 fd35 	bl	80002a8 <__aeabi_dsub>
 800983e:	4642      	mov	r2, r8
 8009840:	464b      	mov	r3, r9
 8009842:	f7f6 fd31 	bl	80002a8 <__aeabi_dsub>
 8009846:	ec53 2b18 	vmov	r2, r3, d8
 800984a:	f7f6 fd2d 	bl	80002a8 <__aeabi_dsub>
 800984e:	4602      	mov	r2, r0
 8009850:	460b      	mov	r3, r1
 8009852:	4650      	mov	r0, sl
 8009854:	4659      	mov	r1, fp
 8009856:	e606      	b.n	8009466 <__ieee754_pow+0x2ee>
 8009858:	2401      	movs	r4, #1
 800985a:	e6a0      	b.n	800959e <__ieee754_pow+0x426>
 800985c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80098b0 <__ieee754_pow+0x738>
 8009860:	e60d      	b.n	800947e <__ieee754_pow+0x306>
 8009862:	bf00      	nop
 8009864:	f3af 8000 	nop.w
 8009868:	4a454eef 	.word	0x4a454eef
 800986c:	3fca7e28 	.word	0x3fca7e28
 8009870:	93c9db65 	.word	0x93c9db65
 8009874:	3fcd864a 	.word	0x3fcd864a
 8009878:	a91d4101 	.word	0xa91d4101
 800987c:	3fd17460 	.word	0x3fd17460
 8009880:	518f264d 	.word	0x518f264d
 8009884:	3fd55555 	.word	0x3fd55555
 8009888:	db6fabff 	.word	0xdb6fabff
 800988c:	3fdb6db6 	.word	0x3fdb6db6
 8009890:	33333303 	.word	0x33333303
 8009894:	3fe33333 	.word	0x3fe33333
 8009898:	e0000000 	.word	0xe0000000
 800989c:	3feec709 	.word	0x3feec709
 80098a0:	dc3a03fd 	.word	0xdc3a03fd
 80098a4:	3feec709 	.word	0x3feec709
 80098a8:	145b01f5 	.word	0x145b01f5
 80098ac:	be3e2fe0 	.word	0xbe3e2fe0
 80098b0:	00000000 	.word	0x00000000
 80098b4:	3ff00000 	.word	0x3ff00000
 80098b8:	7ff00000 	.word	0x7ff00000
 80098bc:	43400000 	.word	0x43400000
 80098c0:	0003988e 	.word	0x0003988e
 80098c4:	000bb679 	.word	0x000bb679
 80098c8:	0800a4e8 	.word	0x0800a4e8
 80098cc:	3ff00000 	.word	0x3ff00000
 80098d0:	40080000 	.word	0x40080000
 80098d4:	0800a508 	.word	0x0800a508
 80098d8:	0800a4f8 	.word	0x0800a4f8
 80098dc:	a3b5      	add	r3, pc, #724	; (adr r3, 8009bb4 <__ieee754_pow+0xa3c>)
 80098de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e2:	4640      	mov	r0, r8
 80098e4:	4649      	mov	r1, r9
 80098e6:	f7f6 fce1 	bl	80002ac <__adddf3>
 80098ea:	4622      	mov	r2, r4
 80098ec:	ec41 0b1a 	vmov	d10, r0, r1
 80098f0:	462b      	mov	r3, r5
 80098f2:	4630      	mov	r0, r6
 80098f4:	4639      	mov	r1, r7
 80098f6:	f7f6 fcd7 	bl	80002a8 <__aeabi_dsub>
 80098fa:	4602      	mov	r2, r0
 80098fc:	460b      	mov	r3, r1
 80098fe:	ec51 0b1a 	vmov	r0, r1, d10
 8009902:	f7f7 f919 	bl	8000b38 <__aeabi_dcmpgt>
 8009906:	2800      	cmp	r0, #0
 8009908:	f47f adf8 	bne.w	80094fc <__ieee754_pow+0x384>
 800990c:	4aa4      	ldr	r2, [pc, #656]	; (8009ba0 <__ieee754_pow+0xa28>)
 800990e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009912:	4293      	cmp	r3, r2
 8009914:	f340 810b 	ble.w	8009b2e <__ieee754_pow+0x9b6>
 8009918:	151b      	asrs	r3, r3, #20
 800991a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800991e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009922:	fa4a f303 	asr.w	r3, sl, r3
 8009926:	445b      	add	r3, fp
 8009928:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800992c:	4e9d      	ldr	r6, [pc, #628]	; (8009ba4 <__ieee754_pow+0xa2c>)
 800992e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009932:	4116      	asrs	r6, r2
 8009934:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009938:	2000      	movs	r0, #0
 800993a:	ea23 0106 	bic.w	r1, r3, r6
 800993e:	f1c2 0214 	rsb	r2, r2, #20
 8009942:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009946:	fa4a fa02 	asr.w	sl, sl, r2
 800994a:	f1bb 0f00 	cmp.w	fp, #0
 800994e:	4602      	mov	r2, r0
 8009950:	460b      	mov	r3, r1
 8009952:	4620      	mov	r0, r4
 8009954:	4629      	mov	r1, r5
 8009956:	bfb8      	it	lt
 8009958:	f1ca 0a00 	rsblt	sl, sl, #0
 800995c:	f7f6 fca4 	bl	80002a8 <__aeabi_dsub>
 8009960:	ec41 0b19 	vmov	d9, r0, r1
 8009964:	4642      	mov	r2, r8
 8009966:	464b      	mov	r3, r9
 8009968:	ec51 0b19 	vmov	r0, r1, d9
 800996c:	f7f6 fc9e 	bl	80002ac <__adddf3>
 8009970:	2400      	movs	r4, #0
 8009972:	a379      	add	r3, pc, #484	; (adr r3, 8009b58 <__ieee754_pow+0x9e0>)
 8009974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009978:	4620      	mov	r0, r4
 800997a:	460d      	mov	r5, r1
 800997c:	f7f6 fe4c 	bl	8000618 <__aeabi_dmul>
 8009980:	ec53 2b19 	vmov	r2, r3, d9
 8009984:	4606      	mov	r6, r0
 8009986:	460f      	mov	r7, r1
 8009988:	4620      	mov	r0, r4
 800998a:	4629      	mov	r1, r5
 800998c:	f7f6 fc8c 	bl	80002a8 <__aeabi_dsub>
 8009990:	4602      	mov	r2, r0
 8009992:	460b      	mov	r3, r1
 8009994:	4640      	mov	r0, r8
 8009996:	4649      	mov	r1, r9
 8009998:	f7f6 fc86 	bl	80002a8 <__aeabi_dsub>
 800999c:	a370      	add	r3, pc, #448	; (adr r3, 8009b60 <__ieee754_pow+0x9e8>)
 800999e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a2:	f7f6 fe39 	bl	8000618 <__aeabi_dmul>
 80099a6:	a370      	add	r3, pc, #448	; (adr r3, 8009b68 <__ieee754_pow+0x9f0>)
 80099a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ac:	4680      	mov	r8, r0
 80099ae:	4689      	mov	r9, r1
 80099b0:	4620      	mov	r0, r4
 80099b2:	4629      	mov	r1, r5
 80099b4:	f7f6 fe30 	bl	8000618 <__aeabi_dmul>
 80099b8:	4602      	mov	r2, r0
 80099ba:	460b      	mov	r3, r1
 80099bc:	4640      	mov	r0, r8
 80099be:	4649      	mov	r1, r9
 80099c0:	f7f6 fc74 	bl	80002ac <__adddf3>
 80099c4:	4604      	mov	r4, r0
 80099c6:	460d      	mov	r5, r1
 80099c8:	4602      	mov	r2, r0
 80099ca:	460b      	mov	r3, r1
 80099cc:	4630      	mov	r0, r6
 80099ce:	4639      	mov	r1, r7
 80099d0:	f7f6 fc6c 	bl	80002ac <__adddf3>
 80099d4:	4632      	mov	r2, r6
 80099d6:	463b      	mov	r3, r7
 80099d8:	4680      	mov	r8, r0
 80099da:	4689      	mov	r9, r1
 80099dc:	f7f6 fc64 	bl	80002a8 <__aeabi_dsub>
 80099e0:	4602      	mov	r2, r0
 80099e2:	460b      	mov	r3, r1
 80099e4:	4620      	mov	r0, r4
 80099e6:	4629      	mov	r1, r5
 80099e8:	f7f6 fc5e 	bl	80002a8 <__aeabi_dsub>
 80099ec:	4642      	mov	r2, r8
 80099ee:	4606      	mov	r6, r0
 80099f0:	460f      	mov	r7, r1
 80099f2:	464b      	mov	r3, r9
 80099f4:	4640      	mov	r0, r8
 80099f6:	4649      	mov	r1, r9
 80099f8:	f7f6 fe0e 	bl	8000618 <__aeabi_dmul>
 80099fc:	a35c      	add	r3, pc, #368	; (adr r3, 8009b70 <__ieee754_pow+0x9f8>)
 80099fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a02:	4604      	mov	r4, r0
 8009a04:	460d      	mov	r5, r1
 8009a06:	f7f6 fe07 	bl	8000618 <__aeabi_dmul>
 8009a0a:	a35b      	add	r3, pc, #364	; (adr r3, 8009b78 <__ieee754_pow+0xa00>)
 8009a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a10:	f7f6 fc4a 	bl	80002a8 <__aeabi_dsub>
 8009a14:	4622      	mov	r2, r4
 8009a16:	462b      	mov	r3, r5
 8009a18:	f7f6 fdfe 	bl	8000618 <__aeabi_dmul>
 8009a1c:	a358      	add	r3, pc, #352	; (adr r3, 8009b80 <__ieee754_pow+0xa08>)
 8009a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a22:	f7f6 fc43 	bl	80002ac <__adddf3>
 8009a26:	4622      	mov	r2, r4
 8009a28:	462b      	mov	r3, r5
 8009a2a:	f7f6 fdf5 	bl	8000618 <__aeabi_dmul>
 8009a2e:	a356      	add	r3, pc, #344	; (adr r3, 8009b88 <__ieee754_pow+0xa10>)
 8009a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a34:	f7f6 fc38 	bl	80002a8 <__aeabi_dsub>
 8009a38:	4622      	mov	r2, r4
 8009a3a:	462b      	mov	r3, r5
 8009a3c:	f7f6 fdec 	bl	8000618 <__aeabi_dmul>
 8009a40:	a353      	add	r3, pc, #332	; (adr r3, 8009b90 <__ieee754_pow+0xa18>)
 8009a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a46:	f7f6 fc31 	bl	80002ac <__adddf3>
 8009a4a:	4622      	mov	r2, r4
 8009a4c:	462b      	mov	r3, r5
 8009a4e:	f7f6 fde3 	bl	8000618 <__aeabi_dmul>
 8009a52:	4602      	mov	r2, r0
 8009a54:	460b      	mov	r3, r1
 8009a56:	4640      	mov	r0, r8
 8009a58:	4649      	mov	r1, r9
 8009a5a:	f7f6 fc25 	bl	80002a8 <__aeabi_dsub>
 8009a5e:	4604      	mov	r4, r0
 8009a60:	460d      	mov	r5, r1
 8009a62:	4602      	mov	r2, r0
 8009a64:	460b      	mov	r3, r1
 8009a66:	4640      	mov	r0, r8
 8009a68:	4649      	mov	r1, r9
 8009a6a:	f7f6 fdd5 	bl	8000618 <__aeabi_dmul>
 8009a6e:	2200      	movs	r2, #0
 8009a70:	ec41 0b19 	vmov	d9, r0, r1
 8009a74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009a78:	4620      	mov	r0, r4
 8009a7a:	4629      	mov	r1, r5
 8009a7c:	f7f6 fc14 	bl	80002a8 <__aeabi_dsub>
 8009a80:	4602      	mov	r2, r0
 8009a82:	460b      	mov	r3, r1
 8009a84:	ec51 0b19 	vmov	r0, r1, d9
 8009a88:	f7f6 fef0 	bl	800086c <__aeabi_ddiv>
 8009a8c:	4632      	mov	r2, r6
 8009a8e:	4604      	mov	r4, r0
 8009a90:	460d      	mov	r5, r1
 8009a92:	463b      	mov	r3, r7
 8009a94:	4640      	mov	r0, r8
 8009a96:	4649      	mov	r1, r9
 8009a98:	f7f6 fdbe 	bl	8000618 <__aeabi_dmul>
 8009a9c:	4632      	mov	r2, r6
 8009a9e:	463b      	mov	r3, r7
 8009aa0:	f7f6 fc04 	bl	80002ac <__adddf3>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	4629      	mov	r1, r5
 8009aac:	f7f6 fbfc 	bl	80002a8 <__aeabi_dsub>
 8009ab0:	4642      	mov	r2, r8
 8009ab2:	464b      	mov	r3, r9
 8009ab4:	f7f6 fbf8 	bl	80002a8 <__aeabi_dsub>
 8009ab8:	460b      	mov	r3, r1
 8009aba:	4602      	mov	r2, r0
 8009abc:	493a      	ldr	r1, [pc, #232]	; (8009ba8 <__ieee754_pow+0xa30>)
 8009abe:	2000      	movs	r0, #0
 8009ac0:	f7f6 fbf2 	bl	80002a8 <__aeabi_dsub>
 8009ac4:	e9cd 0100 	strd	r0, r1, [sp]
 8009ac8:	9b01      	ldr	r3, [sp, #4]
 8009aca:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009ace:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ad2:	da2f      	bge.n	8009b34 <__ieee754_pow+0x9bc>
 8009ad4:	4650      	mov	r0, sl
 8009ad6:	ed9d 0b00 	vldr	d0, [sp]
 8009ada:	f000 f9c1 	bl	8009e60 <scalbn>
 8009ade:	ec51 0b10 	vmov	r0, r1, d0
 8009ae2:	ec53 2b18 	vmov	r2, r3, d8
 8009ae6:	f7ff bbe0 	b.w	80092aa <__ieee754_pow+0x132>
 8009aea:	4b30      	ldr	r3, [pc, #192]	; (8009bac <__ieee754_pow+0xa34>)
 8009aec:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009af0:	429e      	cmp	r6, r3
 8009af2:	f77f af0b 	ble.w	800990c <__ieee754_pow+0x794>
 8009af6:	4b2e      	ldr	r3, [pc, #184]	; (8009bb0 <__ieee754_pow+0xa38>)
 8009af8:	440b      	add	r3, r1
 8009afa:	4303      	orrs	r3, r0
 8009afc:	d00b      	beq.n	8009b16 <__ieee754_pow+0x99e>
 8009afe:	a326      	add	r3, pc, #152	; (adr r3, 8009b98 <__ieee754_pow+0xa20>)
 8009b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b04:	ec51 0b18 	vmov	r0, r1, d8
 8009b08:	f7f6 fd86 	bl	8000618 <__aeabi_dmul>
 8009b0c:	a322      	add	r3, pc, #136	; (adr r3, 8009b98 <__ieee754_pow+0xa20>)
 8009b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b12:	f7ff bbca 	b.w	80092aa <__ieee754_pow+0x132>
 8009b16:	4622      	mov	r2, r4
 8009b18:	462b      	mov	r3, r5
 8009b1a:	f7f6 fbc5 	bl	80002a8 <__aeabi_dsub>
 8009b1e:	4642      	mov	r2, r8
 8009b20:	464b      	mov	r3, r9
 8009b22:	f7f6 ffff 	bl	8000b24 <__aeabi_dcmpge>
 8009b26:	2800      	cmp	r0, #0
 8009b28:	f43f aef0 	beq.w	800990c <__ieee754_pow+0x794>
 8009b2c:	e7e7      	b.n	8009afe <__ieee754_pow+0x986>
 8009b2e:	f04f 0a00 	mov.w	sl, #0
 8009b32:	e717      	b.n	8009964 <__ieee754_pow+0x7ec>
 8009b34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b38:	4619      	mov	r1, r3
 8009b3a:	e7d2      	b.n	8009ae2 <__ieee754_pow+0x96a>
 8009b3c:	491a      	ldr	r1, [pc, #104]	; (8009ba8 <__ieee754_pow+0xa30>)
 8009b3e:	2000      	movs	r0, #0
 8009b40:	f7ff bb9e 	b.w	8009280 <__ieee754_pow+0x108>
 8009b44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b48:	f7ff bb9a 	b.w	8009280 <__ieee754_pow+0x108>
 8009b4c:	9000      	str	r0, [sp, #0]
 8009b4e:	f7ff bb76 	b.w	800923e <__ieee754_pow+0xc6>
 8009b52:	2100      	movs	r1, #0
 8009b54:	f7ff bb60 	b.w	8009218 <__ieee754_pow+0xa0>
 8009b58:	00000000 	.word	0x00000000
 8009b5c:	3fe62e43 	.word	0x3fe62e43
 8009b60:	fefa39ef 	.word	0xfefa39ef
 8009b64:	3fe62e42 	.word	0x3fe62e42
 8009b68:	0ca86c39 	.word	0x0ca86c39
 8009b6c:	be205c61 	.word	0xbe205c61
 8009b70:	72bea4d0 	.word	0x72bea4d0
 8009b74:	3e663769 	.word	0x3e663769
 8009b78:	c5d26bf1 	.word	0xc5d26bf1
 8009b7c:	3ebbbd41 	.word	0x3ebbbd41
 8009b80:	af25de2c 	.word	0xaf25de2c
 8009b84:	3f11566a 	.word	0x3f11566a
 8009b88:	16bebd93 	.word	0x16bebd93
 8009b8c:	3f66c16c 	.word	0x3f66c16c
 8009b90:	5555553e 	.word	0x5555553e
 8009b94:	3fc55555 	.word	0x3fc55555
 8009b98:	c2f8f359 	.word	0xc2f8f359
 8009b9c:	01a56e1f 	.word	0x01a56e1f
 8009ba0:	3fe00000 	.word	0x3fe00000
 8009ba4:	000fffff 	.word	0x000fffff
 8009ba8:	3ff00000 	.word	0x3ff00000
 8009bac:	4090cbff 	.word	0x4090cbff
 8009bb0:	3f6f3400 	.word	0x3f6f3400
 8009bb4:	652b82fe 	.word	0x652b82fe
 8009bb8:	3c971547 	.word	0x3c971547

08009bbc <__ieee754_sqrt>:
 8009bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bc0:	ec55 4b10 	vmov	r4, r5, d0
 8009bc4:	4e56      	ldr	r6, [pc, #344]	; (8009d20 <__ieee754_sqrt+0x164>)
 8009bc6:	43ae      	bics	r6, r5
 8009bc8:	ee10 0a10 	vmov	r0, s0
 8009bcc:	ee10 3a10 	vmov	r3, s0
 8009bd0:	4629      	mov	r1, r5
 8009bd2:	462a      	mov	r2, r5
 8009bd4:	d110      	bne.n	8009bf8 <__ieee754_sqrt+0x3c>
 8009bd6:	ee10 2a10 	vmov	r2, s0
 8009bda:	462b      	mov	r3, r5
 8009bdc:	f7f6 fd1c 	bl	8000618 <__aeabi_dmul>
 8009be0:	4602      	mov	r2, r0
 8009be2:	460b      	mov	r3, r1
 8009be4:	4620      	mov	r0, r4
 8009be6:	4629      	mov	r1, r5
 8009be8:	f7f6 fb60 	bl	80002ac <__adddf3>
 8009bec:	4604      	mov	r4, r0
 8009bee:	460d      	mov	r5, r1
 8009bf0:	ec45 4b10 	vmov	d0, r4, r5
 8009bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bf8:	2d00      	cmp	r5, #0
 8009bfa:	dc10      	bgt.n	8009c1e <__ieee754_sqrt+0x62>
 8009bfc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009c00:	4330      	orrs	r0, r6
 8009c02:	d0f5      	beq.n	8009bf0 <__ieee754_sqrt+0x34>
 8009c04:	b15d      	cbz	r5, 8009c1e <__ieee754_sqrt+0x62>
 8009c06:	ee10 2a10 	vmov	r2, s0
 8009c0a:	462b      	mov	r3, r5
 8009c0c:	ee10 0a10 	vmov	r0, s0
 8009c10:	f7f6 fb4a 	bl	80002a8 <__aeabi_dsub>
 8009c14:	4602      	mov	r2, r0
 8009c16:	460b      	mov	r3, r1
 8009c18:	f7f6 fe28 	bl	800086c <__aeabi_ddiv>
 8009c1c:	e7e6      	b.n	8009bec <__ieee754_sqrt+0x30>
 8009c1e:	1509      	asrs	r1, r1, #20
 8009c20:	d076      	beq.n	8009d10 <__ieee754_sqrt+0x154>
 8009c22:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009c26:	07ce      	lsls	r6, r1, #31
 8009c28:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8009c2c:	bf5e      	ittt	pl
 8009c2e:	0fda      	lsrpl	r2, r3, #31
 8009c30:	005b      	lslpl	r3, r3, #1
 8009c32:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8009c36:	0fda      	lsrs	r2, r3, #31
 8009c38:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8009c3c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8009c40:	2000      	movs	r0, #0
 8009c42:	106d      	asrs	r5, r5, #1
 8009c44:	005b      	lsls	r3, r3, #1
 8009c46:	f04f 0e16 	mov.w	lr, #22
 8009c4a:	4684      	mov	ip, r0
 8009c4c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009c50:	eb0c 0401 	add.w	r4, ip, r1
 8009c54:	4294      	cmp	r4, r2
 8009c56:	bfde      	ittt	le
 8009c58:	1b12      	suble	r2, r2, r4
 8009c5a:	eb04 0c01 	addle.w	ip, r4, r1
 8009c5e:	1840      	addle	r0, r0, r1
 8009c60:	0052      	lsls	r2, r2, #1
 8009c62:	f1be 0e01 	subs.w	lr, lr, #1
 8009c66:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009c6a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009c6e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009c72:	d1ed      	bne.n	8009c50 <__ieee754_sqrt+0x94>
 8009c74:	4671      	mov	r1, lr
 8009c76:	2720      	movs	r7, #32
 8009c78:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009c7c:	4562      	cmp	r2, ip
 8009c7e:	eb04 060e 	add.w	r6, r4, lr
 8009c82:	dc02      	bgt.n	8009c8a <__ieee754_sqrt+0xce>
 8009c84:	d113      	bne.n	8009cae <__ieee754_sqrt+0xf2>
 8009c86:	429e      	cmp	r6, r3
 8009c88:	d811      	bhi.n	8009cae <__ieee754_sqrt+0xf2>
 8009c8a:	2e00      	cmp	r6, #0
 8009c8c:	eb06 0e04 	add.w	lr, r6, r4
 8009c90:	da43      	bge.n	8009d1a <__ieee754_sqrt+0x15e>
 8009c92:	f1be 0f00 	cmp.w	lr, #0
 8009c96:	db40      	blt.n	8009d1a <__ieee754_sqrt+0x15e>
 8009c98:	f10c 0801 	add.w	r8, ip, #1
 8009c9c:	eba2 020c 	sub.w	r2, r2, ip
 8009ca0:	429e      	cmp	r6, r3
 8009ca2:	bf88      	it	hi
 8009ca4:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8009ca8:	1b9b      	subs	r3, r3, r6
 8009caa:	4421      	add	r1, r4
 8009cac:	46c4      	mov	ip, r8
 8009cae:	0052      	lsls	r2, r2, #1
 8009cb0:	3f01      	subs	r7, #1
 8009cb2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009cb6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009cba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009cbe:	d1dd      	bne.n	8009c7c <__ieee754_sqrt+0xc0>
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	d006      	beq.n	8009cd2 <__ieee754_sqrt+0x116>
 8009cc4:	1c4c      	adds	r4, r1, #1
 8009cc6:	bf13      	iteet	ne
 8009cc8:	3101      	addne	r1, #1
 8009cca:	3001      	addeq	r0, #1
 8009ccc:	4639      	moveq	r1, r7
 8009cce:	f021 0101 	bicne.w	r1, r1, #1
 8009cd2:	1043      	asrs	r3, r0, #1
 8009cd4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009cd8:	0849      	lsrs	r1, r1, #1
 8009cda:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009cde:	07c2      	lsls	r2, r0, #31
 8009ce0:	bf48      	it	mi
 8009ce2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8009ce6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8009cea:	460c      	mov	r4, r1
 8009cec:	463d      	mov	r5, r7
 8009cee:	e77f      	b.n	8009bf0 <__ieee754_sqrt+0x34>
 8009cf0:	0ada      	lsrs	r2, r3, #11
 8009cf2:	3815      	subs	r0, #21
 8009cf4:	055b      	lsls	r3, r3, #21
 8009cf6:	2a00      	cmp	r2, #0
 8009cf8:	d0fa      	beq.n	8009cf0 <__ieee754_sqrt+0x134>
 8009cfa:	02d7      	lsls	r7, r2, #11
 8009cfc:	d50a      	bpl.n	8009d14 <__ieee754_sqrt+0x158>
 8009cfe:	f1c1 0420 	rsb	r4, r1, #32
 8009d02:	fa23 f404 	lsr.w	r4, r3, r4
 8009d06:	1e4d      	subs	r5, r1, #1
 8009d08:	408b      	lsls	r3, r1
 8009d0a:	4322      	orrs	r2, r4
 8009d0c:	1b41      	subs	r1, r0, r5
 8009d0e:	e788      	b.n	8009c22 <__ieee754_sqrt+0x66>
 8009d10:	4608      	mov	r0, r1
 8009d12:	e7f0      	b.n	8009cf6 <__ieee754_sqrt+0x13a>
 8009d14:	0052      	lsls	r2, r2, #1
 8009d16:	3101      	adds	r1, #1
 8009d18:	e7ef      	b.n	8009cfa <__ieee754_sqrt+0x13e>
 8009d1a:	46e0      	mov	r8, ip
 8009d1c:	e7be      	b.n	8009c9c <__ieee754_sqrt+0xe0>
 8009d1e:	bf00      	nop
 8009d20:	7ff00000 	.word	0x7ff00000

08009d24 <fabs>:
 8009d24:	ec51 0b10 	vmov	r0, r1, d0
 8009d28:	ee10 2a10 	vmov	r2, s0
 8009d2c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009d30:	ec43 2b10 	vmov	d0, r2, r3
 8009d34:	4770      	bx	lr

08009d36 <finite>:
 8009d36:	b082      	sub	sp, #8
 8009d38:	ed8d 0b00 	vstr	d0, [sp]
 8009d3c:	9801      	ldr	r0, [sp, #4]
 8009d3e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009d42:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009d46:	0fc0      	lsrs	r0, r0, #31
 8009d48:	b002      	add	sp, #8
 8009d4a:	4770      	bx	lr

08009d4c <rint>:
 8009d4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d4e:	ec51 0b10 	vmov	r0, r1, d0
 8009d52:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009d56:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8009d5a:	2e13      	cmp	r6, #19
 8009d5c:	ee10 4a10 	vmov	r4, s0
 8009d60:	460b      	mov	r3, r1
 8009d62:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8009d66:	dc58      	bgt.n	8009e1a <rint+0xce>
 8009d68:	2e00      	cmp	r6, #0
 8009d6a:	da2b      	bge.n	8009dc4 <rint+0x78>
 8009d6c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009d70:	4302      	orrs	r2, r0
 8009d72:	d023      	beq.n	8009dbc <rint+0x70>
 8009d74:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8009d78:	4302      	orrs	r2, r0
 8009d7a:	4254      	negs	r4, r2
 8009d7c:	4314      	orrs	r4, r2
 8009d7e:	0c4b      	lsrs	r3, r1, #17
 8009d80:	0b24      	lsrs	r4, r4, #12
 8009d82:	045b      	lsls	r3, r3, #17
 8009d84:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8009d88:	ea44 0103 	orr.w	r1, r4, r3
 8009d8c:	4b32      	ldr	r3, [pc, #200]	; (8009e58 <rint+0x10c>)
 8009d8e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009d92:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009d96:	4602      	mov	r2, r0
 8009d98:	460b      	mov	r3, r1
 8009d9a:	4630      	mov	r0, r6
 8009d9c:	4639      	mov	r1, r7
 8009d9e:	f7f6 fa85 	bl	80002ac <__adddf3>
 8009da2:	e9cd 0100 	strd	r0, r1, [sp]
 8009da6:	463b      	mov	r3, r7
 8009da8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009dac:	4632      	mov	r2, r6
 8009dae:	f7f6 fa7b 	bl	80002a8 <__aeabi_dsub>
 8009db2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009db6:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8009dba:	4639      	mov	r1, r7
 8009dbc:	ec41 0b10 	vmov	d0, r0, r1
 8009dc0:	b003      	add	sp, #12
 8009dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dc4:	4a25      	ldr	r2, [pc, #148]	; (8009e5c <rint+0x110>)
 8009dc6:	4132      	asrs	r2, r6
 8009dc8:	ea01 0702 	and.w	r7, r1, r2
 8009dcc:	4307      	orrs	r7, r0
 8009dce:	d0f5      	beq.n	8009dbc <rint+0x70>
 8009dd0:	0851      	lsrs	r1, r2, #1
 8009dd2:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8009dd6:	4314      	orrs	r4, r2
 8009dd8:	d00c      	beq.n	8009df4 <rint+0xa8>
 8009dda:	ea23 0201 	bic.w	r2, r3, r1
 8009dde:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009de2:	2e13      	cmp	r6, #19
 8009de4:	fa43 f606 	asr.w	r6, r3, r6
 8009de8:	bf0c      	ite	eq
 8009dea:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8009dee:	2400      	movne	r4, #0
 8009df0:	ea42 0306 	orr.w	r3, r2, r6
 8009df4:	4918      	ldr	r1, [pc, #96]	; (8009e58 <rint+0x10c>)
 8009df6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8009dfa:	4622      	mov	r2, r4
 8009dfc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009e00:	4620      	mov	r0, r4
 8009e02:	4629      	mov	r1, r5
 8009e04:	f7f6 fa52 	bl	80002ac <__adddf3>
 8009e08:	e9cd 0100 	strd	r0, r1, [sp]
 8009e0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e10:	4622      	mov	r2, r4
 8009e12:	462b      	mov	r3, r5
 8009e14:	f7f6 fa48 	bl	80002a8 <__aeabi_dsub>
 8009e18:	e7d0      	b.n	8009dbc <rint+0x70>
 8009e1a:	2e33      	cmp	r6, #51	; 0x33
 8009e1c:	dd07      	ble.n	8009e2e <rint+0xe2>
 8009e1e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009e22:	d1cb      	bne.n	8009dbc <rint+0x70>
 8009e24:	ee10 2a10 	vmov	r2, s0
 8009e28:	f7f6 fa40 	bl	80002ac <__adddf3>
 8009e2c:	e7c6      	b.n	8009dbc <rint+0x70>
 8009e2e:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8009e32:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8009e36:	40d6      	lsrs	r6, r2
 8009e38:	4230      	tst	r0, r6
 8009e3a:	d0bf      	beq.n	8009dbc <rint+0x70>
 8009e3c:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8009e40:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8009e44:	bf1f      	itttt	ne
 8009e46:	ea24 0101 	bicne.w	r1, r4, r1
 8009e4a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8009e4e:	fa44 f202 	asrne.w	r2, r4, r2
 8009e52:	ea41 0402 	orrne.w	r4, r1, r2
 8009e56:	e7cd      	b.n	8009df4 <rint+0xa8>
 8009e58:	0800a518 	.word	0x0800a518
 8009e5c:	000fffff 	.word	0x000fffff

08009e60 <scalbn>:
 8009e60:	b570      	push	{r4, r5, r6, lr}
 8009e62:	ec55 4b10 	vmov	r4, r5, d0
 8009e66:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009e6a:	4606      	mov	r6, r0
 8009e6c:	462b      	mov	r3, r5
 8009e6e:	b99a      	cbnz	r2, 8009e98 <scalbn+0x38>
 8009e70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009e74:	4323      	orrs	r3, r4
 8009e76:	d036      	beq.n	8009ee6 <scalbn+0x86>
 8009e78:	4b39      	ldr	r3, [pc, #228]	; (8009f60 <scalbn+0x100>)
 8009e7a:	4629      	mov	r1, r5
 8009e7c:	ee10 0a10 	vmov	r0, s0
 8009e80:	2200      	movs	r2, #0
 8009e82:	f7f6 fbc9 	bl	8000618 <__aeabi_dmul>
 8009e86:	4b37      	ldr	r3, [pc, #220]	; (8009f64 <scalbn+0x104>)
 8009e88:	429e      	cmp	r6, r3
 8009e8a:	4604      	mov	r4, r0
 8009e8c:	460d      	mov	r5, r1
 8009e8e:	da10      	bge.n	8009eb2 <scalbn+0x52>
 8009e90:	a32b      	add	r3, pc, #172	; (adr r3, 8009f40 <scalbn+0xe0>)
 8009e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e96:	e03a      	b.n	8009f0e <scalbn+0xae>
 8009e98:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009e9c:	428a      	cmp	r2, r1
 8009e9e:	d10c      	bne.n	8009eba <scalbn+0x5a>
 8009ea0:	ee10 2a10 	vmov	r2, s0
 8009ea4:	4620      	mov	r0, r4
 8009ea6:	4629      	mov	r1, r5
 8009ea8:	f7f6 fa00 	bl	80002ac <__adddf3>
 8009eac:	4604      	mov	r4, r0
 8009eae:	460d      	mov	r5, r1
 8009eb0:	e019      	b.n	8009ee6 <scalbn+0x86>
 8009eb2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	3a36      	subs	r2, #54	; 0x36
 8009eba:	4432      	add	r2, r6
 8009ebc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009ec0:	428a      	cmp	r2, r1
 8009ec2:	dd08      	ble.n	8009ed6 <scalbn+0x76>
 8009ec4:	2d00      	cmp	r5, #0
 8009ec6:	a120      	add	r1, pc, #128	; (adr r1, 8009f48 <scalbn+0xe8>)
 8009ec8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ecc:	da1c      	bge.n	8009f08 <scalbn+0xa8>
 8009ece:	a120      	add	r1, pc, #128	; (adr r1, 8009f50 <scalbn+0xf0>)
 8009ed0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ed4:	e018      	b.n	8009f08 <scalbn+0xa8>
 8009ed6:	2a00      	cmp	r2, #0
 8009ed8:	dd08      	ble.n	8009eec <scalbn+0x8c>
 8009eda:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009ede:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009ee2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009ee6:	ec45 4b10 	vmov	d0, r4, r5
 8009eea:	bd70      	pop	{r4, r5, r6, pc}
 8009eec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009ef0:	da19      	bge.n	8009f26 <scalbn+0xc6>
 8009ef2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009ef6:	429e      	cmp	r6, r3
 8009ef8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009efc:	dd0a      	ble.n	8009f14 <scalbn+0xb4>
 8009efe:	a112      	add	r1, pc, #72	; (adr r1, 8009f48 <scalbn+0xe8>)
 8009f00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d1e2      	bne.n	8009ece <scalbn+0x6e>
 8009f08:	a30f      	add	r3, pc, #60	; (adr r3, 8009f48 <scalbn+0xe8>)
 8009f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0e:	f7f6 fb83 	bl	8000618 <__aeabi_dmul>
 8009f12:	e7cb      	b.n	8009eac <scalbn+0x4c>
 8009f14:	a10a      	add	r1, pc, #40	; (adr r1, 8009f40 <scalbn+0xe0>)
 8009f16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d0b8      	beq.n	8009e90 <scalbn+0x30>
 8009f1e:	a10e      	add	r1, pc, #56	; (adr r1, 8009f58 <scalbn+0xf8>)
 8009f20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f24:	e7b4      	b.n	8009e90 <scalbn+0x30>
 8009f26:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009f2a:	3236      	adds	r2, #54	; 0x36
 8009f2c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009f30:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009f34:	4620      	mov	r0, r4
 8009f36:	4b0c      	ldr	r3, [pc, #48]	; (8009f68 <scalbn+0x108>)
 8009f38:	2200      	movs	r2, #0
 8009f3a:	e7e8      	b.n	8009f0e <scalbn+0xae>
 8009f3c:	f3af 8000 	nop.w
 8009f40:	c2f8f359 	.word	0xc2f8f359
 8009f44:	01a56e1f 	.word	0x01a56e1f
 8009f48:	8800759c 	.word	0x8800759c
 8009f4c:	7e37e43c 	.word	0x7e37e43c
 8009f50:	8800759c 	.word	0x8800759c
 8009f54:	fe37e43c 	.word	0xfe37e43c
 8009f58:	c2f8f359 	.word	0xc2f8f359
 8009f5c:	81a56e1f 	.word	0x81a56e1f
 8009f60:	43500000 	.word	0x43500000
 8009f64:	ffff3cb0 	.word	0xffff3cb0
 8009f68:	3c900000 	.word	0x3c900000

08009f6c <_init>:
 8009f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f6e:	bf00      	nop
 8009f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f72:	bc08      	pop	{r3}
 8009f74:	469e      	mov	lr, r3
 8009f76:	4770      	bx	lr

08009f78 <_fini>:
 8009f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f7a:	bf00      	nop
 8009f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f7e:	bc08      	pop	{r3}
 8009f80:	469e      	mov	lr, r3
 8009f82:	4770      	bx	lr
